/* JavaDBNetParserTokenManager.java */
/* Generated By:JavaCC: Do not edit this line. JavaDBNetParserTokenManager.java */
package de.renew.dbnets.shadow.parser;
import de.renew.dbnets.datalogic.Action;
import de.renew.dbnets.datalogic.ActionCall;
import de.renew.dbnets.datalogic.EditedFact;
import de.renew.dbnets.datalogic.Query;
import de.renew.dbnets.datalogic.QueryCall;
import de.renew.dbnets.pa.PerformanceAnalysisInfo;
import de.renew.dbnets.persistence.DatabaseSchemaDeclaration;
import de.renew.dbnets.persistence.JdbcConnection;
import de.renew.dbnets.shadow.ParsedDBNetDeclarationNode;
import de.renew.expression.CallExpression;
import de.renew.expression.ConstantExpression;
import de.renew.expression.Function;
import de.renew.expression.LocalVariable;
import de.renew.expression.VariableExpression;
import de.renew.formalism.function.BasicFunction;
import de.renew.formalism.function.BasicUnaryFunction;
import de.renew.formalism.function.DynamicConstructorFunction;
import de.renew.formalism.function.InstanceofFunction;
import de.renew.formalism.java.ChannelInscription;
import de.renew.formalism.java.JavaHelper;
import de.renew.formalism.java.LiteralParser;
import de.renew.formalism.java.ParsedDeclarationNode;
import de.renew.formalism.java.ParsedImportDecl;
import de.renew.formalism.java.ParseException;
import de.renew.formalism.java.PrimaryPart;
import de.renew.formalism.java.TimedExpression;
import de.renew.formalism.java.Token;
import de.renew.formalism.java.TypedExpression;
import de.renew.net.DBNetTransition;
import de.renew.net.Net;
import de.renew.net.NetInstance;
import de.renew.net.NetNotFoundException;
import de.renew.net.Transition;
import de.renew.net.TransitionInscription;
import de.renew.net.UplinkInscription;
import de.renew.net.inscription.ActionInscription;
import de.renew.net.inscription.CreationInscription;
import de.renew.net.inscription.DownlinkInscription;
import de.renew.net.inscription.ExpressionInscription;
import de.renew.net.loading.NetLoader;
import de.renew.shadow.ShadowLookup;
import de.renew.unify.List;
import de.renew.unify.Tuple;
import de.renew.unify.Variable;
import de.renew.util.Types;
import de.renew.util.Value;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;
import java.util.HashMap;
import java.util.Map;
import java.util.Optional;
import java.util.Vector;
import java.util.function.Supplier;

/** Token Manager. */
@SuppressWarnings("unused")public class JavaDBNetParserTokenManager implements JavaDBNetParserConstants {

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1, long active2){
   switch (pos)
   {
      case 0:
         if ((active1 & 0x100000000L) != 0L)
            return 4;
         if ((active1 & 0x8010000000000000L) != 0L)
            return 55;
         if ((active1 & 0x200041000000000L) != 0L || (active2 & 0x10L) != 0L)
            return 31;
         if ((active0 & 0xfffffffffffffe00L) != 0L || (active1 & 0x1fffL) != 0L)
         {
            jjmatchedKind = 85;
            return 28;
         }
         return -1;
      case 1:
         if ((active0 & 0xffffbfe7fffffe00L) != 0L || (active1 & 0x1fffL) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 85;
               jjmatchedPos = 1;
            }
            return 28;
         }
         if ((active0 & 0x401800000000L) != 0L)
            return 28;
         return -1;
      case 2:
         if ((active0 & 0x8c080400000400L) != 0L || (active1 & 0x200L) != 0L)
            return 28;
         if ((active0 & 0xff73b7f3fffffa00L) != 0L || (active1 & 0x1dffL) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 85;
               jjmatchedPos = 2;
            }
            return 28;
         }
         return -1;
      case 3:
         if ((active0 & 0x11010200002c000L) != 0L || (active1 & 0x510L) != 0L)
            return 28;
         if ((active0 & 0xfe6ba7d3fffd3a00L) != 0L || (active1 & 0x18efL) != 0L)
         {
            jjmatchedKind = 85;
            jjmatchedPos = 3;
            return 28;
         }
         return -1;
      case 4:
         if ((active0 & 0x7e6b8053fff01a00L) != 0L || (active1 & 0x88dL) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 85;
               jjmatchedPos = 4;
            }
            return 28;
         }
         if ((active0 & 0x80002780000d2000L) != 0L || (active1 & 0x1062L) != 0L)
            return 28;
         return -1;
      case 5:
         if ((active0 & 0x64610011fe000800L) != 0L || (active1 & 0x45L) != 0L)
            return 28;
         if ((active0 & 0x1a0a824201f01200L) != 0L || (active1 & 0x888L) != 0L)
         {
            if (jjmatchedPos != 5)
            {
               jjmatchedKind = 85;
               jjmatchedPos = 5;
            }
            return 28;
         }
         return -1;
      case 6:
         if ((active0 & 0xa00024000a01000L) != 0L)
            return 28;
         if ((active0 & 0x100a8003fd500200L) != 0L || (active1 & 0x888L) != 0L)
         {
            jjmatchedKind = 85;
            jjmatchedPos = 6;
            return 28;
         }
         return -1;
      case 7:
         if ((active0 & 0x100200L) != 0L || (active1 & 0x800L) != 0L)
            return 28;
         if ((active0 & 0x100a8003fd400000L) != 0L || (active1 & 0x88L) != 0L)
         {
            jjmatchedKind = 85;
            jjmatchedPos = 7;
            return 28;
         }
         return -1;
      case 8:
         if ((active0 & 0x28001fd400000L) != 0L || (active1 & 0x8L) != 0L)
         {
            jjmatchedKind = 85;
            jjmatchedPos = 8;
            return 28;
         }
         if ((active0 & 0x1008000200000000L) != 0L || (active1 & 0x80L) != 0L)
            return 28;
         return -1;
      case 9:
         if ((active0 & 0x2800000400000L) != 0L)
            return 28;
         if ((active0 & 0x1fd000000L) != 0L || (active1 & 0x8L) != 0L)
         {
            jjmatchedKind = 85;
            jjmatchedPos = 9;
            return 28;
         }
         return -1;
      case 10:
         if ((active0 & 0x1fd000000L) != 0L || (active1 & 0x8L) != 0L)
         {
            jjmatchedKind = 85;
            jjmatchedPos = 10;
            return 28;
         }
         return -1;
      case 11:
         if ((active0 & 0x1000000L) != 0L || (active1 & 0x8L) != 0L)
            return 28;
         if ((active0 & 0x1fc000000L) != 0L)
         {
            jjmatchedKind = 85;
            jjmatchedPos = 11;
            return 28;
         }
         return -1;
      case 12:
         if ((active0 & 0x1fc000000L) != 0L)
         {
            jjmatchedKind = 85;
            jjmatchedPos = 12;
            return 28;
         }
         return -1;
      case 13:
         if ((active0 & 0x4000000L) != 0L)
            return 28;
         if ((active0 & 0x1f8000000L) != 0L)
         {
            jjmatchedKind = 85;
            jjmatchedPos = 13;
            return 28;
         }
         return -1;
      case 14:
         if ((active0 & 0x1f8000000L) != 0L)
         {
            jjmatchedKind = 85;
            jjmatchedPos = 14;
            return 28;
         }
         return -1;
      case 15:
         if ((active0 & 0x1f0000000L) != 0L)
         {
            jjmatchedKind = 85;
            jjmatchedPos = 15;
            return 28;
         }
         if ((active0 & 0x8000000L) != 0L)
            return 28;
         return -1;
      case 16:
         if ((active0 & 0x1f0000000L) != 0L)
         {
            jjmatchedKind = 85;
            jjmatchedPos = 16;
            return 28;
         }
         return -1;
      case 17:
         if ((active0 & 0x1f0000000L) != 0L)
         {
            jjmatchedKind = 85;
            jjmatchedPos = 17;
            return 28;
         }
         return -1;
      case 18:
         if ((active0 & 0x1f0000000L) != 0L)
         {
            jjmatchedKind = 85;
            jjmatchedPos = 18;
            return 28;
         }
         return -1;
      case 19:
         if ((active0 & 0x80000000L) != 0L)
            return 28;
         if ((active0 & 0x170000000L) != 0L)
         {
            jjmatchedKind = 85;
            jjmatchedPos = 19;
            return 28;
         }
         return -1;
      case 20:
         if ((active0 & 0x130000000L) != 0L)
         {
            jjmatchedKind = 85;
            jjmatchedPos = 20;
            return 28;
         }
         if ((active0 & 0x40000000L) != 0L)
            return 28;
         return -1;
      case 21:
         if ((active0 & 0x130000000L) != 0L)
         {
            jjmatchedKind = 85;
            jjmatchedPos = 21;
            return 28;
         }
         return -1;
      case 22:
         if ((active0 & 0x10000000L) != 0L)
            return 28;
         if ((active0 & 0x120000000L) != 0L)
         {
            jjmatchedKind = 85;
            jjmatchedPos = 22;
            return 28;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1, long active2){
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1, active2), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0(){
   switch(curChar)
   {
      case 9:
         return jjStopAtPos(0, 2);
      case 10:
         return jjStopAtPos(0, 3);
      case 12:
         return jjStopAtPos(0, 5);
      case 13:
         return jjStopAtPos(0, 4);
      case 32:
         return jjStopAtPos(0, 1);
      case 33:
         jjmatchedKind = 101;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x100000000000L, 0x0L);
      case 37:
         jjmatchedKind = 120;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x8L);
      case 38:
         jjmatchedKind = 117;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x400000000000L, 0x1L);
      case 40:
         return jjStopAtPos(0, 88);
      case 41:
         return jjStopAtPos(0, 89);
      case 42:
         jjmatchedKind = 115;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4000000000000000L, 0x0L);
      case 43:
         jjmatchedKind = 113;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1000800000000000L, 0x0L);
      case 44:
         return jjStopAtPos(0, 95);
      case 45:
         jjmatchedKind = 114;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x2001000000000000L, 0x0L);
      case 46:
         return jjStartNfaWithStates_0(0, 96, 4);
      case 47:
         jjmatchedKind = 116;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8000000000000000L, 0x0L);
      case 58:
         return jjStopAtPos(0, 104);
      case 59:
         return jjStopAtPos(0, 94);
      case 60:
         jjmatchedKind = 100;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x200040000000000L, 0x10L);
      case 61:
         jjmatchedKind = 97;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x20000000000L, 0x0L);
      case 62:
         jjmatchedKind = 99;
         return jjMoveStringLiteralDfa1_0(0x0L, 0xc00080000000000L, 0x60L);
      case 63:
         return jjStopAtPos(0, 103);
      case 64:
         return jjStopAtPos(0, 98);
      case 91:
         return jjStopAtPos(0, 92);
      case 93:
         return jjStopAtPos(0, 93);
      case 94:
         jjmatchedKind = 119;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x4L);
      case 97:
         return jjMoveStringLiteralDfa1_0(0xe00L, 0x0L, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x7000L, 0x0L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x1f8000L, 0x0L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x1fffe00000L, 0x0L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x6000000000L, 0x0L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0xf8000000000L, 0x0L, 0x0L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x300000000000L, 0x0L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0xfc00000000000L, 0x0L, 0x0L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x10000000000000L, 0x0L, 0x0L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x20000000000000L, 0x0L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x1c0000000000000L, 0x0L, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x3e00000000000000L, 0x0L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x4000000000000000L, 0x0L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x8000000000000000L, 0xfL, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x3f0L, 0x0L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xc00L, 0x0L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1000L, 0x0L);
      case 123:
         return jjStopAtPos(0, 90);
      case 124:
         jjmatchedKind = 118;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x200000000000L, 0x2L);
      case 125:
         return jjStopAtPos(0, 91);
      case 126:
         return jjStopAtPos(0, 102);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1, long active2){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1, active2);
      return 1;
   }
   switch(curChar)
   {
      case 38:
         if ((active1 & 0x400000000000L) != 0L)
            return jjStopAtPos(1, 110);
         break;
      case 43:
         if ((active1 & 0x800000000000L) != 0L)
            return jjStopAtPos(1, 111);
         break;
      case 45:
         if ((active1 & 0x1000000000000L) != 0L)
            return jjStopAtPos(1, 112);
         break;
      case 60:
         if ((active1 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 121;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x10L);
      case 61:
         if ((active1 & 0x20000000000L) != 0L)
            return jjStopAtPos(1, 105);
         else if ((active1 & 0x40000000000L) != 0L)
            return jjStopAtPos(1, 106);
         else if ((active1 & 0x80000000000L) != 0L)
            return jjStopAtPos(1, 107);
         else if ((active1 & 0x100000000000L) != 0L)
            return jjStopAtPos(1, 108);
         else if ((active1 & 0x1000000000000000L) != 0L)
            return jjStopAtPos(1, 124);
         else if ((active1 & 0x2000000000000000L) != 0L)
            return jjStopAtPos(1, 125);
         else if ((active1 & 0x4000000000000000L) != 0L)
            return jjStopAtPos(1, 126);
         else if ((active1 & 0x8000000000000000L) != 0L)
            return jjStopAtPos(1, 127);
         else if ((active2 & 0x1L) != 0L)
            return jjStopAtPos(1, 128);
         else if ((active2 & 0x2L) != 0L)
            return jjStopAtPos(1, 129);
         else if ((active2 & 0x4L) != 0L)
            return jjStopAtPos(1, 130);
         else if ((active2 & 0x8L) != 0L)
            return jjStopAtPos(1, 131);
         break;
      case 62:
         if ((active1 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 122;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x800000000000000L, active2, 0x60L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x660008000018000L, active1, 0L, active2, 0L);
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0x3ffc00200L, active1, 0L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0x800L, active1, 0L, active2, 0L);
      case 100:
         return jjMoveStringLiteralDfa2_0(active0, 0x400L, active1, 0L, active2, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x4080000400200000L, active1, 0L, active2, 0L);
      case 102:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 46, 28);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000000020000L, active1, 0x1070L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x30000000000L, active1, 0L, active2, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x42000040000L, active1, 0L, active2, 0L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x1800000000000L, active1, 0L, active2, 0L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0xe000000000000L, active1, 0L, active2, 0L);
      case 111:
         if ((active0 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 35;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x10181000181000L, active1, 0xc00L, active2, 0L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x1800000000002000L, active1, 0x380L, active2, 0L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x1L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x2100200000000000L, active1, 0x2L, active2, 0L);
      case 119:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x4L, active2, 0L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000000L, active1, 0L, active2, 0L);
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000L, active1, 0x8L, active2, 0L);
      case 124:
         if ((active1 & 0x200000000000L) != 0L)
            return jjStopAtPos(1, 109);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1, active2);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(0, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1, active2);
      return 2;
   }
   switch(curChar)
   {
      case 61:
         if ((active2 & 0x10L) != 0L)
            return jjStopAtPos(2, 132);
         else if ((active2 & 0x20L) != 0L)
            return jjStopAtPos(2, 133);
         break;
      case 62:
         if ((active1 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 123;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x40L);
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000060000L, active1, 0x81L, active2, 0L);
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000000000000L, active1, 0L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000000000L, active1, 0L, active2, 0L);
      case 100:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(2, 10, 28);
         break;
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000L, active1, 0L, active2, 0L);
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000L, active1, 0L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000000000000L, active1, 0x1414L, active2, 0L);
      case 108:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(2, 34, 28);
         return jjMoveStringLiteralDfa3_0(active0, 0x100008000000000L, active1, 0x800L, active2, 0L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x300303ffd80000L, active1, 0x8L, active2, 0L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x9000040000001000L, active1, 0L, active2, 0L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x1800000000000L, active1, 0x2L, active2, 0L);
      case 114:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 43, 28);
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000000000L, active1, 0x60L, active2, 0L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x2002000008200L, active1, 0L, active2, 0L);
      case 116:
         if ((active0 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 50;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x4048104000014800L, active1, 0L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000000L, active1, 0x100L, active2, 0L);
      case 119:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 55, 28);
         break;
      case 121:
         if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(2, 73, 28);
         break;
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1, active2);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(1, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1, active2);
      return 3;
   }
   switch(curChar)
   {
      case 61:
         if ((active2 & 0x40L) != 0L)
            return jjStopAtPos(3, 134);
         break;
      case 95:
         return jjMoveStringLiteralDfa4_0(active0, 0x3ffc00000L, active1, 0L, active2, 0L);
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x400070000202000L, active1, 0x800L, active2, 0L);
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000L, active1, 0L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000L, active1, 0x8L, active2, 0L);
      case 100:
         if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(3, 74, 28);
         break;
      case 101:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(3, 14, 28);
         else if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(3, 15, 28);
         else if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 37, 28);
         else if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(3, 72, 28);
         return jjMoveStringLiteralDfa4_0(active0, 0x8004000000000L, active1, 0x2L, active2, 0L);
      case 103:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 52, 28);
         break;
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000000000800L, active1, 0L, active2, 0L);
      case 107:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000000000000L, active1, 0L, active2, 0L);
      case 108:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 56, 28);
         return jjMoveStringLiteralDfa4_0(active0, 0x2000800000001000L, active1, 0x1000L, active2, 0L);
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x80L, active2, 0L);
      case 111:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 44, 28);
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000000L, active1, 0x60L, active2, 0L);
      case 114:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(3, 17, 28);
         return jjMoveStringLiteralDfa4_0(active0, 0x8000200000000000L, active1, 0L, active2, 0L);
      case 115:
         if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(3, 68, 28);
         return jjMoveStringLiteralDfa4_0(active0, 0x80000c0000L, active1, 0L, active2, 0L);
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x1002000000100200L, active1, 0x5L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x4020000000000000L, active1, 0L, active2, 0L);
      case 118:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000000000000L, active1, 0L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1, active2);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(2, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0xa22000000400000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x4L);
      case 100:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 45, 28);
         return jjMoveStringLiteralDfa5_0(active0, 0x800000L, active1, 0L);
      case 101:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 39, 28);
         else if ((active1 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(4, 76, 28);
         return jjMoveStringLiteralDfa5_0(active0, 0x1000800000001000L, active1, 0L);
      case 104:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(4, 16, 28);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x8L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000000100000L, active1, 0x1L);
      case 106:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000L, active1, 0L);
      case 107:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(4, 13, 28);
         break;
      case 108:
         if ((active0 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 40;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x21000000000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000000000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x800L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa5_0(active0, 0x1fe000000L, active1, 0L);
      case 113:
         return jjMoveStringLiteralDfa5_0(active0, 0x200000000L, active1, 0L);
      case 114:
         if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(4, 65, 28);
         return jjMoveStringLiteralDfa5_0(active0, 0x4009000000000200L, active1, 0L);
      case 115:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(4, 18, 28);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x80L);
      case 116:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(4, 19, 28);
         else if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 42, 28);
         else if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 63, 28);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x800L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x200000L, active1, 0L);
      case 118:
         return jjMoveStringLiteralDfa5_0(active0, 0x40000000000000L, active1, 0L);
      case 119:
         if ((active1 & 0x20L) != 0L)
         {
            jjmatchedKind = 69;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x40L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(3, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 97:
         if ((active0 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 25;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x1fc001200L, active1, 0L);
      case 99:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 61, 28);
         else if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(5, 64, 28);
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000000400000L, active1, 0L);
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0x4001800000L, active1, 0L);
      case 101:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 36, 28);
         else if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 54, 28);
         break;
      case 102:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000000000L, active1, 0L);
      case 103:
         return jjMoveStringLiteralDfa6_0(active0, 0x200000000000000L, active1, 0L);
      case 104:
         if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(5, 66, 28);
         break;
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x880L);
      case 108:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 53, 28);
         return jjMoveStringLiteralDfa6_0(active0, 0x20000200000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa6_0(active0, 0x800000000000L, active1, 0L);
      case 110:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(5, 11, 28);
         else if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 62, 28);
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000100000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x8L);
      case 115:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 58, 28);
         else if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(5, 70, 28);
         break;
      case 116:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 48, 28);
         return jjMoveStringLiteralDfa6_0(active0, 0x800000000000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa6_0(active0, 0x200000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(4, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa7_0(active0, 0x1fc000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x8000000000000L, active1, 0L);
      case 98:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000000200L, active1, 0L);
      case 101:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 57, 28);
         else if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 59, 28);
         return jjMoveStringLiteralDfa7_0(active0, 0x800200000000L, active1, 0x80L);
      case 108:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(6, 23, 28);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x800L);
      case 110:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(6, 12, 28);
         break;
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x8L);
      case 115:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 38, 28);
         break;
      case 116:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(6, 21, 28);
         return jjMoveStringLiteralDfa7_0(active0, 0x1000000000400000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x100000L, active1, 0L);
      case 121:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 41, 28);
         break;
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(5, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x8000001000000L, active1, 0L);
      case 101:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(7, 20, 28);
         else if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(7, 75, 28);
         return jjMoveStringLiteralDfa8_0(active0, 0x1002000000000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0x4400000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa8_0(active0, 0x18000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa8_0(active0, 0x800000000000L, active1, 0x88L);
      case 114:
         return jjMoveStringLiteralDfa8_0(active0, 0x220000000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa8_0(active0, 0x1c0000000L, active1, 0L);
      case 116:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(7, 9, 28);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(6, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa9_0(active0, 0x1000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa9_0(active0, 0x8000000L, active1, 0L);
      case 100:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 60, 28);
         return jjMoveStringLiteralDfa9_0(active0, 0x4000000L, active1, 0L);
      case 101:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 51, 28);
         return jjMoveStringLiteralDfa9_0(active0, 0x1f0000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x8L);
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0x2000000400000L, active1, 0L);
      case 116:
         if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(8, 71, 28);
         return jjMoveStringLiteralDfa9_0(active0, 0x800000000000L, active1, 0L);
      case 121:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(8, 33, 28);
         break;
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(7, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, active1, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa10_0(active0, 0x4000000L, active1, 0L);
      case 102:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 49, 28);
         break;
      case 110:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(9, 22, 28);
         return jjMoveStringLiteralDfa10_0(active0, 0x1c0000000L, active1, 0L);
      case 113:
         return jjMoveStringLiteralDfa10_0(active0, 0x20000000L, active1, 0L);
      case 115:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 47, 28);
         return jjMoveStringLiteralDfa10_0(active0, 0x10000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa10_0(active0, 0x1000000L, active1, 0L);
      case 120:
         return jjMoveStringLiteralDfa10_0(active0, 0x8000000L, active1, 0L);
      case 122:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x8L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(8, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, active1, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa11_0(active0, 0x28000000L, active1, 0L);
      case 100:
         return jjMoveStringLiteralDfa11_0(active0, 0x1c0000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x8L);
      case 110:
         return jjMoveStringLiteralDfa11_0(active0, 0x4000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa11_0(active0, 0x1000000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa11_0(active0, 0x10000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(9, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, active1, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa12_0(active0, 0x1c0000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa12_0(active0, 0x14000000L, active1, 0L);
      case 100:
         if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(11, 67, 28);
         return jjMoveStringLiteralDfa12_0(active0, 0x8000000L, active1, 0L);
      case 108:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(11, 24, 28);
         break;
      case 109:
         return jjMoveStringLiteralDfa12_0(active0, 0x20000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa12_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(10, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, 0L, 0L);
      return 12;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa13_0(active0, 0x28000000L);
      case 103:
         return jjMoveStringLiteralDfa13_0(active0, 0x10000000L);
      case 109:
         return jjMoveStringLiteralDfa13_0(active0, 0x4000000L);
      case 116:
         return jjMoveStringLiteralDfa13_0(active0, 0x1c0000000L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0, 0L, 0L);
}
private int jjMoveStringLiteralDfa13_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(11, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0, 0L, 0L);
      return 13;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(13, 26, 28);
         return jjMoveStringLiteralDfa14_0(active0, 0x10000000L);
      case 105:
         return jjMoveStringLiteralDfa14_0(active0, 0x1c0000000L);
      case 108:
         return jjMoveStringLiteralDfa14_0(active0, 0x8000000L);
      case 115:
         return jjMoveStringLiteralDfa14_0(active0, 0x20000000L);
      default :
         break;
   }
   return jjStartNfa_0(12, active0, 0L, 0L);
}
private int jjMoveStringLiteralDfa14_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(12, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0, 0L, 0L);
      return 14;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa15_0(active0, 0x10000000L);
      case 97:
         return jjMoveStringLiteralDfa15_0(active0, 0x8000000L);
      case 109:
         return jjMoveStringLiteralDfa15_0(active0, 0x1c0000000L);
      case 115:
         return jjMoveStringLiteralDfa15_0(active0, 0x20000000L);
      default :
         break;
   }
   return jjStartNfa_0(13, active0, 0L, 0L);
}
private int jjMoveStringLiteralDfa15_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(13, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, active0, 0L, 0L);
      return 15;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa16_0(active0, 0x20000000L);
      case 101:
         return jjMoveStringLiteralDfa16_0(active0, 0x1c0000000L);
      case 116:
         return jjMoveStringLiteralDfa16_0(active0, 0x10000000L);
      case 121:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(15, 27, 28);
         break;
      default :
         break;
   }
   return jjStartNfa_0(14, active0, 0L, 0L);
}
private int jjMoveStringLiteralDfa16_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(14, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, active0, 0L, 0L);
      return 16;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa17_0(active0, 0x1c0000000L);
      case 103:
         return jjMoveStringLiteralDfa17_0(active0, 0x20000000L);
      case 121:
         return jjMoveStringLiteralDfa17_0(active0, 0x10000000L);
      default :
         break;
   }
   return jjStartNfa_0(15, active0, 0L, 0L);
}
private int jjMoveStringLiteralDfa17_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(15, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(16, active0, 0L, 0L);
      return 17;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa18_0(active0, 0x20000000L);
      case 110:
         return jjMoveStringLiteralDfa18_0(active0, 0xc0000000L);
      case 112:
         return jjMoveStringLiteralDfa18_0(active0, 0x110000000L);
      default :
         break;
   }
   return jjStartNfa_0(16, active0, 0L, 0L);
}
private int jjMoveStringLiteralDfa18_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(16, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(17, active0, 0L, 0L);
      return 18;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa19_0(active0, 0x20000000L);
      case 97:
         return jjMoveStringLiteralDfa19_0(active0, 0x140000000L);
      case 101:
         return jjMoveStringLiteralDfa19_0(active0, 0x10000000L);
      case 117:
         return jjMoveStringLiteralDfa19_0(active0, 0x80000000L);
      default :
         break;
   }
   return jjStartNfa_0(17, active0, 0L, 0L);
}
private int jjMoveStringLiteralDfa19_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(17, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(18, active0, 0L, 0L);
      return 19;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa20_0(active0, 0x10000000L);
      case 109:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(19, 31, 28);
         return jjMoveStringLiteralDfa20_0(active0, 0x40000000L);
      case 113:
         return jjMoveStringLiteralDfa20_0(active0, 0x20000000L);
      case 116:
         return jjMoveStringLiteralDfa20_0(active0, 0x100000000L);
      default :
         break;
   }
   return jjStartNfa_0(18, active0, 0L, 0L);
}
private int jjMoveStringLiteralDfa20_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(18, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(19, active0, 0L, 0L);
      return 20;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(20, 30, 28);
         break;
      case 110:
         return jjMoveStringLiteralDfa21_0(active0, 0x10000000L);
      case 116:
         return jjMoveStringLiteralDfa21_0(active0, 0x100000000L);
      case 117:
         return jjMoveStringLiteralDfa21_0(active0, 0x20000000L);
      default :
         break;
   }
   return jjStartNfa_0(19, active0, 0L, 0L);
}
private int jjMoveStringLiteralDfa21_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(19, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(20, active0, 0L, 0L);
      return 21;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa22_0(active0, 0x120000000L);
      case 117:
         return jjMoveStringLiteralDfa22_0(active0, 0x10000000L);
      default :
         break;
   }
   return jjStartNfa_0(20, active0, 0L, 0L);
}
private int jjMoveStringLiteralDfa22_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(20, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(21, active0, 0L, 0L);
      return 22;
   }
   switch(curChar)
   {
      case 109:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(22, 28, 28);
         break;
      case 114:
         return jjMoveStringLiteralDfa23_0(active0, 0x120000000L);
      default :
         break;
   }
   return jjStartNfa_0(21, active0, 0L, 0L);
}
private int jjMoveStringLiteralDfa23_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(21, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(22, active0, 0L, 0L);
      return 23;
   }
   switch(curChar)
   {
      case 110:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(23, 32, 28);
         break;
      case 121:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(23, 29, 28);
         break;
      default :
         break;
   }
   return jjStartNfa_0(22, active0, 0L, 0L);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec3 = {
   0x1ff00000fffffffeL, 0xffffffffffffc000L, 0xffffffffL, 0x600000000000000L
};
static final long[] jjbitVec4 = {
   0x0L, 0x0L, 0x0L, 0xff7fffffff7fffffL
};
static final long[] jjbitVec5 = {
   0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec6 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffL, 0x0L
};
static final long[] jjbitVec7 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0x0L, 0x0L
};
static final long[] jjbitVec8 = {
   0x3fffffffffffL, 0x0L, 0x0L, 0x0L
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 73;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 55:
                  if (curChar == 42)
                     { jjCheckNAddTwoStates(68, 69); }
                  else if (curChar == 47)
                  {
                     if (kind > 6)
                        kind = 6;
                     { jjCheckNAddStates(0, 2); }
                  }
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 60;
                  break;
               case 0:
                  if (kind > 135)
                     kind = 135;
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(3, 9); }
                  else if (curChar == 47)
                     { jjAddStates(10, 12); }
                  else if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 31;
                  else if (curChar == 36)
                  {
                     if (kind > 85)
                        kind = 85;
                     { jjCheckNAdd(28); }
                  }
                  else if (curChar == 34)
                     { jjCheckNAddStates(13, 15); }
                  else if (curChar == 39)
                     { jjAddStates(16, 17); }
                  else if (curChar == 46)
                     { jjCheckNAdd(4); }
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 77)
                        kind = 77;
                     { jjCheckNAddTwoStates(1, 2); }
                  }
                  else if (curChar == 48)
                  {
                     if (kind > 77)
                        kind = 77;
                     { jjCheckNAddStates(18, 20); }
                  }
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 77)
                     kind = 77;
                  { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 3:
                  if (curChar == 46)
                     { jjCheckNAdd(4); }
                  break;
               case 4:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 81)
                     kind = 81;
                  { jjCheckNAddStates(21, 23); }
                  break;
               case 6:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(7); }
                  break;
               case 7:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 81)
                     kind = 81;
                  { jjCheckNAddTwoStates(7, 8); }
                  break;
               case 9:
                  if (curChar == 39)
                     { jjAddStates(16, 17); }
                  break;
               case 10:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     { jjCheckNAdd(11); }
                  break;
               case 11:
                  if (curChar == 39 && kind > 83)
                     kind = 83;
                  break;
               case 13:
                  if ((0x8400000000L & l) != 0L)
                     { jjCheckNAdd(11); }
                  break;
               case 14:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(15, 11); }
                  break;
               case 15:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAdd(11); }
                  break;
               case 16:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 17:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAdd(15); }
                  break;
               case 18:
                  if (curChar == 34)
                     { jjCheckNAddStates(13, 15); }
                  break;
               case 19:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     { jjCheckNAddStates(13, 15); }
                  break;
               case 21:
                  if ((0x8400000000L & l) != 0L)
                     { jjCheckNAddStates(13, 15); }
                  break;
               case 22:
                  if (curChar == 34 && kind > 84)
                     kind = 84;
                  break;
               case 23:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAddStates(24, 27); }
                  break;
               case 24:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAddStates(13, 15); }
                  break;
               case 25:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 26:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAdd(24); }
                  break;
               case 27:
                  if (curChar != 36)
                     break;
                  if (kind > 85)
                     kind = 85;
                  { jjCheckNAdd(28); }
                  break;
               case 28:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 85)
                     kind = 85;
                  { jjCheckNAdd(28); }
                  break;
               case 29:
                  if (kind > 135)
                     kind = 135;
                  break;
               case 30:
                  if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 32:
                  if ((0xafffffffffffffffL & l) != 0L)
                     { jjAddStates(28, 29); }
                  break;
               case 34:
                  if (curChar == 62 && kind > 136)
                     kind = 136;
                  break;
               case 35:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(3, 9); }
                  break;
               case 36:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(36, 37); }
                  break;
               case 37:
                  if (curChar != 46)
                     break;
                  if (kind > 81)
                     kind = 81;
                  { jjCheckNAddStates(30, 32); }
                  break;
               case 38:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 81)
                     kind = 81;
                  { jjCheckNAddStates(30, 32); }
                  break;
               case 40:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(41); }
                  break;
               case 41:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 81)
                     kind = 81;
                  { jjCheckNAddTwoStates(41, 8); }
                  break;
               case 42:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(42, 43); }
                  break;
               case 44:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(45); }
                  break;
               case 45:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 81)
                     kind = 81;
                  { jjCheckNAddTwoStates(45, 8); }
                  break;
               case 46:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(33, 35); }
                  break;
               case 48:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(49); }
                  break;
               case 49:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(49, 8); }
                  break;
               case 50:
                  if (curChar != 48)
                     break;
                  if (kind > 77)
                     kind = 77;
                  { jjCheckNAddStates(18, 20); }
                  break;
               case 52:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 77)
                     kind = 77;
                  { jjCheckNAddTwoStates(52, 2); }
                  break;
               case 53:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 77)
                     kind = 77;
                  { jjCheckNAddTwoStates(53, 2); }
                  break;
               case 54:
                  if (curChar == 47)
                     { jjAddStates(10, 12); }
                  break;
               case 56:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 6)
                     kind = 6;
                  { jjCheckNAddStates(0, 2); }
                  break;
               case 57:
                  if ((0x2400L & l) != 0L && kind > 6)
                     kind = 6;
                  break;
               case 58:
                  if (curChar == 10 && kind > 6)
                     kind = 6;
                  break;
               case 59:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 58;
                  break;
               case 60:
                  if (curChar == 42)
                     { jjCheckNAddTwoStates(61, 62); }
                  break;
               case 61:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(61, 62); }
                  break;
               case 62:
                  if (curChar == 42)
                     { jjCheckNAddStates(36, 38); }
                  break;
               case 63:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(64, 62); }
                  break;
               case 64:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(64, 62); }
                  break;
               case 65:
                  if (curChar == 47 && kind > 7)
                     kind = 7;
                  break;
               case 66:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 60;
                  break;
               case 67:
                  if (curChar == 42)
                     { jjCheckNAddTwoStates(68, 69); }
                  break;
               case 68:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(68, 69); }
                  break;
               case 69:
                  if (curChar == 42)
                     { jjCheckNAddStates(39, 41); }
                  break;
               case 70:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(71, 69); }
                  break;
               case 71:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(71, 69); }
                  break;
               case 72:
                  if (curChar == 47 && kind > 8)
                     kind = 8;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (kind > 135)
                     kind = 135;
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 85)
                        kind = 85;
                     { jjCheckNAdd(28); }
                  }
                  break;
               case 2:
                  if ((0x100000001000L & l) != 0L && kind > 77)
                     kind = 77;
                  break;
               case 5:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(42, 43); }
                  break;
               case 8:
                  if ((0x5000000050L & l) != 0L && kind > 81)
                     kind = 81;
                  break;
               case 10:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAdd(11); }
                  break;
               case 12:
                  if (curChar == 92)
                     { jjAddStates(44, 46); }
                  break;
               case 13:
                  if ((0x14404410000000L & l) != 0L)
                     { jjCheckNAdd(11); }
                  break;
               case 19:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(13, 15); }
                  break;
               case 20:
                  if (curChar == 92)
                     { jjAddStates(47, 49); }
                  break;
               case 21:
                  if ((0x14404410000000L & l) != 0L)
                     { jjCheckNAddStates(13, 15); }
                  break;
               case 27:
               case 28:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 85)
                     kind = 85;
                  { jjCheckNAdd(28); }
                  break;
               case 29:
                  if (kind > 135)
                     kind = 135;
                  break;
               case 31:
                  if (curChar == 123)
                     { jjCheckNAdd(32); }
                  break;
               case 32:
                  { jjCheckNAddTwoStates(32, 33); }
                  break;
               case 33:
                  if (curChar == 125)
                     jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 39:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(50, 51); }
                  break;
               case 43:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(52, 53); }
                  break;
               case 47:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(54, 55); }
                  break;
               case 51:
                  if ((0x100000001000000L & l) != 0L)
                     { jjCheckNAdd(52); }
                  break;
               case 52:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 77)
                     kind = 77;
                  { jjCheckNAddTwoStates(52, 2); }
                  break;
               case 56:
                  if (kind > 6)
                     kind = 6;
                  { jjAddStates(0, 2); }
                  break;
               case 61:
                  { jjCheckNAddTwoStates(61, 62); }
                  break;
               case 63:
               case 64:
                  { jjCheckNAddTwoStates(64, 62); }
                  break;
               case 68:
                  { jjCheckNAddTwoStates(68, 69); }
                  break;
               case 70:
               case 71:
                  { jjCheckNAddTwoStates(71, 69); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 85)
                        kind = 85;
                     { jjCheckNAdd(28); }
                  }
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 135)
                        kind = 135;
                  }
                  break;
               case 10:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 19:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(13, 15); }
                  break;
               case 27:
               case 28:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 85)
                     kind = 85;
                  { jjCheckNAdd(28); }
                  break;
               case 29:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 135)
                     kind = 135;
                  break;
               case 32:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(28, 29); }
                  break;
               case 56:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 6)
                     kind = 6;
                  { jjAddStates(0, 2); }
                  break;
               case 61:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(61, 62); }
                  break;
               case 63:
               case 64:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(64, 62); }
                  break;
               case 68:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(68, 69); }
                  break;
               case 70:
               case 71:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(71, 69); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 73 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   56, 57, 59, 36, 37, 42, 43, 46, 47, 8, 55, 66, 67, 19, 20, 22, 
   10, 12, 51, 53, 2, 4, 5, 8, 19, 20, 24, 22, 32, 33, 38, 39, 
   8, 46, 47, 8, 62, 63, 65, 69, 70, 72, 6, 7, 13, 14, 16, 21, 
   23, 25, 40, 41, 44, 45, 48, 49, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default :
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec4[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec5[i2] & l2) != 0L);
      case 49:
         return ((jjbitVec6[i2] & l2) != 0L);
      case 51:
         return ((jjbitVec7[i2] & l2) != 0L);
      case 61:
         return ((jjbitVec8[i2] & l2) != 0L);
      default :
         if ((jjbitVec3[i1] & l1) != 0L)
            return true;
         return false;
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, 
"\141\142\163\164\162\141\143\164", "\141\144\144", "\141\143\164\151\157\156", "\142\157\157\154\145\141\156", 
"\142\162\145\141\153", "\142\171\164\145", "\143\141\163\145", "\143\141\164\143\150", 
"\143\150\141\162", "\143\154\141\163\163", "\143\157\156\163\164", 
"\143\157\156\164\151\156\165\145", "\144\145\146\141\165\154\164", "\144\142\156\137\141\143\164\151\157\156", 
"\144\142\156\137\144\144\154", "\144\142\156\137\152\144\142\143\137\165\162\154", 
"\144\142\156\137\160\141", "\144\142\156\137\160\141\137\151\144\137\156\141\155\145", 
"\144\142\156\137\160\141\137\155\141\170\137\144\145\154\141\171", 
"\144\142\156\137\160\141\137\155\145\163\163\141\147\145\137\164\171\160\145\137\156\165\155", 
"\144\142\156\137\160\141\137\162\145\161\137\155\145\163\163\141\147\145\137\161\165\145\162\171", 
"\144\142\156\137\160\141\137\163\145\156\144\137\164\151\155\145\137\156\141\155\145", 
"\144\142\156\137\160\141\137\163\145\156\144\137\164\151\155\145\137\156\165\155", 
"\144\142\156\137\160\141\137\163\145\156\144\137\164\151\155\145\137\160\141\164\164\145\162\156", "\144\142\156\137\161\165\145\162\171", "\144\145\154", "\144\157", 
"\144\157\165\142\154\145", "\145\154\163\145", "\145\170\164\145\156\144\163", "\146\141\154\163\145", 
"\146\151\156\141\154", "\146\151\156\141\154\154\171", "\146\154\157\141\164", "\146\157\162", 
"\147\157\164\157", "\147\165\141\162\144", "\151\146", 
"\151\155\160\154\145\155\145\156\164\163", "\151\155\160\157\162\164", "\151\156\163\164\141\156\143\145\157\146", 
"\151\156\164", "\151\156\164\145\162\146\141\143\145", "\154\157\156\147", 
"\155\141\156\165\141\154", "\156\141\164\151\166\145", "\156\145\167", "\156\165\154\154", 
"\160\141\143\153\141\147\145", "\160\141\162\141\155\163", "\160\162\151\166\141\164\145", 
"\160\162\157\164\145\143\164\145\144", "\160\165\142\154\151\143", "\162\145\164\165\162\156", 
"\163\150\157\162\164", "\163\164\141\164\151\143", "\163\165\160\145\162", 
"\163\167\151\164\143\150", "\163\171\156\143\150\162\157\156\151\172\145\144", "\164\150\151\163", 
"\164\150\162\157\167", "\164\150\162\157\167\163", "\164\162\141\156\163\151\145\156\164", 
"\164\162\165\145", "\164\162\171", "\166\157\151\144", "\166\157\154\141\164\151\154\145", 
"\167\150\151\154\145", null, null, null, null, null, null, null, null, null, null, null, "\50", 
"\51", "\173", "\175", "\133", "\135", "\73", "\54", "\56", "\75", "\100", "\76", 
"\74", "\41", "\176", "\77", "\72", "\75\75", "\74\75", "\76\75", "\41\75", 
"\174\174", "\46\46", "\53\53", "\55\55", "\53", "\55", "\52", "\57", "\46", "\174", 
"\136", "\45", "\74\74", "\76\76", "\76\76\76", "\53\75", "\55\75", "\52\75", 
"\57\75", "\46\75", "\174\75", "\136\75", "\45\75", "\74\74\75", "\76\76\75", 
"\76\76\76\75", null, null, };
protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }

   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         matchedToken.specialToken = specialToken;
         return matchedToken;
      }
      else
      {
         if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
         {
            matchedToken = jjFillToken();
            if (specialToken == null)
               specialToken = matchedToken;
            else
            {
               matchedToken.specialToken = specialToken;
               specialToken = (specialToken.next = matchedToken);
            }
         }
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

    /** Constructor. */
    public JavaDBNetParserTokenManager(JavaCharStream stream){

      if (JavaCharStream.staticFlag)
            throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");

    input_stream = stream;
  }

  /** Constructor. */
  public JavaDBNetParserTokenManager (JavaCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  public void ReInit(JavaCharStream stream)
  {
    jjmatchedPos = jjnewStateCnt = 0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 73; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  public void ReInit(JavaCharStream stream, int lexState)
  {
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  public void SwitchTo(int lexState)
  {
    if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0xfffffffffffffe01L, 0xffffffffff3a3fffL, 0x1ffL, 
};
static final long[] jjtoSkip = {
   0x1feL, 0x0L, 0x0L, 
};
static final long[] jjtoSpecial = {
   0x1c0L, 0x0L, 0x0L, 
};
    protected JavaCharStream  input_stream;

    private final int[] jjrounds = new int[73];
    private final int[] jjstateSet = new int[2 * 73];

    
    protected char curChar;
}

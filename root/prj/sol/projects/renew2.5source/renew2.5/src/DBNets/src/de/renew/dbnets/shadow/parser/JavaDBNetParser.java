/* JavaDBNetParser.java */
/* Generated By:JavaCC: Do not edit this line. JavaDBNetParser.java */
package de.renew.dbnets.shadow.parser;

import de.renew.dbnets.datalogic.Action;
import de.renew.dbnets.datalogic.ActionCall;
import de.renew.dbnets.datalogic.EditedFact;
import de.renew.dbnets.datalogic.Query;
import de.renew.dbnets.datalogic.QueryCall;
import de.renew.dbnets.pa.PerformanceAnalysisInfo;
import de.renew.dbnets.persistence.DatabaseSchemaDeclaration;
import de.renew.dbnets.persistence.JdbcConnection;
import de.renew.dbnets.shadow.ParsedDBNetDeclarationNode;

import de.renew.expression.CallExpression;
import de.renew.expression.ConstantExpression;
import de.renew.expression.Function;
import de.renew.expression.LocalVariable;
import de.renew.expression.VariableExpression;

import de.renew.formalism.function.BasicFunction;
import de.renew.formalism.function.BasicUnaryFunction;
import de.renew.formalism.function.DynamicConstructorFunction;
import de.renew.formalism.function.InstanceofFunction;

import de.renew.formalism.java.ChannelInscription;
import de.renew.formalism.java.JavaHelper;
import de.renew.formalism.java.LiteralParser;
import de.renew.formalism.java.ParsedDeclarationNode;
import de.renew.formalism.java.ParsedImportDecl;
import de.renew.formalism.java.ParseException;
import de.renew.formalism.java.PrimaryPart;
import de.renew.formalism.java.TimedExpression;
import de.renew.formalism.java.Token;
import de.renew.formalism.java.TypedExpression;

import de.renew.net.DBNetTransition;
import de.renew.net.Net;
import de.renew.net.NetInstance;
import de.renew.net.NetNotFoundException;
import de.renew.net.Transition;
import de.renew.net.TransitionInscription;
import de.renew.net.UplinkInscription;
import de.renew.net.inscription.ActionInscription;
import de.renew.net.inscription.CreationInscription;
import de.renew.net.inscription.DownlinkInscription;
import de.renew.net.inscription.ExpressionInscription;
import de.renew.net.loading.NetLoader;

import de.renew.shadow.ShadowLookup;

import de.renew.unify.List;
import de.renew.unify.Tuple;
import de.renew.unify.Variable;

import de.renew.util.Types;
import de.renew.util.Value;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;
import java.util.HashMap;
import java.util.Map;
import java.util.Optional;
import java.util.Vector;
import java.util.function.Supplier;

// Please switch on or off this flag to suppress all "unused" warnings in this code.
// Default case is to suppress unused warnings, because the generator produces lots of unused code.
// when working on this class, turn the suppression off.
 @SuppressWarnings("unused")
public class JavaDBNetParser implements DBNetInscriptionParser, JavaDBNetParserConstants {
  public static org.apache.log4j.Logger logger = org.apache.log4j.Logger
                                                 .getLogger(JavaDBNetParser.class);
  ShadowLookup lookup=null;
  ParsedDBNetDeclarationNode decl = null;
  boolean inAction=false;
  NetLoader netLoader = null;
  public boolean refactoring = false;

  public void setLookup(ShadowLookup lookup) {
    this.lookup=lookup;
  }

  public void setNetLoader(NetLoader netLoader) {
    this.netLoader = netLoader;
  }

  public void setDeclarationNode(ParsedDeclarationNode decl) {
    this.decl = (ParsedDBNetDeclarationNode) decl;
  }

/*********************************
 * THE RENEW GRAMMAR STARTS HERE *
 *********************************/

// Thoroughly parse the declaration node.
  final public 
ParsedDBNetDeclarationNode DeclarationNode() throws ParseException {setDeclarationNode(new ParsedDBNetDeclarationNode());

  ParsedImportDecl importDecl;

  JdbcConnection jdbcConnection;
  DatabaseSchemaDeclaration databaseSchemaDeclaration;
  Query query;
  Action action;

  Token t;
    if (jj_2_1(3)) {
t=token;
     String ignoreMe;
      ignoreMe = PackageDeclaration();
logger.warn("Ignoring declaration of package " + ignoreMe);
    } else {
      ;
    }
    label_1:
    while (true) {
      if (jj_2_2(3)) {
        ;
      } else {
        break label_1;
      }
t=token;
      importDecl = ImportDeclaration();
decl.addImport(importDecl,t.next);
    }
    label_2:
    while (true) {
      if (jj_2_3(3)) {
        ;
      } else {
        break label_2;
      }
      VariableDeclaration();
    }
t = token;
    jdbcConnection = JdbcConnection();
decl.setJdbcConnection(jdbcConnection);
    databaseSchemaDeclaration = DatabaseSchemaDeclaration();
decl.setDatabaseSchemaDeclaration(databaseSchemaDeclaration);
    label_3:
    while (true) {
      if (jj_2_4(3)) {
        ;
      } else {
        break label_3;
      }
t = token;
      query = QueryDeclaration();
decl.addQuery(query);
    }
    label_4:
    while (true) {
      if (jj_2_5(3)) {
        ;
      } else {
        break label_4;
      }
t = token;
      action = ActionDeclaration();
decl.addAction(action);
    }
    jj_consume_token(0);
{if ("" != null) return decl;}
    throw new Error("Missing return statement in function");
  }

  final public String PackageDeclaration() throws ParseException {String name;
    jj_consume_token(PACKAGE);
    name = Name();
    jj_consume_token(SEMICOLON);
{if ("" != null) return name;}
    throw new Error("Missing return statement in function");
  }

  final public ParsedImportDecl ImportDeclaration() throws ParseException {String name;
  boolean star=false;
    jj_consume_token(IMPORT);
    name = Name();
    if (jj_2_6(3)) {
      jj_consume_token(DOT);
      jj_consume_token(STAR);
star=true;
    } else {
      ;
    }
    jj_consume_token(SEMICOLON);
{if ("" != null) return new ParsedImportDecl(name,star);}
    throw new Error("Missing return statement in function");
  }

  final public void VariableDeclaration() throws ParseException {Class<?> clazz;
    clazz = Type();
    VariableNamePart(clazz);
    label_5:
    while (true) {
      if (jj_2_7(3)) {
        ;
      } else {
        break label_5;
      }
      jj_consume_token(COMMA);
      VariableNamePart(clazz);
    }
    jj_consume_token(SEMICOLON);
  }

  final public void VariableNamePart(Class<?> clazz) throws ParseException {Token t;
    t = jj_consume_token(IDENTIFIER);
    label_6:
    while (true) {
      if (jj_2_8(3)) {
        ;
      } else {
        break label_6;
      }
      jj_consume_token(LBRACKET);
      jj_consume_token(RBRACKET);
clazz=JavaHelper.increaseArrayLevel(clazz,token);
    }
decl.addVariable(clazz,t.image,t);
  }

/**
 * A place inscription consists of one or more
 * <code>SinglePlaceInscription</code>s, separated
 * by semicolons.
 **/
  final public Collection<Object> PlaceInscription() throws ParseException {Object single;
  Collection<Object> inscriptions=new ArrayList<Object>();
    single = SinglePlaceInscription();
inscriptions.add(single);
    label_7:
    while (true) {
      if (jj_2_9(3)) {
        ;
      } else {
        break label_7;
      }
      jj_consume_token(SEMICOLON);
      if (jj_2_10(3)) {
        single = SinglePlaceInscription();
inscriptions.add(single);
      } else {
        ;
      }
    }
    jj_consume_token(0);
{if ("" != null) return inscriptions;}
    throw new Error("Missing return statement in function");
  }

/**
 * A single place inscription may be either a type, a
 * <code>PlaceBehaviourModifier</code> or an expression.
 *
 * A type can be in this case <UL>
 * <LI> an array type,        </LI>
 * <LI> a primitive type or   </LI>
 * <LI> a class name.         </LI></UL>
 *
 * @return a <code>Class</code>, <code>TypedExpression</code>
 *         or <code>PlaceBehaviourModifier</code> instance.
 **/
  final public Object SinglePlaceInscription() throws ParseException {Class<?> type;
  TypedExpression expr;
  Vector<PrimaryPart> vector;
  Object obj;
  Token errToken;
  QueryCall queryCall;
errToken=token;
    if (jj_2_11(2147483647)) {
      type = Type();
{if ("" != null) return type;}
    } else if (jj_2_12(3)) {
      type = PrimitiveType();
{if ("" != null) return type;}
    } else if (jj_2_13(2147483647)) {
      vector = PrimaryExpression();
// We have to check, if the inscription is a primary
      // expression which can be interpreted as a class name
      // or as a place behaviour modifier.
      StringBuffer name=new StringBuffer();
      boolean isName=true;
      for (int i=0;i<vector.size();i++) {
        PrimaryPart part=vector.elementAt(i);
        if (part.type!=PrimaryPart.NAME) {
          isName=false;
        } else {
          if (i>0) {
            name.append('.');
          }
          name.append((String)part.obj);
        }
      }

      String aName = name.toString();
// Currently, FIFO places are not supported, so that we
// need not support the special place modifiers.
//      if ("fifo".equals(aName)) {
//        return new PlaceBehaviourModifier(Place.FIFOPLACE);
//      }
//      if ("multiset".equals(aName)) {
//        return new PlaceBehaviourModifier(Place.MULTISETPLACE);
//      }
      if (isName) {
        try {
          obj=decl.interpreteName(aName);
          if (obj instanceof Class) {
            {if ("" != null) return obj;}
          }
        } catch (LinkageError e) {
          logger.warn("Encountered " + e, e);
          {if (true) throw JavaHelper.makeParseException("Class " + aName
                                              + " could not be loaded due to "
                                              + e.toString(), errToken);}
        }
      }

      {if ("" != null) return JavaHelper.makeExpression(vector,null,decl,errToken,refactoring);}
    } else if (jj_2_14(3)) {
      expr = Expression();
{if ("" != null) return expr;}
    } else if (jj_2_15(3)) {
      queryCall = QueryCall();
{if ("" != null) return queryCall;}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/**
 * Parses a complete transition inscription, which can possibly contain
 * multiple {@link #SingleTransitionInscription}s.  Those can be
 * separated by semicolon and terminate with EOF.
 *
 * @param transition the {@link Transition} where this
 *                   inscription is attached
 * @param create  if <false>, ignore creation inscriptions
 *                (they are parsed, but not evaluated)
 **/
  final public Collection<TransitionInscription> TransitionInscription(boolean create, Transition transition) throws ParseException {Collection<TransitionInscription> collection;
  Collection<TransitionInscription> inscriptions=new ArrayList<TransitionInscription>();
    collection = SingleTransitionInscription(create, transition);
inscriptions.addAll(collection);
    label_8:
    while (true) {
      if (jj_2_16(3)) {
        ;
      } else {
        break label_8;
      }
      jj_consume_token(SEMICOLON);
      if (jj_2_17(3)) {
        collection = SingleTransitionInscription(create, transition);
inscriptions.addAll(collection);
      } else {
        ;
      }
    }
    jj_consume_token(0);
{if ("" != null) return inscriptions;}
    throw new Error("Missing return statement in function");
  }

/**
 * A single transition inscription is either an uplink, an
 * instantiation expression, a downlink, a guard, an action
 * inscription or a manual inscription.
 *
 * @param transition the {@link Transition} where this
 *                   inscription is attached
 * @param create  if <false>, ignore creation inscriptions
 *                (they are parsed, but not evaluated)
 **/
  final public Collection<TransitionInscription> SingleTransitionInscription(boolean create, Transition transition) throws ParseException {TransitionInscription inscr;
  Collection<TransitionInscription> result;
    if (jj_2_18(3)) {
      inscr = UplinkInscription();
result=Collections.singleton(inscr);
    } else if (jj_2_19(2147483647)) {
      result = CreationInscription(create, transition);
    } else if (jj_2_20(2147483647)) {
      inscr = DownlinkInscription(transition);
result=Collections.singleton(inscr);
    } else if (jj_2_21(3)) {
      inscr = GuardInscription(transition);
result=Collections.singleton(inscr);
    } else if (jj_2_22(3)) {
      inscr = ActionInscription(transition);
result=Collections.singleton(inscr);
    } else if (jj_2_23(3)) {
      inscr = ManualInscription(transition);
result=Collections.singleton(inscr);
    } else if (jj_2_24(3)) {
      inscr = ActionCall();
((DBNetTransition) transition).setActionCall((ActionCall) inscr);
        result = Collections.singleton(inscr);
    } else if (jj_2_25(3)) {
      inscr = PerformanceAnalysisInfo();
((DBNetTransition) transition).setPerformanceAnalysisInfo((PerformanceAnalysisInfo) inscr);
        result = Collections.singleton(inscr);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return result;}
    throw new Error("Missing return statement in function");
  }

/**
   * Depending on given Tokens, this method returns an {@link UplinkInscription}, which is an {@link TransitionInscription}.
   * @return an {@link UplinkInscription}
   * @throws ParseException
   */
  final public TransitionInscription UplinkInscription() throws ParseException {Token t;
  Token colon, end;
  Vector<TypedExpression> args;
    colon = jj_consume_token(COLON);
    if (jj_2_26(3)) {
      t = jj_consume_token(IDENTIFIER);
    } else if (jj_2_27(3)) {
      t = jj_consume_token(NEW);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(LPAREN);
    args = ArgumentList();
    end = jj_consume_token(RPAREN);
UplinkInscription up = new UplinkInscription(t.image,
      JavaHelper.makeGuardedTupleExpression(args));
    if (refactoring) {
      up.uplinkBeginLine = colon.beginLine;
      up.uplinkBeginColumn = colon.beginColumn;
      up.uplinkEndLine = end.endLine;
      up.uplinkEndColumn = end.endColumn;

      up.nameBeginLine = t.beginLine;
      up.nameBeginColumn = t.beginColumn;
      up.nameEndLine = t.endLine;
      up.nameEndColumn = t.endColumn;
    }
    {if ("" != null) return up;}
    throw new Error("Missing return statement in function");
  }

/**
 * Parses a creation inscription <code> var:new netname(args) </code>.
 * The result is ignored, if <code>create</code>is false.
 *
 * @param create  determines whether the inscription should be transformed
 *                into parsed objects or not.
 * @param transition  the context of this inscription.
 * @return list with at most one element (the parsed inscription).
 **/
  final public Collection<TransitionInscription> CreationInscription(boolean create, Transition transition) throws ParseException {Token varT;
  Token netT;
  LocalVariable local;
  Class<?> type;
  TransitionInscription createInscr;
  TransitionInscription channelInscr;
  Vector<TypedExpression> args=null;
  Token errToken;
errToken=token;
    varT = jj_consume_token(IDENTIFIER);
Object loc;
    try {
      loc=decl.interpreteName(varT.image);
    } catch (LinkageError e) {
      logger.warn("Encountered " + e, e);
      {if (true) throw JavaHelper.makeParseException("Variable name expected, but "
                                          + varT.image
                                          + " is class with linkage problem: "
                                          + e.toString(), errToken);}
    }
    if (!(loc instanceof LocalVariable)) {
      {if (true) throw JavaHelper.makeParseException("Variable name expected: "
                                          + varT.image, errToken);}
    }
    local=(LocalVariable)loc;
    if (refactoring) {
      local.variableBeginLine = varT.beginLine;
      local.variableBeginColumn = varT.beginColumn;
      local.variableEndLine = varT.endLine;
      local.variableEndColumn = varT.endColumn;
    }

    type=decl.findType(local);
    if (type!=Types.UNTYPED &&
      !Types.allowsWideningConversion(de.renew.net.NetInstance.class,
        type))
    {
      {if (true) throw JavaHelper.makeParseException("Variable " + local.name
                                          + " must be assignable "
                                          + "from de.renew.net.NetInstance.",
                                          errToken);}
    }
    jj_consume_token(COLON);
    jj_consume_token(NEW);
errToken=token;
    netT = jj_consume_token(IDENTIFIER);
    if (jj_2_28(3)) {
      jj_consume_token(LPAREN);
      args = ArgumentList();
      jj_consume_token(RPAREN);
    } else {
      ;
    }
if (create) {
      Net net=lookup.getNet(netT.image);
      if (net==null) {
        if (netLoader == null) {
          {if (true) throw JavaHelper.makeParseException("Unknown net: "+netT.image,
                   errToken);}
        } else {
              try {
            net = netLoader.loadNet(netT.image);
          } catch (NetNotFoundException e) {
            Throwable ex = e.getCause();
            if (ex != null) {
               {if (true) throw JavaHelper.makeParseException("Could not load net "
                 +netT.image+": "+ex.toString(), errToken);}
            } else {
              {if (true) throw JavaHelper.makeParseException("Unknown net: "+netT.image,
                errToken);}
            }
          }
        }
      }
      createInscr=new CreationInscription(net,local, transition);
      if (args==null) {
        {if ("" != null) return Collections.singleton(createInscr);}
      } else {
        channelInscr=new DownlinkInscription("new",
          JavaHelper.makeGuardedTupleExpression(args),
          new VariableExpression(type,local),
          false, transition);
        {if ("" != null) return Arrays.asList(new TransitionInscription[]{createInscr,channelInscr});}
      }
    } else if (refactoring) { // return a creation inscription with a null net
      createInscr=new CreationInscription(null,local,transition);
      if (args==null) {
        {if ("" != null) return Collections.singleton(createInscr);}
      } else {
        channelInscr=new DownlinkInscription("new",
          JavaHelper.makeGuardedTupleExpression(args),
          new VariableExpression(type,local),
          false, transition);
        {if ("" != null) return Arrays.asList(new TransitionInscription[]{createInscr,channelInscr});}
      }
    } else {
      {if ("" != null) return Collections.emptySet();}
    }
    throw new Error("Missing return statement in function");
  }

  final public TransitionInscription DownlinkInscription(Transition transition) throws ParseException {TypedExpression callee;
  Token t;
  Token begin, end;
  Vector<TypedExpression> args;
  Token errToken;
errToken=token; begin=token.next;
    callee = Expression();
    jj_consume_token(COLON);
if (callee.isTyped() &&
      !Types.allowsWideningConversion(callee.getType(),NetInstance.class))
    {
      {if (true) throw JavaHelper.makeParseException(
        "Expression of net instance type expected.",errToken);}
    }
    if (jj_2_29(3)) {
      t = jj_consume_token(IDENTIFIER);
    } else if (jj_2_30(3)) {
      t = jj_consume_token(NEW);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(LPAREN);
    args = ArgumentList();
    end = jj_consume_token(RPAREN);
DownlinkInscription d = new DownlinkInscription(t.image,
      JavaHelper.makeGuardedTupleExpression(args),
      callee.getExpression(),
      false, transition);
        if (refactoring) {
      d.downlinkBeginLine = begin.beginLine;
      d.downlinkBeginColumn = begin.beginColumn;
      d.downlinkEndLine = end.endLine;
      d.downlinkEndColumn = end.endColumn;

      d.nameBeginLine = t.beginLine;
      d.nameBeginColumn = t.beginColumn;
      d.nameEndLine = t.endLine;
      d.nameEndColumn = t.endColumn;
    }
    {if ("" != null) return d;}
    throw new Error("Missing return statement in function");
  }

  final public TransitionInscription GuardInscription(Transition transition) throws ParseException {TypedExpression expr;
    jj_consume_token(GUARD);
    expr = Expression();
if (expr.isTyped()) {
      if (expr.getType()!=Boolean.TYPE) {
        {if (true) throw JavaHelper.makeParseException("Boolean expression expected.",token);}
      }
    }
    {if ("" != null) return new de.renew.net.inscription.GuardInscription(expr.getExpression());}
    throw new Error("Missing return statement in function");
  }

  final public TransitionInscription ManualInscription(Transition transition) throws ParseException {
    jj_consume_token(MANUAL);
{if ("" != null) return de.renew.net.ManualInscription.getInstance();}
    throw new Error("Missing return statement in function");
  }

  final public TransitionInscription ActionInscription(Transition transition) throws ParseException {boolean isAction=false;
  TypedExpression expr;
    if (jj_2_31(3)) {
      jj_consume_token(ACTION);
isAction=true;
    } else {
      ;
    }
inAction=isAction;
    expr = Expression();
if (isAction) {
      {if ("" != null) return new ActionInscription(expr.getExpression(), transition);}
    } else {
      {if ("" != null) return new ExpressionInscription(expr.getExpression());}
    }
    throw new Error("Missing return statement in function");
  }

  final public ChannelInscription tryParseChannelInscription() throws ParseException {boolean isUplink=true;
  Token t;
  Vector<?> args;
    if (jj_2_32(3)) {
      Expression();
isUplink=false;
    } else {
      ;
    }
    jj_consume_token(COLON);
    if (jj_2_33(3)) {
      t = jj_consume_token(IDENTIFIER);
    } else if (jj_2_34(3)) {
      t = jj_consume_token(NEW);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(LPAREN);
    args = ArgumentList();
    jj_consume_token(RPAREN);
    jj_consume_token(0);
{if ("" != null) return new ChannelInscription(isUplink,t.image,args.size());}
    throw new Error("Missing return statement in function");
  }

  final public Collection<TimedExpression> ArcInscription() throws ParseException {TimedExpression expr;
  Collection<TimedExpression> inscriptions=new ArrayList<TimedExpression>();
    expr = SingleArcInscription();
inscriptions.add(expr);
    label_9:
    while (true) {
      if (jj_2_35(3)) {
        ;
      } else {
        break label_9;
      }
      jj_consume_token(SEMICOLON);
      if (jj_2_36(3)) {
        expr = SingleArcInscription();
inscriptions.add(expr);
      } else {
        ;
      }
    }
    jj_consume_token(0);
{if ("" != null) return inscriptions;}
    throw new Error("Missing return statement in function");
  }

  final public TimedExpression SingleArcInscription() throws ParseException {TypedExpression expr;
  TypedExpression time=null;
    expr = Expression();
    if (jj_2_37(3)) {
      jj_consume_token(AT);
      time = Expression();
    } else {
      ;
    }
{if ("" != null) return new TimedExpression(expr,time);}
    throw new Error("Missing return statement in function");
  }

  final public TypedExpression VariableInscription() throws ParseException {Token t;
    t = jj_consume_token(IDENTIFIER);
    if (jj_2_38(3)) {
      jj_consume_token(SEMICOLON);
    } else {
      ;
    }
    jj_consume_token(0);
{if ("" != null) return JavaHelper.makeSinglePartExpression(
      new PrimaryPart(PrimaryPart.NAME,t.image,t),null,decl,refactoring);}
    throw new Error("Missing return statement in function");
  }

/*********************************
 * THE DB-NETS GRAMMAR STARTS HERE *
 *********************************/
  final public 
JdbcConnection JdbcConnection() throws ParseException {Token t;
  String jdbcUrl;
    t = jj_consume_token(DBN_JDBC_URL);
    jdbcUrl = MultilineString();
{if ("" != null) return new JdbcConnection(jdbcUrl);}
    throw new Error("Missing return statement in function");
  }

  final public DatabaseSchemaDeclaration DatabaseSchemaDeclaration() throws ParseException {Token t;
  String ddlQueryString;
    t = jj_consume_token(DBN_DDL);
    ddlQueryString = MultilineString();
{if ("" != null) return new DatabaseSchemaDeclaration(ddlQueryString);}
    throw new Error("Missing return statement in function");
  }

  final public Query QueryDeclaration() throws ParseException {Token t;
  String name;
  String queryString;
    t = jj_consume_token(DBN_QUERY);
    name = Name();
    queryString = MultilineString();
{if ("" != null) return new Query(name, queryString);}
    throw new Error("Missing return statement in function");
  }

  final public Action ActionDeclaration() throws ParseException {Token t;
  String name;
  java.util.List<String> params;
  Collection<EditedFact> addedFacts;
  Collection<EditedFact> deletedFacts;
    t = jj_consume_token(DBN_ACTION);
    name = Name();
    jj_consume_token(LBRACE);
    t = jj_consume_token(PARAMS);
    jj_consume_token(ASSIGN);
    params = ActionParams();
    if (jj_2_39(3)) {
      jj_consume_token(COMMA);
    } else {
      ;
    }
    t = jj_consume_token(ADD);
    jj_consume_token(ASSIGN);
    addedFacts = EditedFacts();
    if (jj_2_40(3)) {
      jj_consume_token(COMMA);
    } else {
      ;
    }
    t = jj_consume_token(DEL);
    jj_consume_token(ASSIGN);
    deletedFacts = EditedFacts();
    jj_consume_token(RBRACE);
{if ("" != null) return new Action(name, params, addedFacts, deletedFacts);}
    throw new Error("Missing return statement in function");
  }

  final public java.util.List<String> ActionParams() throws ParseException {String param;
  java.util.List<String> params = new ArrayList<String>();
    jj_consume_token(LT);
    if (jj_2_42(3)) {
      param = Name();
params.add(param);
      label_10:
      while (true) {
        if (jj_2_41(3)) {
          ;
        } else {
          break label_10;
        }
        jj_consume_token(COMMA);
        param = Name();
params.add(param);
      }
    } else {
      ;
    }
    jj_consume_token(GT);
{if ("" != null) return params;}
    throw new Error("Missing return statement in function");
  }

  final public Collection<EditedFact> EditedFacts() throws ParseException {EditedFact editedFact;
  Collection<EditedFact> editedFacts = new ArrayList<EditedFact>();
    jj_consume_token(LBRACE);
    if (jj_2_44(3)) {
      editedFact = EditedFact();
editedFacts.add(editedFact);
      label_11:
      while (true) {
        if (jj_2_43(3)) {
          ;
        } else {
          break label_11;
        }
        jj_consume_token(COMMA);
        editedFact = EditedFact();
editedFacts.add(editedFact);
      }
    } else {
      ;
    }
    jj_consume_token(RBRACE);
{if ("" != null) return editedFacts;}
    throw new Error("Missing return statement in function");
  }

  final public EditedFact EditedFact() throws ParseException {String relationName;
  String columnName;
  Object param;
  Map<String, Object> columnsToParams = new HashMap<String, Object>();
    relationName = Name();
    jj_consume_token(LPAREN);
    columnName = Name();
    jj_consume_token(COLON);
    if (jj_2_45(3)) {
      param = LiteralObject();
    } else if (jj_2_46(3)) {
      param = Name();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
columnsToParams.put(columnName, param);
    label_12:
    while (true) {
      if (jj_2_47(3)) {
        ;
      } else {
        break label_12;
      }
      jj_consume_token(COMMA);
      columnName = Name();
      jj_consume_token(COLON);
      if (jj_2_48(3)) {
        param = LiteralObject();
      } else if (jj_2_49(3)) {
        param = Name();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
columnsToParams.put(columnName, param);
    }
    jj_consume_token(RPAREN);
{if ("" != null) return new EditedFact(relationName, columnsToParams);}
    throw new Error("Missing return statement in function");
  }

  final public QueryCall QueryCall() throws ParseException {Token t;
  String queryName;
    t = jj_consume_token(DBN_QUERY);
    jj_consume_token(COLON);
    queryName = Name();
Optional<Query> query = Optional.ofNullable(((ParsedDBNetDeclarationNode) decl).getQueryByName(queryName));

    if (query.isPresent()) {
        {if ("" != null) return new QueryCall(query.get());}
    } else {
        {if (true) throw JavaHelper.makeParseException("No query with name " + queryName + " found", t);}
    }
    throw new Error("Missing return statement in function");
  }

  final public ActionCall ActionCall() throws ParseException {Token t;
  String actionName;
  Object param;
  java.util.List<Object> params = new ArrayList<Object>();
    t = jj_consume_token(DBN_ACTION);
    jj_consume_token(COLON);
    actionName = Name();
    jj_consume_token(LPAREN);
    if (jj_2_50(3)) {
      param = LiteralObject();
    } else if (jj_2_51(3)) {
      param = Name();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
params.add(param);
    label_13:
    while (true) {
      if (jj_2_52(3)) {
        ;
      } else {
        break label_13;
      }
      jj_consume_token(COMMA);
      if (jj_2_53(3)) {
        param = LiteralObject();
      } else if (jj_2_54(3)) {
        param = Name();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
params.add(param);
    }
    jj_consume_token(RPAREN);
Optional<Action> action = Optional.ofNullable(((ParsedDBNetDeclarationNode) decl).getActionByName(actionName));

    if (action.isPresent() && action.get().getParams().size() == params.size()) {
        {if ("" != null) return new ActionCall(action.get(), params);}
    } else {
        {if (true) throw JavaHelper.makeParseException("No action with name " + actionName + " found or params list size " +
         "was invalid", t);}
    }
    throw new Error("Missing return statement in function");
  }

  final public PerformanceAnalysisInfo PerformanceAnalysisInfo() throws ParseException {Token t;
  String idFieldName;
  String sendingTimeFieldName;
  int sendingTimeFieldNumber;
  String sendingTimePattern;
  int messageTypeFieldNumber;
  String requestMessageQueryName;
  int maxDelay;
    t = jj_consume_token(DBN_PA);
    jj_consume_token(COLON);
    jj_consume_token(LBRACE);
    jj_consume_token(DBN_PA_ID_NAME);
    jj_consume_token(COLON);
    idFieldName = Name();
    jj_consume_token(COMMA);
    jj_consume_token(DBN_PA_SEND_TIME_NAME);
    jj_consume_token(COLON);
    sendingTimeFieldName = Name();
    jj_consume_token(COMMA);
    jj_consume_token(DBN_PA_SEND_TIME_NUM);
    jj_consume_token(COLON);
    sendingTimeFieldNumber = IntegerLiteral();
    jj_consume_token(COMMA);
    jj_consume_token(DBN_PA_SEND_TIME_PATTERN);
    jj_consume_token(COLON);
    sendingTimePattern = StringLiteral();
    jj_consume_token(COMMA);
    jj_consume_token(DBN_PA_MESSAGE_TYPE_NUM);
    jj_consume_token(COLON);
    messageTypeFieldNumber = IntegerLiteral();
    jj_consume_token(COMMA);
    jj_consume_token(DBN_PA_REQ_MESSAGE_QUERY);
    jj_consume_token(COLON);
    requestMessageQueryName = Name();
    jj_consume_token(COMMA);
    jj_consume_token(DBN_PA_MAX_DELAY);
    jj_consume_token(COLON);
    maxDelay = IntegerLiteral();
    jj_consume_token(RBRACE);
Optional<Query> requestMessageQuery = Optional.ofNullable(
                ((ParsedDBNetDeclarationNode) decl).getQueryByName(requestMessageQueryName)
        );

        QueryCall requestMessageQueryCall;

        if (requestMessageQuery.isPresent()) {
            requestMessageQueryCall = new QueryCall(requestMessageQuery.get());
        } else {
            {if (true) throw JavaHelper.makeParseException("No query with name " + requestMessageQueryName + " found", t);}
        }

        {if ("" != null) return new PerformanceAnalysisInfo(
                idFieldName,
                sendingTimeFieldName,
                sendingTimeFieldNumber,
                sendingTimePattern,
                messageTypeFieldNumber,
                requestMessageQueryCall,
                maxDelay
        );}
    throw new Error("Missing return statement in function");
  }

  final public Integer IntegerLiteral() throws ParseException {Token t;
  String integerString;
    t = jj_consume_token(INTEGER_LITERAL);
integerString = t.image;
try {
          {if ("" != null) return Integer.parseInt(integerString);}
      } catch (NumberFormatException e) {
          {if (true) throw JavaHelper.makeParseException("Integer literal is not parsable", t);}
      }
    throw new Error("Missing return statement in function");
  }

  final public String StringLiteral() throws ParseException {Token t;
    t = jj_consume_token(STRING_LITERAL);
{if ("" != null) return LiteralParser.parseString(t.image);}
    throw new Error("Missing return statement in function");
  }

  final public Object LiteralObject() throws ParseException {TypedExpression typedExpression;
    typedExpression = Literal();
{if ("" != null) return new Variable(((ConstantExpression) typedExpression.getExpression()).getConstant(), null);}
    throw new Error("Missing return statement in function");
  }

  final public String MultilineString() throws ParseException {Token t;
  StringBuffer s=new StringBuffer();
    t = jj_consume_token(MULTILINE_STRING);
s.append(t.image);
    {if ("" != null) return s.toString().replace("<{", "").replace("}>", "");}
    throw new Error("Missing return statement in function");
  }

/********************************
 * THE JAVA GRAMMAR STARTS HERE *
 ********************************/

/*
 * Type, name and expression syntax follows.
 */
  final public 
Class<?> ClassType() throws ParseException {Token errToken;
  String name;
  Object obj;
errToken=token;
    name = Name();
try {
    obj=decl.interpreteName(name);
  } catch (LinkageError e) {
    logger.warn("Encountered " + e, e);
    {if (true) throw JavaHelper.makeParseException("Could not load class " + name
                                        + " due to "
                                        + e.toString(), errToken);}
  }
  if (!(obj instanceof Class)) {
    {if (true) throw JavaHelper.makeParseException("No such class: " + name + "", errToken);}
  }
  {if ("" != null) return (Class<?>)obj;}
    throw new Error("Missing return statement in function");
  }

/**
   * Depending on some Lookaheads the outcome of this method is either a {@link #PrimitiveType()} or
   * a {@link #ClassType()}. This method never returns an array type.
   * @return a Type which is different from an Array
   * @throws ParseException
   */
  final public Class<?> NonArrayType() throws ParseException {Class<?> clazz=null;
    if (jj_2_55(3)) {
      clazz = PrimitiveType();
    } else if (jj_2_56(3)) {
      clazz = ClassType();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return clazz;}
    throw new Error("Missing return statement in function");
  }

  final public Class<?> Type() throws ParseException {Class<?> clazz;
    clazz = NonArrayType();
    label_14:
    while (true) {
      if (jj_2_57(3)) {
        ;
      } else {
        break label_14;
      }
      jj_consume_token(LBRACKET);
      jj_consume_token(RBRACKET);
clazz=JavaHelper.increaseArrayLevel(clazz,token);
    }
{if ("" != null) return clazz;}
    throw new Error("Missing return statement in function");
  }

  final public Class<?> PrimitiveType() throws ParseException {Class<?> clazz;
    if (jj_2_58(3)) {
      jj_consume_token(BOOLEAN);
clazz=Boolean.TYPE;
    } else if (jj_2_59(3)) {
      jj_consume_token(CHAR);
clazz=Character.TYPE;
    } else if (jj_2_60(3)) {
      jj_consume_token(BYTE);
clazz=Byte.TYPE;
    } else if (jj_2_61(3)) {
      jj_consume_token(SHORT);
clazz=Short.TYPE;
    } else if (jj_2_62(3)) {
      jj_consume_token(INT);
clazz=Integer.TYPE;
    } else if (jj_2_63(3)) {
      jj_consume_token(LONG);
clazz=Long.TYPE;
    } else if (jj_2_64(3)) {
      jj_consume_token(FLOAT);
clazz=Float.TYPE;
    } else if (jj_2_65(3)) {
      jj_consume_token(DOUBLE);
clazz=Double.TYPE;
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return clazz;}
    throw new Error("Missing return statement in function");
  }

  final public String Name() throws ParseException {Token t;
  StringBuffer s=new StringBuffer();
    t = jj_consume_token(IDENTIFIER);
s.append(t.image);
    label_15:
    while (true) {
      if (jj_2_66(2)) {
        ;
      } else {
        break label_15;
      }
      jj_consume_token(DOT);
      t = jj_consume_token(IDENTIFIER);
s.append(""); s.append(t.image);
    }
{if ("" != null) return s.toString();}
    throw new Error("Missing return statement in function");
  }

/*
 * Expression syntax follows.
 */
/**
   * Returns a TypedExpression depending on some LookAhead Flags. It can either be a {@link #Assignment()} 
   * or a {@link #NonAssignmentExpression()}, which are both TypedExpressions
   */
  final public TypedExpression Expression() throws ParseException {TypedExpression expr;
    if (jj_2_67(2147483647)) {
      expr = Assignment();
{if ("" != null) return expr;}
    } else if (jj_2_68(3)) {
      expr = NonAssignmentExpression();
{if ("" != null) return expr;}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public TypedExpression Assignment() throws ParseException {Token errToken;
  Vector<PrimaryPart> vector;
  TypedExpression left;
  TypedExpression right;
    if (jj_2_69(2147483647)) {
      vector = PrimaryExpression();
errToken=token;
      jj_consume_token(ASSIGN);
      right = Expression();
if (inAction) {
      {if ("" != null) return JavaHelper.makeExpression(vector,right,decl,errToken.next,refactoring);}
    } else {
      {if ("" != null) return JavaHelper.makeEqualityAssertion(
        JavaHelper.makeExpression(vector,null,decl,errToken.next,refactoring),
        right,errToken);}
    }
    } else if (jj_2_70(3)) {
if (inAction) {
      {if (true) throw JavaHelper.makeParseException(
        "Invalid left hand side of assignment.",token);}
    }
      left = NonAssignmentExpression();
errToken=token;
      jj_consume_token(ASSIGN);
      right = Expression();
{if ("" != null) return JavaHelper.makeEqualityAssertion(left,right,errToken);}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public TypedExpression NonAssignmentExpression() throws ParseException {TypedExpression expr;
    // Currently, we forbid the operators "||" and "&&" completely.
      // They would behave just like "|" and "&", so we prefer to reserve
      // them for future use. Otherwise we would use
      // ConditionalOrExpression() in this place.
      expr = InclusiveOrExpression();
{if ("" != null) return expr;}
    throw new Error("Missing return statement in function");
  }

  final public TypedExpression ConditionalOrExpression() throws ParseException {Token t;
  TypedExpression expr;
  TypedExpression right;
    expr = ConditionalAndExpression();
    label_16:
    while (true) {
      if (jj_2_71(3)) {
        ;
      } else {
        break label_16;
      }
t=token;
      jj_consume_token(SC_OR);
      right = ConditionalAndExpression();
JavaHelper.ensureConvertability(Boolean.TYPE,expr,t);
      JavaHelper.ensureConvertability(Boolean.TYPE,right,t.next);
      expr=JavaHelper.makeBinary(expr,right,BasicFunction.LOR,t);
    }
{if ("" != null) return expr;}
    throw new Error("Missing return statement in function");
  }

  final public TypedExpression ConditionalAndExpression() throws ParseException {Token t;
  TypedExpression expr;
  TypedExpression right;
    expr = InclusiveOrExpression();
    label_17:
    while (true) {
      if (jj_2_72(3)) {
        ;
      } else {
        break label_17;
      }
t=token;
      jj_consume_token(SC_AND);
      right = InclusiveOrExpression();
JavaHelper.ensureConvertability(Boolean.TYPE,expr,t);
      JavaHelper.ensureConvertability(Boolean.TYPE,right,t.next);
      expr=JavaHelper.makeBinary(expr,right,BasicFunction.LAND,t);
    }
{if ("" != null) return expr;}
    throw new Error("Missing return statement in function");
  }

  final public TypedExpression InclusiveOrExpression() throws ParseException {Token t;
  TypedExpression expr;
  TypedExpression right;
    expr = ExclusiveOrExpression();
    label_18:
    while (true) {
      if (jj_2_73(3)) {
        ;
      } else {
        break label_18;
      }
t=token;
      jj_consume_token(BIT_OR);
      right = ExclusiveOrExpression();
JavaHelper.ensureEnumerateability(expr,t);
      JavaHelper.ensureEnumerateability(right,t.next);
      JavaHelper.ensureBinaryMatch(expr,right,t);

      expr=JavaHelper.makeBinary(expr,right,BasicFunction.OR,t);
    }
{if ("" != null) return expr;}
    throw new Error("Missing return statement in function");
  }

  final public TypedExpression ExclusiveOrExpression() throws ParseException {Token t;
  TypedExpression expr;
  TypedExpression right;
    expr = AndExpression();
    label_19:
    while (true) {
      if (jj_2_74(3)) {
        ;
      } else {
        break label_19;
      }
t=token;
      jj_consume_token(XOR);
      right = AndExpression();
JavaHelper.ensureEnumerateability(expr,t);
      JavaHelper.ensureEnumerateability(right,t.next);
      JavaHelper.ensureBinaryMatch(expr,right,t);

      expr=JavaHelper.makeBinary(expr,right,BasicFunction.XOR,t);
    }
{if ("" != null) return expr;}
    throw new Error("Missing return statement in function");
  }

  final public TypedExpression AndExpression() throws ParseException {Token t;
  TypedExpression expr;
  TypedExpression right;
    expr = EqualityExpression();
    label_20:
    while (true) {
      if (jj_2_75(3)) {
        ;
      } else {
        break label_20;
      }
t=token;
      jj_consume_token(BIT_AND);
      right = EqualityExpression();
JavaHelper.ensureEnumerateability(expr,t);
      JavaHelper.ensureEnumerateability(right,t.next);
      JavaHelper.ensureBinaryMatch(expr,right,t);

      expr=JavaHelper.makeBinary(expr,right,BasicFunction.AND,t);
    }
{if ("" != null) return expr;}
    throw new Error("Missing return statement in function");
  }

  final public TypedExpression EqualityExpression() throws ParseException {Token t;
  TypedExpression expr;
  TypedExpression right;
  Function fun;
    expr = InstanceOfExpression();
    label_21:
    while (true) {
      if (jj_2_76(3)) {
        ;
      } else {
        break label_21;
      }
t=token;
      if (jj_2_77(3)) {
        jj_consume_token(EQ);
fun=BasicFunction.EQUAL;
      } else if (jj_2_78(3)) {
        jj_consume_token(NE);
fun=BasicFunction.NEQUAL;
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      right = InstanceOfExpression();
JavaHelper.ensureBinaryMatch(expr,right,t);
      expr=JavaHelper.makeBooleanBinary(expr,right,fun);
    }
{if ("" != null) return expr;}
    throw new Error("Missing return statement in function");
  }

  final public TypedExpression InstanceOfExpression() throws ParseException {Token t;
  TypedExpression expr;
  Class<?> clazz;
t=token;
    expr = RelationalExpression();
    if (jj_2_79(3)) {
      jj_consume_token(INSTANCEOF);
      clazz = Type();
JavaHelper.ensureConvertability(Object.class,expr,t);
      expr=new TypedExpression(Boolean.TYPE,
        new CallExpression(Boolean.TYPE,expr.getExpression(),
          new InstanceofFunction(clazz,false,false)));
    } else {
      ;
    }
{if ("" != null) return expr;}
    throw new Error("Missing return statement in function");
  }

  final public TypedExpression RelationalExpression() throws ParseException {Token t;
  TypedExpression expr;
  TypedExpression right;
  Function fun;
    expr = ShiftExpression();
    label_22:
    while (true) {
      if (jj_2_80(3)) {
        ;
      } else {
        break label_22;
      }
t=token;
      if (jj_2_81(3)) {
        jj_consume_token(LT);
fun=BasicFunction.LESS;
      } else if (jj_2_82(3)) {
        jj_consume_token(GT);
fun=BasicFunction.GREATER;
      } else if (jj_2_83(3)) {
        jj_consume_token(LE);
fun=BasicFunction.LESSEQUAL;
      } else if (jj_2_84(3)) {
        jj_consume_token(GE);
fun=BasicFunction.GREATEREQUAL;
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      right = ShiftExpression();
JavaHelper.ensureConvertability(Double.TYPE,expr,t);
      JavaHelper.ensureConvertability(Double.TYPE,right,t.next);
      expr=JavaHelper.makeBooleanBinary(expr,right,fun);
    }
{if ("" != null) return expr;}
    throw new Error("Missing return statement in function");
  }

  final public TypedExpression ShiftExpression() throws ParseException {Token t;
  TypedExpression expr;
  TypedExpression right;
  Function fun;
    expr = AdditiveExpression();
    label_23:
    while (true) {
      if (jj_2_85(3)) {
        ;
      } else {
        break label_23;
      }
t=token;
      if (jj_2_86(3)) {
        jj_consume_token(LSHIFT);
fun=BasicFunction.SHL;
      } else if (jj_2_87(3)) {
        jj_consume_token(RSIGNEDSHIFT);
fun=BasicFunction.SHR;
      } else if (jj_2_88(3)) {
        jj_consume_token(RUNSIGNEDSHIFT);
fun=BasicFunction.SSHR;
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      right = AdditiveExpression();
JavaHelper.ensureConvertability(Long.TYPE,expr,t);
      JavaHelper.ensureConvertability(Long.TYPE,right,t.next);

      expr=JavaHelper.makeTypedBinary(expr,right,fun,
        JavaHelper.unaryIntegralPromotion(expr.getType(),t));
    }
{if ("" != null) return expr;}
    throw new Error("Missing return statement in function");
  }

  final public TypedExpression AdditiveExpression() throws ParseException {Token t;
  TypedExpression expr;
  TypedExpression right;
    expr = MultiplicativeExpression();
    label_24:
    while (true) {
      if (jj_2_89(3)) {
        ;
      } else {
        break label_24;
      }
      if (jj_2_90(3)) {
t=token;
        jj_consume_token(PLUS);
        right = MultiplicativeExpression();
if (expr.getType()==String.class || right.getType()==String.class) {
        expr=JavaHelper.makeTypedBinary(expr,right,
          BasicFunction.PLUS,String.class);
      } else {
        JavaHelper.ensureConvertability(Double.TYPE,expr,t);
        JavaHelper.ensureConvertability(Double.TYPE,right,t.next);
        expr=JavaHelper.makeBinary(expr,right,BasicFunction.PLUS,t);
      }
      } else if (jj_2_91(3)) {
t=token;
        jj_consume_token(MINUS);
        right = MultiplicativeExpression();
JavaHelper.ensureConvertability(Double.TYPE,expr,t);
      JavaHelper.ensureConvertability(Double.TYPE,right,t.next);
      expr=JavaHelper.makeBinary(expr,right,BasicFunction.MINUS,t);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
{if ("" != null) return expr;}
    throw new Error("Missing return statement in function");
  }

  final public TypedExpression MultiplicativeExpression() throws ParseException {Token t;
  TypedExpression expr;
  TypedExpression right;
  Function fun;
    expr = UnaryExpression();
    label_25:
    while (true) {
      if (jj_2_92(3)) {
        ;
      } else {
        break label_25;
      }
t=token;
      if (jj_2_93(3)) {
        jj_consume_token(STAR);
fun=BasicFunction.TIMES;
      } else if (jj_2_94(3)) {
        jj_consume_token(SLASH);
fun=BasicFunction.DIVIDE;
      } else if (jj_2_95(3)) {
        jj_consume_token(REM);
fun=BasicFunction.MOD;
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      right = UnaryExpression();
JavaHelper.ensureConvertability(Double.TYPE,expr,t);
      JavaHelper.ensureConvertability(Double.TYPE,right,t.next);
      expr=JavaHelper.makeBinary(expr,right,fun,t);
    }
{if ("" != null) return expr;}
    throw new Error("Missing return statement in function");
  }

  final public TypedExpression UnaryExpression() throws ParseException {Token t;
  TypedExpression expr;
  Function fun;
  Class<?> type;
    if (jj_2_98(3)) {
      t = jj_consume_token(BANG);
      expr = UnaryExpression();
JavaHelper.ensureConvertability(Boolean.TYPE,expr,t);

    {if ("" != null) return new TypedExpression(Boolean.TYPE,
      new CallExpression(Boolean.TYPE,expr.getExpression(),
        BasicUnaryFunction.LNOT));}
    } else if (jj_2_99(3)) {
      t = jj_consume_token(TILDE);
      expr = UnaryExpression();
type=JavaHelper.unaryIntegralPromotion(expr.getType(),t);
    {if ("" != null) return new TypedExpression(type,
      new CallExpression(type,expr.getExpression(),BasicUnaryFunction.NOT));}
    } else if (jj_2_100(3)) {
      if (jj_2_96(3)) {
        t = jj_consume_token(PLUS);
fun=BasicUnaryFunction.POS;
      } else if (jj_2_97(3)) {
        t = jj_consume_token(MINUS);
fun=BasicUnaryFunction.NEG;
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      expr = UnaryExpression();
type=JavaHelper.unaryNumericPromotion(expr.getType(),t);
    {if ("" != null) return new TypedExpression(type,
      new CallExpression(type,expr.getExpression(),fun));}
    } else if (jj_2_101(3)) {
      expr = SimpleUnaryExpression();
{if ("" != null) return expr;}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public TypedExpression SimpleUnaryExpression() throws ParseException {Vector<PrimaryPart> vector;
  TypedExpression expr;
    if (jj_2_102(2147483647)) {
      expr = CastExpression();
{if ("" != null) return expr;}
    } else if (jj_2_103(3)) {
      vector = PrimaryExpression();
{if ("" != null) return JavaHelper.makeExpression(vector,null,decl,null,refactoring);}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

// This production is to determine lookahead only.
// The LOOKAHEAD specifications below are not used,
// but they are there just to indicate that we know about this.
  final public void CastLookahead() throws ParseException {
    if (jj_2_110(2)) {
      jj_consume_token(LPAREN);
      PrimitiveType();
    } else if (jj_2_111(2147483647)) {
      jj_consume_token(LPAREN);
      Name();
      jj_consume_token(LBRACKET);
      jj_consume_token(RBRACKET);
    } else if (jj_2_112(3)) {
      jj_consume_token(LPAREN);
      Name();
      jj_consume_token(RPAREN);
      if (jj_2_104(3)) {
        jj_consume_token(LPAREN);
      } else if (jj_2_105(3)) {
        jj_consume_token(IDENTIFIER);
      } else if (jj_2_106(3)) {
        jj_consume_token(THIS);
      } else if (jj_2_107(3)) {
        jj_consume_token(SUPER);
      } else if (jj_2_108(3)) {
        jj_consume_token(NEW);
      } else if (jj_2_109(3)) {
        Literal();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public TypedExpression CastExpression() throws ParseException {Token errToken;
  Class<?> clazz;
  TypedExpression expr;
    if (jj_2_113(2147483647)) {
      jj_consume_token(LPAREN);
      clazz = PrimitiveType();
      jj_consume_token(RPAREN);
errToken=token;
      expr = UnaryExpression();
    } else if (jj_2_114(3)) {
      jj_consume_token(LPAREN);
      clazz = Type();
      jj_consume_token(RPAREN);
errToken=token;
      expr = SimpleUnaryExpression();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return JavaHelper.makeExplicitCastExpression(clazz,expr,errToken);}
    throw new Error("Missing return statement in function");
  }

/**
 * A primary expression can be many things like literals, constants, names,
 * or expressions with suffixes for array access or method call arguments.
 * More strictly, a primary expression consists of exactly one
 * {@link #PrimaryPrefix} followed by any number of {@link #PrimarySuffix}
 * parts.
 * All prefix and suffix constituents are parsed into a {@link Vector} of
 * individual {@link PrimaryPart}s.
 *
 * @return a {@link Vector} of {@link PrimaryPart}s
 * @throws ParseException
 * @see PrimaryPart
 **/
  final public Vector<PrimaryPart> PrimaryExpression() throws ParseException {PrimaryPart part;
  Vector<PrimaryPart> parts=new Vector<PrimaryPart>();
    part = PrimaryPrefix();
parts.addElement(part);
    label_26:
    while (true) {
      if (jj_2_115(3)) {
        ;
      } else {
        break label_26;
      }
      part = PrimarySuffix();
parts.addElement(part);
    }
{if ("" != null) return parts;}
    throw new Error("Missing return statement in function");
  }

/**
 * The prefix of a primary expression can be
 * <ul>
 * <li>a {@link #Literal},</li>
 * <li>a {@link #ClassType} ending in <code>.class</code>,</li>
 * <li>an {@link #IDENTIFIER},</li>
 * <li>the reserved variable <code>this</code>,</li>
 * <li>a nested {@link #Expression} in parentheses,</li>
 * <li>a tuple expression ({@link #ArgumentList} in brackets),</li>
 * <li>a list expression ({@link #ArgumentList} in curly braces with optional
 *     colon separating head and tail), or</li>
 * <li>an {@link #AllocationExpression}.</li>
 * </ul>
 * Depending on the current kind of prefix, an appropriate
 * {@link PrimaryPart} is created and returned.
 *
 * @return a PrimaryPart parsed from the current token
 * @throws ParseException
 * @see PrimaryPart
 **/
  final public PrimaryPart PrimaryPrefix() throws ParseException {Token t;
  Token thisToken;
  TypedExpression expr;
  Vector<TypedExpression> vector;
  boolean tailed=false;
  Token errToken;
  Class<?> clazz;
    if (jj_2_117(3)) {
errToken=token;
      expr = Literal();
{if ("" != null) return new PrimaryPart(PrimaryPart.EXPR,expr,errToken);}
    } else if (jj_2_118(2147483647)) {
errToken=token;
      clazz = ClassType();
      jj_consume_token(DOT);
      jj_consume_token(CLASS);
{if ("" != null) return new PrimaryPart(PrimaryPart.EXPR,
      new TypedExpression(Class.class,
        new ConstantExpression(Class.class,clazz)),errToken);}
    } else if (jj_2_119(3)) {
errToken=token;
      t = jj_consume_token(IDENTIFIER);
{if ("" != null) return new PrimaryPart(PrimaryPart.NAME,t.image,errToken);}
    } else if (jj_2_120(3)) {
errToken=token;
      thisToken = jj_consume_token(THIS);
LocalVariable thisVariable = new LocalVariable("this");
    if (refactoring) {
      thisVariable.variableBeginLine = thisToken.beginLine;
      thisVariable.variableBeginColumn = thisToken.beginColumn;
      thisVariable.variableEndLine = thisToken.endLine;
      thisVariable.variableEndColumn = thisToken.endColumn;
    }
    {if ("" != null) return new PrimaryPart(PrimaryPart.EXPR,
      new TypedExpression(
        de.renew.net.NetInstance.class,
          new VariableExpression(de.renew.net.NetInstance.class,
            thisVariable)),
      errToken);}
    } else if (jj_2_121(3)) {
errToken=token;
      jj_consume_token(LPAREN);
      expr = Expression();
      jj_consume_token(RPAREN);
{if ("" != null) return new PrimaryPart(PrimaryPart.EXPR,expr,errToken);}
    } else if (jj_2_122(3)) {
errToken=token;
      jj_consume_token(LBRACKET);
      vector = ArgumentList();
      jj_consume_token(RBRACKET);
{if ("" != null) return new PrimaryPart(PrimaryPart.EXPR,
      new TypedExpression(Tuple.class,
        JavaHelper.makeGuardedTupleExpression(vector)),
      errToken);}
    } else if (jj_2_123(3)) {
errToken=token;
      jj_consume_token(LBRACE);
      vector = ArgumentList();
      if (jj_2_116(3)) {
        jj_consume_token(COLON);
if (vector.isEmpty()) {
        {if (true) throw JavaHelper.makeParseException("Tailed lists must not be empty.",
          errToken.next);}
      }
        expr = Expression();
vector.addElement(expr);
      tailed=true;
      } else {
        ;
      }
      jj_consume_token(RBRACE);
{if ("" != null) return new PrimaryPart(PrimaryPart.EXPR,
      new TypedExpression(List.class,
        JavaHelper.makeListExpression(vector,tailed)),
      errToken);}
    } else if (jj_2_124(3)) {
errToken=token;
      expr = AllocationExpression();
{if ("" != null) return new PrimaryPart(PrimaryPart.EXPR,expr,errToken);}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/**
 * A primary expression can be suffixed by
 * array index expressions (in brackets),
 * more qualified name parts in dot notation, or
 * method call argument lists (in parentheses).
 * Depending on the current kind of suffix, an appropriate
 * {@link PrimaryPart} is created and returned.
 *
 * @return a {@link PrimaryPart} denoting the suffix represented by the
 *         current token.
 * @throws ParseException
 * @see PrimaryPart
 **/
  final public PrimaryPart PrimarySuffix() throws ParseException {Token t;
  TypedExpression expr;
  Vector<?> vector;
  Token errToken;
    if (jj_2_125(3)) {
errToken=token;
      jj_consume_token(LBRACKET);
      expr = Expression();
      jj_consume_token(RBRACKET);
{if ("" != null) return new PrimaryPart(PrimaryPart.ARRAY,expr,errToken);}
    } else if (jj_2_126(3)) {
errToken=token;
      jj_consume_token(DOT);
      t = jj_consume_token(IDENTIFIER);
{if ("" != null) return new PrimaryPart(PrimaryPart.NAME,t.image,errToken);}
    } else if (jj_2_127(3)) {
errToken=token;
      jj_consume_token(LPAREN);
      vector = ArgumentList();
      jj_consume_token(RPAREN);
{if ("" != null) return new PrimaryPart(PrimaryPart.CALL,vector,errToken);}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public TypedExpression Literal() throws ParseException {Token t;
  Object obj;
  String s;
  Class<?> type;
    if (jj_2_128(3)) {
      t = jj_consume_token(INTEGER_LITERAL);
s=t.image.toLowerCase();
      if (LiteralParser.denotesLong(s)) {
        obj=new Value(new Long(LiteralParser.parseLong(s)));
        type=Long.TYPE;
      } else {
        obj=new Value(new Integer(LiteralParser.parseInt(s)));
        type=Integer.TYPE;
      }
    } else if (jj_2_129(3)) {
      t = jj_consume_token(FLOATING_POINT_LITERAL);
s=t.image.toLowerCase();
      if (LiteralParser.denotesFloat(s)) {
        obj=new Value(LiteralParser.parseFloat(s));
        type=Float.TYPE;
      } else {
        obj=new Value(LiteralParser.parseDouble(s));
        type=Double.TYPE;
      }
    } else if (jj_2_130(3)) {
      t = jj_consume_token(CHARACTER_LITERAL);
obj=new Value(new Character(LiteralParser.parseChar(t.image)));
      type=Character.TYPE;
    } else if (jj_2_131(3)) {
      t = jj_consume_token(STRING_LITERAL);
obj=LiteralParser.parseString(t.image);
      type=String.class;
    } else if (jj_2_132(3)) {
      jj_consume_token(TRUE);
obj=new Value(Boolean.TRUE);
      type=Boolean.TYPE;
    } else if (jj_2_133(3)) {
      jj_consume_token(FALSE);
obj=new Value(Boolean.FALSE);
      type=Boolean.TYPE;
    } else if (jj_2_134(3)) {
      jj_consume_token(NULL);
obj=null;
      type=null;
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return new TypedExpression(type,
      new ConstantExpression(type,obj));}
    throw new Error("Missing return statement in function");
  }

/**
   * Returns a vector consisting of TypedExpressions.
   * @return a vector of {@link TypedExpression}
   * @throws ParseException
   */
  final public Vector<TypedExpression> ArgumentList() throws ParseException {Vector<TypedExpression> vector=new Vector<TypedExpression>();
  TypedExpression expr;
    if (jj_2_136(3)) {
      expr = Expression();
vector.addElement(expr);
      label_27:
      while (true) {
        if (jj_2_135(3)) {
          ;
        } else {
          break label_27;
        }
        jj_consume_token(COMMA);
        expr = Expression();
vector.addElement(expr);
      }
    } else {
      ;
    }
{if ("" != null) return vector;}
    throw new Error("Missing return statement in function");
  }

  final public TypedExpression AllocationExpression() throws ParseException {Token errToken;
  TypedExpression expr;
  Vector<TypedExpression> vector;
  Class<?> clazz;
    jj_consume_token(NEW);
    if (jj_2_137(2147483647)) {
      clazz = PrimitiveType();
      expr = ArrayDimensions(clazz);
{if ("" != null) return expr;}
    } else if (jj_2_138(2147483647)) {
      clazz = NonArrayType();
      expr = ArrayDimensions(clazz);
{if ("" != null) return expr;}
    } else if (jj_2_139(3)) {
errToken=token;
      clazz = NonArrayType();
      jj_consume_token(LPAREN);
      vector = ArgumentList();
      jj_consume_token(RPAREN);
{if ("" != null) return JavaHelper.makeConstructorExpression(clazz,vector,errToken);}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/*
 * The second LOOKAHEAD specification below is to parse to PrimarySuffix
 * if there is an expression between "[" and "]".
 */
  final public TypedExpression ArrayDimensions(Class<?> clazz) throws ParseException {Token t;
  Vector<TypedExpression> vector=new Vector<TypedExpression>();
  TypedExpression expr;
    label_28:
    while (true) {
      jj_consume_token(LBRACKET);
t=token;
      expr = Expression();
      jj_consume_token(RBRACKET);
// Make sure the result can be converted to an int.
      JavaHelper.ensureConvertability(Integer.TYPE,expr,t);
      // Store another expression in the vector.
      vector.addElement(expr);
      clazz=JavaHelper.increaseArrayLevel(clazz,token);
      if (jj_2_140(2)) {
        ;
      } else {
        break label_28;
      }
    }
    label_29:
    while (true) {
      if (jj_2_141(2)) {
        ;
      } else {
        break label_29;
      }
      jj_consume_token(LBRACKET);
      jj_consume_token(RBRACKET);
clazz=JavaHelper.increaseArrayLevel(clazz,token);
    }
Object[] result=new Object[vector.size()];
    vector.copyInto(result);
    {if ("" != null) return new TypedExpression(clazz,
      new CallExpression(clazz,
        JavaHelper.makeTupleExpression(vector),
        new DynamicConstructorFunction(clazz)));}
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_2_13(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  private boolean jj_2_14(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  private boolean jj_2_15(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  private boolean jj_2_16(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  private boolean jj_2_17(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  private boolean jj_2_18(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  private boolean jj_2_19(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  private boolean jj_2_20(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  private boolean jj_2_21(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  private boolean jj_2_22(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  private boolean jj_2_23(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  private boolean jj_2_24(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  private boolean jj_2_25(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  private boolean jj_2_26(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  private boolean jj_2_27(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  private boolean jj_2_28(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  private boolean jj_2_29(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  private boolean jj_2_30(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(29, xla); }
  }

  private boolean jj_2_31(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_31(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(30, xla); }
  }

  private boolean jj_2_32(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_32(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(31, xla); }
  }

  private boolean jj_2_33(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_33(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(32, xla); }
  }

  private boolean jj_2_34(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_34(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(33, xla); }
  }

  private boolean jj_2_35(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_35(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(34, xla); }
  }

  private boolean jj_2_36(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_36(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(35, xla); }
  }

  private boolean jj_2_37(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_37(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(36, xla); }
  }

  private boolean jj_2_38(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_38(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(37, xla); }
  }

  private boolean jj_2_39(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_39(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(38, xla); }
  }

  private boolean jj_2_40(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_40(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(39, xla); }
  }

  private boolean jj_2_41(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_41(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(40, xla); }
  }

  private boolean jj_2_42(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_42(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(41, xla); }
  }

  private boolean jj_2_43(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_43(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(42, xla); }
  }

  private boolean jj_2_44(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_44(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(43, xla); }
  }

  private boolean jj_2_45(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_45(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(44, xla); }
  }

  private boolean jj_2_46(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_46(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(45, xla); }
  }

  private boolean jj_2_47(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_47(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(46, xla); }
  }

  private boolean jj_2_48(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_48(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(47, xla); }
  }

  private boolean jj_2_49(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_49(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(48, xla); }
  }

  private boolean jj_2_50(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_50(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(49, xla); }
  }

  private boolean jj_2_51(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_51(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(50, xla); }
  }

  private boolean jj_2_52(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_52(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(51, xla); }
  }

  private boolean jj_2_53(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_53(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(52, xla); }
  }

  private boolean jj_2_54(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_54(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(53, xla); }
  }

  private boolean jj_2_55(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_55(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(54, xla); }
  }

  private boolean jj_2_56(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_56(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(55, xla); }
  }

  private boolean jj_2_57(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_57(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(56, xla); }
  }

  private boolean jj_2_58(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_58(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(57, xla); }
  }

  private boolean jj_2_59(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_59(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(58, xla); }
  }

  private boolean jj_2_60(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_60(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(59, xla); }
  }

  private boolean jj_2_61(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_61(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(60, xla); }
  }

  private boolean jj_2_62(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_62(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(61, xla); }
  }

  private boolean jj_2_63(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_63(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(62, xla); }
  }

  private boolean jj_2_64(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_64(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(63, xla); }
  }

  private boolean jj_2_65(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_65(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(64, xla); }
  }

  private boolean jj_2_66(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_66(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(65, xla); }
  }

  private boolean jj_2_67(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_67(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(66, xla); }
  }

  private boolean jj_2_68(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_68(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(67, xla); }
  }

  private boolean jj_2_69(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_69(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(68, xla); }
  }

  private boolean jj_2_70(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_70(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(69, xla); }
  }

  private boolean jj_2_71(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_71(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(70, xla); }
  }

  private boolean jj_2_72(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_72(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(71, xla); }
  }

  private boolean jj_2_73(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_73(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(72, xla); }
  }

  private boolean jj_2_74(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_74(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(73, xla); }
  }

  private boolean jj_2_75(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_75(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(74, xla); }
  }

  private boolean jj_2_76(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_76(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(75, xla); }
  }

  private boolean jj_2_77(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_77(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(76, xla); }
  }

  private boolean jj_2_78(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_78(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(77, xla); }
  }

  private boolean jj_2_79(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_79(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(78, xla); }
  }

  private boolean jj_2_80(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_80(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(79, xla); }
  }

  private boolean jj_2_81(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_81(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(80, xla); }
  }

  private boolean jj_2_82(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_82(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(81, xla); }
  }

  private boolean jj_2_83(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_83(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(82, xla); }
  }

  private boolean jj_2_84(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_84(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(83, xla); }
  }

  private boolean jj_2_85(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_85(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(84, xla); }
  }

  private boolean jj_2_86(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_86(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(85, xla); }
  }

  private boolean jj_2_87(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_87(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(86, xla); }
  }

  private boolean jj_2_88(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_88(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(87, xla); }
  }

  private boolean jj_2_89(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_89(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(88, xla); }
  }

  private boolean jj_2_90(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_90(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(89, xla); }
  }

  private boolean jj_2_91(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_91(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(90, xla); }
  }

  private boolean jj_2_92(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_92(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(91, xla); }
  }

  private boolean jj_2_93(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_93(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(92, xla); }
  }

  private boolean jj_2_94(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_94(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(93, xla); }
  }

  private boolean jj_2_95(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_95(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(94, xla); }
  }

  private boolean jj_2_96(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_96(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(95, xla); }
  }

  private boolean jj_2_97(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_97(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(96, xla); }
  }

  private boolean jj_2_98(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_98(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(97, xla); }
  }

  private boolean jj_2_99(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_99(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(98, xla); }
  }

  private boolean jj_2_100(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_100(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(99, xla); }
  }

  private boolean jj_2_101(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_101(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(100, xla); }
  }

  private boolean jj_2_102(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_102(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(101, xla); }
  }

  private boolean jj_2_103(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_103(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(102, xla); }
  }

  private boolean jj_2_104(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_104(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(103, xla); }
  }

  private boolean jj_2_105(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_105(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(104, xla); }
  }

  private boolean jj_2_106(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_106(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(105, xla); }
  }

  private boolean jj_2_107(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_107(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(106, xla); }
  }

  private boolean jj_2_108(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_108(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(107, xla); }
  }

  private boolean jj_2_109(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_109(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(108, xla); }
  }

  private boolean jj_2_110(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_110(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(109, xla); }
  }

  private boolean jj_2_111(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_111(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(110, xla); }
  }

  private boolean jj_2_112(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_112(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(111, xla); }
  }

  private boolean jj_2_113(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_113(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(112, xla); }
  }

  private boolean jj_2_114(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_114(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(113, xla); }
  }

  private boolean jj_2_115(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_115(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(114, xla); }
  }

  private boolean jj_2_116(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_116(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(115, xla); }
  }

  private boolean jj_2_117(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_117(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(116, xla); }
  }

  private boolean jj_2_118(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_118(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(117, xla); }
  }

  private boolean jj_2_119(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_119(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(118, xla); }
  }

  private boolean jj_2_120(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_120(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(119, xla); }
  }

  private boolean jj_2_121(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_121(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(120, xla); }
  }

  private boolean jj_2_122(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_122(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(121, xla); }
  }

  private boolean jj_2_123(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_123(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(122, xla); }
  }

  private boolean jj_2_124(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_124(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(123, xla); }
  }

  private boolean jj_2_125(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_125(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(124, xla); }
  }

  private boolean jj_2_126(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_126(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(125, xla); }
  }

  private boolean jj_2_127(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_127(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(126, xla); }
  }

  private boolean jj_2_128(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_128(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(127, xla); }
  }

  private boolean jj_2_129(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_129(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(128, xla); }
  }

  private boolean jj_2_130(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_130(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(129, xla); }
  }

  private boolean jj_2_131(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_131(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(130, xla); }
  }

  private boolean jj_2_132(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_132(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(131, xla); }
  }

  private boolean jj_2_133(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_133(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(132, xla); }
  }

  private boolean jj_2_134(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_134(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(133, xla); }
  }

  private boolean jj_2_135(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_135(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(134, xla); }
  }

  private boolean jj_2_136(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_136(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(135, xla); }
  }

  private boolean jj_2_137(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_137(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(136, xla); }
  }

  private boolean jj_2_138(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_138(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(137, xla); }
  }

  private boolean jj_2_139(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_139(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(138, xla); }
  }

  private boolean jj_2_140(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_140(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(139, xla); }
  }

  private boolean jj_2_141(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_141(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(140, xla); }
  }

  private boolean jj_3_80()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_81()) {
    jj_scanpos = xsp;
    if (jj_3_82()) {
    jj_scanpos = xsp;
    if (jj_3_83()) {
    jj_scanpos = xsp;
    if (jj_3_84()) return true;
    }
    }
    }
    if (jj_3R_64()) return true;
    return false;
  }

  private boolean jj_3R_80()
 {
    if (jj_3R_64()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_80()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_127()
 {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_50()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3_50()
 {
    if (jj_3R_54()) return true;
    return false;
  }

  private boolean jj_3_46()
 {
    if (jj_3R_52()) return true;
    return false;
  }

  private boolean jj_3_126()
 {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3_79()
 {
    if (jj_scan_token(INSTANCEOF)) return true;
    if (jj_3R_63()) return true;
    return false;
  }

  private boolean jj_3R_71()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_125()) {
    jj_scanpos = xsp;
    if (jj_3_126()) {
    jj_scanpos = xsp;
    if (jj_3_127()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_125()
 {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_41()) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3_54()
 {
    if (jj_3R_52()) return true;
    return false;
  }

  private boolean jj_3R_62()
 {
    if (jj_3R_80()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_79()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_49()
 {
    if (jj_scan_token(DBN_PA)) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_scan_token(LBRACE)) return true;
    return false;
  }

  private boolean jj_3_49()
 {
    if (jj_3R_52()) return true;
    return false;
  }

  private boolean jj_3R_87()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_scan_token(NEW)) return true;
    return false;
  }

  private boolean jj_3_78()
 {
    if (jj_scan_token(NE)) return true;
    return false;
  }

  private boolean jj_3_77()
 {
    if (jj_scan_token(EQ)) return true;
    return false;
  }

  private boolean jj_3_45()
 {
    if (jj_3R_54()) return true;
    return false;
  }

  private boolean jj_3_76()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_77()) {
    jj_scanpos = xsp;
    if (jj_3_78()) return true;
    }
    if (jj_3R_62()) return true;
    return false;
  }

  private boolean jj_3R_61()
 {
    if (jj_3R_62()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_76()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_27()
 {
    if (jj_scan_token(NEW)) return true;
    return false;
  }

  private boolean jj_3_53()
 {
    if (jj_3R_54()) return true;
    return false;
  }

  private boolean jj_3_124()
 {
    if (jj_3R_72()) return true;
    return false;
  }

  private boolean jj_3_52()
 {
    if (jj_scan_token(COMMA)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_53()) {
    jj_scanpos = xsp;
    if (jj_3_54()) return true;
    }
    return false;
  }

  private boolean jj_3R_48()
 {
    if (jj_scan_token(DBN_ACTION)) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_52()) return true;
    return false;
  }

  private boolean jj_3_48()
 {
    if (jj_3R_54()) return true;
    return false;
  }

  private boolean jj_3_75()
 {
    if (jj_scan_token(BIT_AND)) return true;
    if (jj_3R_61()) return true;
    return false;
  }

  private boolean jj_3_26()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_60()
 {
    if (jj_3R_61()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_75()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_116()
 {
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_41()) return true;
    return false;
  }

  private boolean jj_3_41()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_52()) return true;
    return false;
  }

  private boolean jj_3_123()
 {
    if (jj_scan_token(LBRACE)) return true;
    if (jj_3R_50()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_116()) jj_scanpos = xsp;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_44()
 {
    if (jj_scan_token(COLON)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_26()) {
    jj_scanpos = xsp;
    if (jj_3_27()) return true;
    }
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_42()
 {
    if (jj_scan_token(DBN_QUERY)) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_52()) return true;
    return false;
  }

  private boolean jj_3_74()
 {
    if (jj_scan_token(XOR)) return true;
    if (jj_3R_60()) return true;
    return false;
  }

  private boolean jj_3_47()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_52()) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3R_59()
 {
    if (jj_3R_60()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_74()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_122()
 {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_50()) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_53()
 {
    if (jj_3R_52()) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_52()) return true;
    return false;
  }

  private boolean jj_3_25()
 {
    if (jj_3R_49()) return true;
    return false;
  }

  private boolean jj_3_121()
 {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_41()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3_44()
 {
    if (jj_3R_53()) return true;
    return false;
  }

  private boolean jj_3_24()
 {
    if (jj_3R_48()) return true;
    return false;
  }

  private boolean jj_3_43()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_53()) return true;
    return false;
  }

  private boolean jj_3_73()
 {
    if (jj_scan_token(BIT_OR)) return true;
    if (jj_3R_59()) return true;
    return false;
  }

  private boolean jj_3_20()
 {
    if (jj_3R_41()) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3_23()
 {
    if (jj_3R_47()) return true;
    return false;
  }

  private boolean jj_3R_58()
 {
    if (jj_3R_59()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_73()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_19()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_scan_token(NEW)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3_22()
 {
    if (jj_3R_46()) return true;
    return false;
  }

  private boolean jj_3_21()
 {
    if (jj_3R_45()) return true;
    return false;
  }

  private boolean jj_3_42()
 {
    if (jj_3R_52()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_41()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_120()
 {
    if (jj_scan_token(THIS)) return true;
    return false;
  }

  private boolean jj_3R_79()
 {
    if (jj_3R_88()) return true;
    return false;
  }

  private boolean jj_3R_78()
 {
    if (jj_3R_87()) return true;
    return false;
  }

  private boolean jj_3_118()
 {
    if (jj_3R_52()) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(CLASS)) return true;
    return false;
  }

  private boolean jj_3_119()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3_18()
 {
    if (jj_3R_44()) return true;
    return false;
  }

  private boolean jj_3_72()
 {
    if (jj_scan_token(SC_AND)) return true;
    if (jj_3R_58()) return true;
    return false;
  }

  private boolean jj_3R_43()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_18()) {
    jj_scanpos = xsp;
    if (jj_3R_78()) {
    jj_scanpos = xsp;
    if (jj_3R_79()) {
    jj_scanpos = xsp;
    if (jj_3_21()) {
    jj_scanpos = xsp;
    if (jj_3_22()) {
    jj_scanpos = xsp;
    if (jj_3_23()) {
    jj_scanpos = xsp;
    if (jj_3_24()) {
    jj_scanpos = xsp;
    if (jj_3_25()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_57()
 {
    if (jj_3R_58()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_72()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_40()
 {
    if (jj_scan_token(COMMA)) return true;
    return false;
  }

  private boolean jj_3_39()
 {
    if (jj_scan_token(COMMA)) return true;
    return false;
  }

  private boolean jj_3R_85()
 {
    if (jj_3R_55()) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(CLASS)) return true;
    return false;
  }

  private boolean jj_3R_34()
 {
    if (jj_scan_token(DBN_ACTION)) return true;
    if (jj_3R_52()) return true;
    if (jj_scan_token(LBRACE)) return true;
    return false;
  }

  private boolean jj_3R_76()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_117()) {
    jj_scanpos = xsp;
    if (jj_3R_85()) {
    jj_scanpos = xsp;
    if (jj_3_119()) {
    jj_scanpos = xsp;
    if (jj_3_120()) {
    jj_scanpos = xsp;
    if (jj_3_121()) {
    jj_scanpos = xsp;
    if (jj_3_122()) {
    jj_scanpos = xsp;
    if (jj_3_123()) {
    jj_scanpos = xsp;
    if (jj_3_124()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_117()
 {
    if (jj_3R_70()) return true;
    return false;
  }

  private boolean jj_3_71()
 {
    if (jj_scan_token(SC_OR)) return true;
    if (jj_3R_57()) return true;
    return false;
  }

  private boolean jj_3_17()
 {
    if (jj_3R_43()) return true;
    return false;
  }

  private boolean jj_3_16()
 {
    if (jj_scan_token(SEMICOLON)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_17()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_33()
 {
    if (jj_scan_token(DBN_QUERY)) return true;
    if (jj_3R_52()) return true;
    if (jj_3R_73()) return true;
    return false;
  }

  private boolean jj_3R_56()
 {
    if (jj_3R_58()) return true;
    return false;
  }

  private boolean jj_3_109()
 {
    if (jj_3R_70()) return true;
    return false;
  }

  private boolean jj_3_115()
 {
    if (jj_3R_71()) return true;
    return false;
  }

  private boolean jj_3_15()
 {
    if (jj_3R_42()) return true;
    return false;
  }

  private boolean jj_3R_40()
 {
    if (jj_3R_76()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_115()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_38()
 {
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3_70()
 {
    if (jj_3R_56()) return true;
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_41()) return true;
    return false;
  }

  private boolean jj_3_69()
 {
    if (jj_3R_40()) return true;
    if (jj_scan_token(ASSIGN)) return true;
    return false;
  }

  private boolean jj_3_14()
 {
    if (jj_3R_41()) return true;
    return false;
  }

  private boolean jj_3_108()
 {
    if (jj_scan_token(NEW)) return true;
    return false;
  }

  private boolean jj_3R_91()
 {
    if (jj_3R_40()) return true;
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_41()) return true;
    return false;
  }

  private boolean jj_3R_86()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_91()) {
    jj_scanpos = xsp;
    if (jj_3_70()) return true;
    }
    return false;
  }

  private boolean jj_3_107()
 {
    if (jj_scan_token(SUPER)) return true;
    return false;
  }

  private boolean jj_3_67()
 {
    if (jj_3R_56()) return true;
    if (jj_scan_token(ASSIGN)) return true;
    return false;
  }

  private boolean jj_3_106()
 {
    if (jj_scan_token(THIS)) return true;
    return false;
  }

  private boolean jj_3_113()
 {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_39()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3_68()
 {
    if (jj_3R_56()) return true;
    return false;
  }

  private boolean jj_3_114()
 {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_63()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_68()) return true;
    return false;
  }

  private boolean jj_3_37()
 {
    if (jj_scan_token(AT)) return true;
    if (jj_3R_41()) return true;
    return false;
  }

  private boolean jj_3R_77()
 {
    if (jj_3R_86()) return true;
    return false;
  }

  private boolean jj_3R_41()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_77()) {
    jj_scanpos = xsp;
    if (jj_3_68()) return true;
    }
    return false;
  }

  private boolean jj_3R_38()
 {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_92()
 {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_39()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_67()) return true;
    return false;
  }

  private boolean jj_3R_51()
 {
    if (jj_3R_41()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_37()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_89()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_92()) {
    jj_scanpos = xsp;
    if (jj_3_114()) return true;
    }
    return false;
  }

  private boolean jj_3_105()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3_13()
 {
    if (jj_3R_40()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(94)) {
    jj_scanpos = xsp;
    if (jj_scan_token(0)) return true;
    }
    return false;
  }

  private boolean jj_3_111()
 {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_52()) return true;
    if (jj_scan_token(LBRACKET)) return true;
    return false;
  }

  private boolean jj_3_34()
 {
    if (jj_scan_token(NEW)) return true;
    return false;
  }

  private boolean jj_3_36()
 {
    if (jj_3R_51()) return true;
    return false;
  }

  private boolean jj_3_104()
 {
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3_11()
 {
    if (jj_3R_37()) return true;
    Token xsp;
    if (jj_3R_38()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_38()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_35()
 {
    if (jj_scan_token(SEMICOLON)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_36()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_112()
 {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_52()) return true;
    if (jj_scan_token(RPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_104()) {
    jj_scanpos = xsp;
    if (jj_3_105()) {
    jj_scanpos = xsp;
    if (jj_3_106()) {
    jj_scanpos = xsp;
    if (jj_3_107()) {
    jj_scanpos = xsp;
    if (jj_3_108()) {
    jj_scanpos = xsp;
    if (jj_3_109()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_66()
 {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_82()
 {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_52()) return true;
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_75()
 {
    if (jj_3R_40()) return true;
    return false;
  }

  private boolean jj_3R_52()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_66()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_69()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_110()) {
    jj_scanpos = xsp;
    if (jj_3R_82()) {
    jj_scanpos = xsp;
    if (jj_3_112()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_12()
 {
    if (jj_3R_39()) return true;
    return false;
  }

  private boolean jj_3_110()
 {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_39()) return true;
    return false;
  }

  private boolean jj_3R_74()
 {
    if (jj_3R_63()) return true;
    return false;
  }

  private boolean jj_3_33()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3_102()
 {
    if (jj_3R_69()) return true;
    return false;
  }

  private boolean jj_3R_36()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_74()) {
    jj_scanpos = xsp;
    if (jj_3_12()) {
    jj_scanpos = xsp;
    if (jj_3R_75()) {
    jj_scanpos = xsp;
    if (jj_3_14()) {
    jj_scanpos = xsp;
    if (jj_3_15()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_32()
 {
    if (jj_3R_41()) return true;
    return false;
  }

  private boolean jj_3_65()
 {
    if (jj_scan_token(DOUBLE)) return true;
    return false;
  }

  private boolean jj_3_103()
 {
    if (jj_3R_40()) return true;
    return false;
  }

  private boolean jj_3_64()
 {
    if (jj_scan_token(FLOAT)) return true;
    return false;
  }

  private boolean jj_3_141()
 {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_81()
 {
    if (jj_3R_89()) return true;
    return false;
  }

  private boolean jj_3R_68()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_81()) {
    jj_scanpos = xsp;
    if (jj_3_103()) return true;
    }
    return false;
  }

  private boolean jj_3_63()
 {
    if (jj_scan_token(LONG)) return true;
    return false;
  }

  private boolean jj_3_62()
 {
    if (jj_scan_token(INT)) return true;
    return false;
  }

  private boolean jj_3_61()
 {
    if (jj_scan_token(SHORT)) return true;
    return false;
  }

  private boolean jj_3_140()
 {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_41()) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3_60()
 {
    if (jj_scan_token(BYTE)) return true;
    return false;
  }

  private boolean jj_3_101()
 {
    if (jj_3R_68()) return true;
    return false;
  }

  private boolean jj_3R_90()
 {
    Token xsp;
    if (jj_3_140()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_140()) { jj_scanpos = xsp; break; }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_141()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_31()
 {
    if (jj_scan_token(ACTION)) return true;
    return false;
  }

  private boolean jj_3_59()
 {
    if (jj_scan_token(CHAR)) return true;
    return false;
  }

  private boolean jj_3R_46()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_31()) jj_scanpos = xsp;
    if (jj_3R_41()) return true;
    return false;
  }

  private boolean jj_3_58()
 {
    if (jj_scan_token(BOOLEAN)) return true;
    return false;
  }

  private boolean jj_3_10()
 {
    if (jj_3R_36()) return true;
    return false;
  }

  private boolean jj_3_97()
 {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  private boolean jj_3_96()
 {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  private boolean jj_3R_39()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_58()) {
    jj_scanpos = xsp;
    if (jj_3_59()) {
    jj_scanpos = xsp;
    if (jj_3_60()) {
    jj_scanpos = xsp;
    if (jj_3_61()) {
    jj_scanpos = xsp;
    if (jj_3_62()) {
    jj_scanpos = xsp;
    if (jj_3_63()) {
    jj_scanpos = xsp;
    if (jj_3_64()) {
    jj_scanpos = xsp;
    if (jj_3_65()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_100()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_96()) {
    jj_scanpos = xsp;
    if (jj_3_97()) return true;
    }
    if (jj_3R_67()) return true;
    return false;
  }

  private boolean jj_3_9()
 {
    if (jj_scan_token(SEMICOLON)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_10()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_138()
 {
    if (jj_3R_52()) return true;
    if (jj_scan_token(LBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_47()
 {
    if (jj_scan_token(MANUAL)) return true;
    return false;
  }

  private boolean jj_3_99()
 {
    if (jj_scan_token(TILDE)) return true;
    if (jj_3R_67()) return true;
    return false;
  }

  private boolean jj_3_57()
 {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3_137()
 {
    if (jj_3R_39()) return true;
    return false;
  }

  private boolean jj_3_139()
 {
    if (jj_3R_37()) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_50()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_63()
 {
    if (jj_3R_37()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_57()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_84()
 {
    if (jj_3R_37()) return true;
    if (jj_3R_90()) return true;
    return false;
  }

  private boolean jj_3R_67()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_98()) {
    jj_scanpos = xsp;
    if (jj_3_99()) {
    jj_scanpos = xsp;
    if (jj_3_100()) {
    jj_scanpos = xsp;
    if (jj_3_101()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3_98()
 {
    if (jj_scan_token(BANG)) return true;
    if (jj_3R_67()) return true;
    return false;
  }

  private boolean jj_3R_83()
 {
    if (jj_3R_39()) return true;
    if (jj_3R_90()) return true;
    return false;
  }

  private boolean jj_3_56()
 {
    if (jj_3R_55()) return true;
    return false;
  }

  private boolean jj_3R_45()
 {
    if (jj_scan_token(GUARD)) return true;
    if (jj_3R_41()) return true;
    return false;
  }

  private boolean jj_3_55()
 {
    if (jj_3R_39()) return true;
    return false;
  }

  private boolean jj_3R_72()
 {
    if (jj_scan_token(NEW)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_83()) {
    jj_scanpos = xsp;
    if (jj_3R_84()) {
    jj_scanpos = xsp;
    if (jj_3_139()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_6()
 {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(STAR)) return true;
    return false;
  }

  private boolean jj_3R_37()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_55()) {
    jj_scanpos = xsp;
    if (jj_3_56()) return true;
    }
    return false;
  }

  private boolean jj_3_8()
 {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_35()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_8()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_30()
 {
    if (jj_scan_token(NEW)) return true;
    return false;
  }

  private boolean jj_3_95()
 {
    if (jj_scan_token(REM)) return true;
    return false;
  }

  private boolean jj_3_94()
 {
    if (jj_scan_token(SLASH)) return true;
    return false;
  }

  private boolean jj_3_7()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_35()) return true;
    return false;
  }

  private boolean jj_3_93()
 {
    if (jj_scan_token(STAR)) return true;
    return false;
  }

  private boolean jj_3_92()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_93()) {
    jj_scanpos = xsp;
    if (jj_3_94()) {
    jj_scanpos = xsp;
    if (jj_3_95()) return true;
    }
    }
    if (jj_3R_67()) return true;
    return false;
  }

  private boolean jj_3_135()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_41()) return true;
    return false;
  }

  private boolean jj_3R_32()
 {
    if (jj_3R_63()) return true;
    if (jj_3R_35()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_7()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_66()
 {
    if (jj_3R_67()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_92()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_136()
 {
    if (jj_3R_41()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_135()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_50()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_136()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_31()
 {
    if (jj_scan_token(IMPORT)) return true;
    if (jj_3R_52()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_6()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3_29()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_55()
 {
    if (jj_3R_52()) return true;
    return false;
  }

  private boolean jj_3R_30()
 {
    if (jj_scan_token(PACKAGE)) return true;
    if (jj_3R_52()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3_91()
 {
    if (jj_scan_token(MINUS)) return true;
    if (jj_3R_66()) return true;
    return false;
  }

  private boolean jj_3R_88()
 {
    if (jj_3R_41()) return true;
    if (jj_scan_token(COLON)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_29()) {
    jj_scanpos = xsp;
    if (jj_3_30()) return true;
    }
    return false;
  }

  private boolean jj_3_134()
 {
    if (jj_scan_token(NULL)) return true;
    return false;
  }

  private boolean jj_3_5()
 {
    if (jj_3R_34()) return true;
    return false;
  }

  private boolean jj_3_89()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_90()) {
    jj_scanpos = xsp;
    if (jj_3_91()) return true;
    }
    return false;
  }

  private boolean jj_3_90()
 {
    if (jj_scan_token(PLUS)) return true;
    if (jj_3R_66()) return true;
    return false;
  }

  private boolean jj_3_133()
 {
    if (jj_scan_token(FALSE)) return true;
    return false;
  }

  private boolean jj_3_4()
 {
    if (jj_3R_33()) return true;
    return false;
  }

  private boolean jj_3R_65()
 {
    if (jj_3R_66()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_89()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_73()
 {
    if (jj_scan_token(MULTILINE_STRING)) return true;
    return false;
  }

  private boolean jj_3_132()
 {
    if (jj_scan_token(TRUE)) return true;
    return false;
  }

  private boolean jj_3_3()
 {
    if (jj_3R_32()) return true;
    return false;
  }

  private boolean jj_3_131()
 {
    if (jj_scan_token(STRING_LITERAL)) return true;
    return false;
  }

  private boolean jj_3_2()
 {
    if (jj_3R_31()) return true;
    return false;
  }

  private boolean jj_3R_54()
 {
    if (jj_3R_70()) return true;
    return false;
  }

  private boolean jj_3_130()
 {
    if (jj_scan_token(CHARACTER_LITERAL)) return true;
    return false;
  }

  private boolean jj_3_1()
 {
    if (jj_3R_30()) return true;
    return false;
  }

  private boolean jj_3_88()
 {
    if (jj_scan_token(RUNSIGNEDSHIFT)) return true;
    return false;
  }

  private boolean jj_3_87()
 {
    if (jj_scan_token(RSIGNEDSHIFT)) return true;
    return false;
  }

  private boolean jj_3_86()
 {
    if (jj_scan_token(LSHIFT)) return true;
    return false;
  }

  private boolean jj_3_85()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_86()) {
    jj_scanpos = xsp;
    if (jj_3_87()) {
    jj_scanpos = xsp;
    if (jj_3_88()) return true;
    }
    }
    if (jj_3R_65()) return true;
    return false;
  }

  private boolean jj_3R_64()
 {
    if (jj_3R_65()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_85()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_129()
 {
    if (jj_scan_token(FLOATING_POINT_LITERAL)) return true;
    return false;
  }

  private boolean jj_3_51()
 {
    if (jj_3R_52()) return true;
    return false;
  }

  private boolean jj_3_128()
 {
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    return false;
  }

  private boolean jj_3_84()
 {
    if (jj_scan_token(GE)) return true;
    return false;
  }

  private boolean jj_3R_70()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_128()) {
    jj_scanpos = xsp;
    if (jj_3_129()) {
    jj_scanpos = xsp;
    if (jj_3_130()) {
    jj_scanpos = xsp;
    if (jj_3_131()) {
    jj_scanpos = xsp;
    if (jj_3_132()) {
    jj_scanpos = xsp;
    if (jj_3_133()) {
    jj_scanpos = xsp;
    if (jj_3_134()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_83()
 {
    if (jj_scan_token(LE)) return true;
    return false;
  }

  private boolean jj_3_28()
 {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_50()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3_82()
 {
    if (jj_scan_token(GT)) return true;
    return false;
  }

  private boolean jj_3_81()
 {
    if (jj_scan_token(LT)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public JavaDBNetParserTokenManager token_source;
  JavaCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[0];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static private int[] jj_la1_4;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
      jj_la1_init_3();
      jj_la1_init_4();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {};
   }
   private static void jj_la1_init_3() {
      jj_la1_3 = new int[] {};
   }
   private static void jj_la1_init_4() {
      jj_la1_4 = new int[] {};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[141];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public JavaDBNetParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public JavaDBNetParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new JavaDBNetParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public JavaDBNetParser(java.io.Reader stream) {
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new JavaDBNetParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public JavaDBNetParser(JavaDBNetParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(JavaDBNetParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[137];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 0; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
          if ((jj_la1_4[i] & (1<<j)) != 0) {
            la1tokens[128+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 137; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 141; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
            case 27: jj_3_28(); break;
            case 28: jj_3_29(); break;
            case 29: jj_3_30(); break;
            case 30: jj_3_31(); break;
            case 31: jj_3_32(); break;
            case 32: jj_3_33(); break;
            case 33: jj_3_34(); break;
            case 34: jj_3_35(); break;
            case 35: jj_3_36(); break;
            case 36: jj_3_37(); break;
            case 37: jj_3_38(); break;
            case 38: jj_3_39(); break;
            case 39: jj_3_40(); break;
            case 40: jj_3_41(); break;
            case 41: jj_3_42(); break;
            case 42: jj_3_43(); break;
            case 43: jj_3_44(); break;
            case 44: jj_3_45(); break;
            case 45: jj_3_46(); break;
            case 46: jj_3_47(); break;
            case 47: jj_3_48(); break;
            case 48: jj_3_49(); break;
            case 49: jj_3_50(); break;
            case 50: jj_3_51(); break;
            case 51: jj_3_52(); break;
            case 52: jj_3_53(); break;
            case 53: jj_3_54(); break;
            case 54: jj_3_55(); break;
            case 55: jj_3_56(); break;
            case 56: jj_3_57(); break;
            case 57: jj_3_58(); break;
            case 58: jj_3_59(); break;
            case 59: jj_3_60(); break;
            case 60: jj_3_61(); break;
            case 61: jj_3_62(); break;
            case 62: jj_3_63(); break;
            case 63: jj_3_64(); break;
            case 64: jj_3_65(); break;
            case 65: jj_3_66(); break;
            case 66: jj_3_67(); break;
            case 67: jj_3_68(); break;
            case 68: jj_3_69(); break;
            case 69: jj_3_70(); break;
            case 70: jj_3_71(); break;
            case 71: jj_3_72(); break;
            case 72: jj_3_73(); break;
            case 73: jj_3_74(); break;
            case 74: jj_3_75(); break;
            case 75: jj_3_76(); break;
            case 76: jj_3_77(); break;
            case 77: jj_3_78(); break;
            case 78: jj_3_79(); break;
            case 79: jj_3_80(); break;
            case 80: jj_3_81(); break;
            case 81: jj_3_82(); break;
            case 82: jj_3_83(); break;
            case 83: jj_3_84(); break;
            case 84: jj_3_85(); break;
            case 85: jj_3_86(); break;
            case 86: jj_3_87(); break;
            case 87: jj_3_88(); break;
            case 88: jj_3_89(); break;
            case 89: jj_3_90(); break;
            case 90: jj_3_91(); break;
            case 91: jj_3_92(); break;
            case 92: jj_3_93(); break;
            case 93: jj_3_94(); break;
            case 94: jj_3_95(); break;
            case 95: jj_3_96(); break;
            case 96: jj_3_97(); break;
            case 97: jj_3_98(); break;
            case 98: jj_3_99(); break;
            case 99: jj_3_100(); break;
            case 100: jj_3_101(); break;
            case 101: jj_3_102(); break;
            case 102: jj_3_103(); break;
            case 103: jj_3_104(); break;
            case 104: jj_3_105(); break;
            case 105: jj_3_106(); break;
            case 106: jj_3_107(); break;
            case 107: jj_3_108(); break;
            case 108: jj_3_109(); break;
            case 109: jj_3_110(); break;
            case 110: jj_3_111(); break;
            case 111: jj_3_112(); break;
            case 112: jj_3_113(); break;
            case 113: jj_3_114(); break;
            case 114: jj_3_115(); break;
            case 115: jj_3_116(); break;
            case 116: jj_3_117(); break;
            case 117: jj_3_118(); break;
            case 118: jj_3_119(); break;
            case 119: jj_3_120(); break;
            case 120: jj_3_121(); break;
            case 121: jj_3_122(); break;
            case 122: jj_3_123(); break;
            case 123: jj_3_124(); break;
            case 124: jj_3_125(); break;
            case 125: jj_3_126(); break;
            case 126: jj_3_127(); break;
            case 127: jj_3_128(); break;
            case 128: jj_3_129(); break;
            case 129: jj_3_130(); break;
            case 130: jj_3_131(); break;
            case 131: jj_3_132(); break;
            case 132: jj_3_133(); break;
            case 133: jj_3_134(); break;
            case 134: jj_3_135(); break;
            case 135: jj_3_136(); break;
            case 136: jj_3_137(); break;
            case 137: jj_3_138(); break;
            case 138: jj_3_139(); break;
            case 139: jj_3_140(); break;
            case 140: jj_3_141(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}

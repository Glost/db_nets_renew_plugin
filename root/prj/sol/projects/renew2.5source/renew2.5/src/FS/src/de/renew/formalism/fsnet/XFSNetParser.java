/* XFSNetParser.java */
/* Generated By:JavaCC: Do not edit this line. XFSNetParser.java */
package de.renew.formalism.fsnet;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;
import java.util.NoSuchElementException;
import java.util.Vector;

import collections.HashedMap;
import collections.UpdatableMap;

import de.renew.expression.CallExpression;
import de.renew.expression.ConstantExpression;
import de.renew.expression.Expression;
import de.renew.expression.Function;
import de.renew.expression.LocalVariable;
import de.renew.expression.VariableExpression;

import de.renew.formalism.fs.FSFunction;
import de.renew.formalism.fs.FSInscriptionParser;
import de.renew.formalism.fs.FSUnifyExpression;
import de.renew.formalism.fs.ParsedFSDeclarationNode;
import de.renew.formalism.function.BasicFunction;
import de.renew.formalism.function.BasicUnaryFunction;
import de.renew.formalism.function.DynamicConstructorFunction;
import de.renew.formalism.function.InstanceofFunction;
import de.renew.formalism.java.ChannelInscription;
import de.renew.formalism.java.JavaHelper;
import de.renew.formalism.java.LiteralParser;
// We need an explicit override for the automatically generated
// classes, otherwise we get serious type errors.
import de.renew.formalism.java.ParseException;
import de.renew.formalism.java.Token;
import de.renew.formalism.java.ParsedDeclarationNode;
import de.renew.formalism.java.ParsedImportDecl;
import de.renew.formalism.java.PrimaryPart;
import de.renew.formalism.java.TimedExpression;
import de.renew.formalism.java.TypedExpression;

import de.renew.net.Net;
import de.renew.net.NetInstance;
import de.renew.net.NetNotFoundException;
import de.renew.net.Transition;
import de.renew.net.TransitionInscription;
import de.renew.net.UplinkInscription;
import de.renew.net.inscription.ActionInscription;
import de.renew.net.inscription.CreationInscription;
import de.renew.net.inscription.DownlinkInscription;
import de.renew.net.inscription.ExpressionInscription;
import de.renew.net.loading.NetLoader;

import de.renew.shadow.ShadowLookup;

import de.renew.unify.Impossible;
import de.renew.unify.Tuple;

import de.renew.util.Types;
import de.renew.util.Value;

import de.uni_hamburg.fs.BasicType;
import de.uni_hamburg.fs.Concept;
import de.uni_hamburg.fs.ConceptImpl;
import de.uni_hamburg.fs.ConceptSet;
import de.uni_hamburg.fs.ConjunctiveType;
import de.uni_hamburg.fs.EquivRelation;
import de.uni_hamburg.fs.FeatureStructure;
import de.uni_hamburg.fs.JavaClassType;
import de.uni_hamburg.fs.JavaObject;
import de.uni_hamburg.fs.JavaType;
import de.uni_hamburg.fs.ListType;
import de.uni_hamburg.fs.Name;
import de.uni_hamburg.fs.Node;
import de.uni_hamburg.fs.OrderedTable;
import de.uni_hamburg.fs.ParsedConjunctiveType;
import de.uni_hamburg.fs.ParsedListType;
import de.uni_hamburg.fs.ParsedType;
import de.uni_hamburg.fs.Path;
import de.uni_hamburg.fs.Type;
import de.uni_hamburg.fs.TypeException;
import de.uni_hamburg.fs.TypeSystem;
import de.uni_hamburg.fs.UnificationFailure;

//TODO: Please switch on or off this flag to suppress all "unused" warnings in this code. 
//Default case is to suppress unused warnings, because the generator produces lots of unused code.
// when working on this class, turn the suppression off.
 @SuppressWarnings("unused")
public class XFSNetParser implements FSInscriptionParser, XFSNetParserConstants {

  public static org.apache.log4j.Logger logger =
                                  org.apache.log4j.Logger.getLogger(XFSNetParser.class) ;

  ShadowLookup lookup=null;
  ParsedFSDeclarationNode decl=null;
  boolean inAction=false;
  NetLoader netLoader = null;

  public void setLookup(ShadowLookup lookup) {
    this.lookup=lookup;
  }

  public void setNetLoader(NetLoader netLoader) {
    this.netLoader = netLoader;
  }

  public void setDeclarationNode(ParsedDeclarationNode decl) {
    this.decl=(ParsedFSDeclarationNode)decl;
  }

/*********************************
 * THE RENEW GRAMMAR STARTS HERE *
 *********************************/

// Thoroughly parse the declaration node.
  final public 
ParsedDeclarationNode DeclarationNode() throws ParseException {setDeclarationNode(new ParsedFSDeclarationNode());

  ParsedImportDecl importDecl;
  String accessDecl;
  Token t;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case PACKAGE:{
t=token;
      accessDecl = PackageDeclaration();
logger.warn("Ignoring declaration of package " + accessDecl + " outside of FS ontology generation.");
      break;
      }
    default:
      jj_la1[0] = jj_gen;
      ;
    }
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ACCESS:{
        ;
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        break label_1;
      }
t=token;
      accessDecl = AccessDeclaration();
decl.addAccess(accessDecl,t.next);
    }
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IMPORT:{
        ;
        break;
        }
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
t=token;
      importDecl = ImportDeclaration();
decl.addImport(importDecl,t.next);
    }
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FLOAT:
      case INT:
      case LONG:
      case SHORT:
      case IDENTIFIER:{
        ;
        break;
        }
      default:
        jj_la1[3] = jj_gen;
        break label_3;
      }
      VariableDeclaration();
    }
    jj_consume_token(0);
{if ("" != null) return decl;}
    throw new Error("Missing return statement in function");
  }

  final public String PackageDeclaration() throws ParseException {String name;
    jj_consume_token(PACKAGE);
    name = Name();
    jj_consume_token(SEMICOLON);
{if ("" != null) return name;}
    throw new Error("Missing return statement in function");
  }

  final public ParsedImportDecl ImportDeclaration() throws ParseException {String name;
  boolean star=false;
    jj_consume_token(IMPORT);
    name = Name();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case DOT:{
      jj_consume_token(DOT);
      jj_consume_token(STAR);
star=true;
      break;
      }
    default:
      jj_la1[4] = jj_gen;
      ;
    }
    jj_consume_token(SEMICOLON);
{if ("" != null) return new ParsedImportDecl(name,star);}
    throw new Error("Missing return statement in function");
  }

  final public String AccessDeclaration() throws ParseException {String name;
    jj_consume_token(ACCESS);
    name = Name();
    jj_consume_token(SEMICOLON);
{if ("" != null) return name;}
    throw new Error("Missing return statement in function");
  }

  final public void VariableDeclaration() throws ParseException {Class<?> clazz;
  Token t;
  int arrayLevel=0;
    clazz = Type();
    VariableNamePart(clazz);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        ;
        break;
        }
      default:
        jj_la1[5] = jj_gen;
        break label_4;
      }
      jj_consume_token(COMMA);
      VariableNamePart(clazz);
    }
    jj_consume_token(SEMICOLON);
  }

  final public void VariableNamePart(Class<?> clazz) throws ParseException {Token t;
    t = jj_consume_token(IDENTIFIER);
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LBRACKET:{
        ;
        break;
        }
      default:
        jj_la1[6] = jj_gen;
        break label_5;
      }
      jj_consume_token(LBRACKET);
      jj_consume_token(RBRACKET);
clazz=JavaHelper.increaseArrayLevel(clazz,token);
    }
decl.addVariable(clazz,t.image,t);
  }

/**
 * A place inscription consists of one or more
 * <code>SinglePlaceInscription</code>s, separated
 * by semicolons.
 **/
  final public Collection<Object> PlaceInscription() throws ParseException {Object single;
  Collection<Object> inscriptions=new ArrayList<Object>();
    single = SinglePlaceInscription();
inscriptions.add(single);
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SEMICOLON:{
        ;
        break;
        }
      default:
        jj_la1[7] = jj_gen;
        break label_6;
      }
      jj_consume_token(SEMICOLON);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case FALSE:
      case NEW:
      case NULL:
      case THIS:
      case TRUE:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case TAGIDENT:
      case LPAREN:
      case LBRACKET:
      case LT:
      case BANG:
      case TILDE:
      case PLUS:
      case MINUS:{
        single = SinglePlaceInscription();
inscriptions.add(single);
        break;
        }
      default:
        jj_la1[8] = jj_gen;
        ;
      }
    }
    jj_consume_token(0);
{if ("" != null) return inscriptions;}
    throw new Error("Missing return statement in function");
  }

/**
 * A single place inscription is a instantiatable expression.
 *
 * @return a <code>TypedExpression</code> that calls the
 *         {@link InstantiateFunction} on the parsed expression.
 **/
  final public TypedExpression SinglePlaceInscription() throws ParseException {Class<?> type;
  TypedExpression expr;
  Vector<?> vector;
  Object obj;
    expr = Expression();
// wrap all Expressions with an InstantiateFunction:
      expr=new TypedExpression(expr.getType(),
                  new CallExpression(expr.getType(),expr.getExpression(),
                                     InstantiateFunction.INSTANCE));
      {if ("" != null) return expr;}
    throw new Error("Missing return statement in function");
  }

  final public Collection<TransitionInscription> TransitionInscription(boolean create, Transition transition) throws ParseException {Collection<TransitionInscription> subInscriptions;
  Collection<TransitionInscription> inscriptions=new ArrayList<TransitionInscription>();
    subInscriptions = SingleTransitionInscription(create, transition);
inscriptions.addAll(subInscriptions);
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SEMICOLON:{
        ;
        break;
        }
      default:
        jj_la1[9] = jj_gen;
        break label_7;
      }
      jj_consume_token(SEMICOLON);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ACTION:
      case FALSE:
      case GUARD:
      case MANUAL:
      case NEW:
      case NULL:
      case THIS:
      case TRUE:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case TAGIDENT:
      case LPAREN:
      case LBRACKET:
      case LT:
      case BANG:
      case TILDE:
      case COLON:
      case PLUS:
      case MINUS:{
        subInscriptions = SingleTransitionInscription(create, transition);
inscriptions.addAll(subInscriptions);
        break;
        }
      default:
        jj_la1[10] = jj_gen;
        ;
      }
    }
    jj_consume_token(0);
{if ("" != null) return inscriptions;}
    throw new Error("Missing return statement in function");
  }

  final public Collection<TransitionInscription> SingleTransitionInscription(boolean create, Transition transition) throws ParseException {TransitionInscription inscr;
  Collection<TransitionInscription> inscriptions;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case COLON:{
      inscr = UplinkInscription(transition);
inscriptions=Collections.singleton(inscr);
      break;
      }
    default:
      jj_la1[11] = jj_gen;
      if (jj_2_1(2147483647)) {
        inscriptions = CreationInscription(create, transition);
      } else if (jj_2_2(2147483647)) {
        inscr = DownlinkInscription(transition);
inscriptions=Collections.singleton(inscr);
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case GUARD:{
          inscr = GuardInscription(transition);
inscriptions=Collections.singleton(inscr);
          break;
          }
        case ACTION:
        case FALSE:
        case NEW:
        case NULL:
        case THIS:
        case TRUE:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:
        case TAGIDENT:
        case LPAREN:
        case LBRACKET:
        case LT:
        case BANG:
        case TILDE:
        case PLUS:
        case MINUS:{
          inscr = ActionInscription(transition);
inscriptions=Collections.singleton(inscr);
          break;
          }
        case MANUAL:{
          inscr = ManualInscription(transition);
inscriptions=Collections.singleton(inscr);
          break;
          }
        default:
          jj_la1[12] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
{if ("" != null) return inscriptions;}
    throw new Error("Missing return statement in function");
  }

  final public TransitionInscription UplinkInscription(Transition transition) throws ParseException {Token t;
  Vector<TypedExpression> args;
    jj_consume_token(COLON);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IDENTIFIER:{
      t = jj_consume_token(IDENTIFIER);
      break;
      }
    case NEW:{
      t = jj_consume_token(NEW);
      break;
      }
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(LPAREN);
    args = ArgumentList();
    jj_consume_token(RPAREN);
{if ("" != null) return new UplinkInscription(t.image,
      JavaHelper.makeGuardedTupleExpression(args));}
    throw new Error("Missing return statement in function");
  }

  final public Collection<TransitionInscription> CreationInscription(boolean create, Transition transition) throws ParseException {Token varT;
  Token netT;
  LocalVariable local;
  Class<?> type;
  TransitionInscription createInscr;
  TransitionInscription channelInscr;
  Vector<TypedExpression> args=null;
  Token errToken;
errToken=token;
    varT = jj_consume_token(IDENTIFIER);
Object loc;
    try {
      loc=decl.interpreteName(varT.image);
    } catch (LinkageError e) {
      logger.warn("Encountered " + e, e);
      {if (true) throw JavaHelper.makeParseException("Variable name expected, but "
                                          + varT.image
                                          + " is class with linkage problem: "
                                          + e.toString(), errToken);}
    }
    if (!(loc instanceof LocalVariable)) {
      {if (true) throw JavaHelper.makeParseException("Variable name expected: "
                                          + varT.image, errToken);}
    }
    local=(LocalVariable)loc;
    type=decl.findType(local);
    if (type!=Types.UNTYPED &&
      !Types.allowsWideningConversion(de.renew.net.NetInstance.class,
        type))
    {
      {if (true) throw JavaHelper.makeParseException("Variable " + local.name
                                          + " must be assignable "
                                          + "from de.renew.net.NetInstance.",
                                          errToken);}
    }
    jj_consume_token(COLON);
    jj_consume_token(NEW);
errToken=token;
    netT = jj_consume_token(IDENTIFIER);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LPAREN:{
      jj_consume_token(LPAREN);
      args = ArgumentList();
      jj_consume_token(RPAREN);
      break;
      }
    default:
      jj_la1[14] = jj_gen;
      ;
    }
if (create) {
      Net net=lookup.getNet(netT.image);
      if (net==null) {
        if (netLoader == null) {
          {if (true) throw JavaHelper.makeParseException("Unknown net: "+netT.image,
            errToken);}
        } else {
          try {
            net = netLoader.loadNet(netT.image);
          } catch (NetNotFoundException e) {
            Throwable ex = e.getCause();
            if (ex != null) {
              {if (true) throw JavaHelper.makeParseException("Could not load net "
                +netT.image+": "+ex.toString(), errToken);}
            } else {
              {if (true) throw JavaHelper.makeParseException("Unknown net: "+netT.image,
                errToken);}
            }
          }
        }
      }
      createInscr=new CreationInscription(net,local, transition);
      if (args==null) {
        {if ("" != null) return Collections.singleton(createInscr);}
      } else {
        channelInscr=new DownlinkInscription("new",
          JavaHelper.makeGuardedTupleExpression(args),
          new VariableExpression(type,local),
          false, transition);
        {if ("" != null) return Arrays.asList(new TransitionInscription[]{createInscr,channelInscr});}
      }
    } else {
      {if ("" != null) return Collections.emptySet();}
    }
    throw new Error("Missing return statement in function");
  }

  final public TransitionInscription DownlinkInscription(Transition transition) throws ParseException {TypedExpression callee;
  Token t;
  Vector<TypedExpression> args;
  Token errToken;
errToken=token;
    callee = Expression();
    jj_consume_token(COLON);
if (callee.isTyped() &&
      !Types.allowsWideningConversion(callee.getType(),NetInstance.class))
    {
      {if (true) throw JavaHelper.makeParseException(
        "Expression of net instance type expected.",errToken);}
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IDENTIFIER:{
      t = jj_consume_token(IDENTIFIER);
      break;
      }
    case NEW:{
      t = jj_consume_token(NEW);
      break;
      }
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(LPAREN);
    args = ArgumentList();
    jj_consume_token(RPAREN);
{if ("" != null) return new DownlinkInscription(t.image,
      JavaHelper.makeGuardedTupleExpression(args),
      callee.getExpression(),
      false, transition);}
    throw new Error("Missing return statement in function");
  }

  final public TransitionInscription GuardInscription(Transition transition) throws ParseException {TypedExpression expr;
    jj_consume_token(GUARD);
    expr = Expression();
if (expr.isTyped()) {
      if (expr.getType()!=Boolean.TYPE) {
        {if (true) throw JavaHelper.makeParseException("Boolean expression expected.",token);}
      }
    }
    {if ("" != null) return new de.renew.net.inscription.GuardInscription(expr.getExpression());}
    throw new Error("Missing return statement in function");
  }

  final public TransitionInscription ManualInscription(Transition transition) throws ParseException {
    jj_consume_token(MANUAL);
{if ("" != null) return de.renew.net.ManualInscription.getInstance();}
    throw new Error("Missing return statement in function");
  }

  final public TransitionInscription ActionInscription(Transition transition) throws ParseException {boolean isAction=false;
  TypedExpression expr;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ACTION:{
      jj_consume_token(ACTION);
isAction=true;
      break;
      }
    default:
      jj_la1[16] = jj_gen;
      ;
    }
inAction=isAction;
    expr = Expression();
if (isAction) {
      {if ("" != null) return new ActionInscription(expr.getExpression(), transition);}
    } else {
      {if ("" != null) return new ExpressionInscription(expr.getExpression());}
    }
    throw new Error("Missing return statement in function");
  }

  final public ChannelInscription tryParseChannelInscription() throws ParseException {boolean isUplink=true;
  Token t;
  Vector<TypedExpression> args;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case FALSE:
    case NEW:
    case NULL:
    case THIS:
    case TRUE:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
    case TAGIDENT:
    case LPAREN:
    case LBRACKET:
    case LT:
    case BANG:
    case TILDE:
    case PLUS:
    case MINUS:{
      Expression();
isUplink=false;
      break;
      }
    default:
      jj_la1[17] = jj_gen;
      ;
    }
    jj_consume_token(COLON);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IDENTIFIER:{
      t = jj_consume_token(IDENTIFIER);
      break;
      }
    case NEW:{
      t = jj_consume_token(NEW);
      break;
      }
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(LPAREN);
    args = ArgumentList();
    jj_consume_token(RPAREN);
    jj_consume_token(0);
{if ("" != null) return new ChannelInscription(isUplink,t.image,args.size());}
    throw new Error("Missing return statement in function");
  }

  final public Collection<TimedExpression> ArcInscription() throws ParseException {TimedExpression expr;
  Collection<TimedExpression> inscriptions=new ArrayList<TimedExpression>();
    expr = SingleArcInscription();
inscriptions.add(expr);
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SEMICOLON:{
        ;
        break;
        }
      default:
        jj_la1[19] = jj_gen;
        break label_8;
      }
      jj_consume_token(SEMICOLON);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case FALSE:
      case NEW:
      case NULL:
      case THIS:
      case TRUE:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case TAGIDENT:
      case LPAREN:
      case LBRACKET:
      case LT:
      case BANG:
      case TILDE:
      case PLUS:
      case MINUS:{
        expr = SingleArcInscription();
inscriptions.add(expr);
        break;
        }
      default:
        jj_la1[20] = jj_gen;
        ;
      }
    }
    jj_consume_token(0);
{if ("" != null) return inscriptions;}
    throw new Error("Missing return statement in function");
  }

  final public TimedExpression SingleArcInscription() throws ParseException {TypedExpression expr;
    expr = Expression();
{if ("" != null) return new TimedExpression(expr,null);}
    throw new Error("Missing return statement in function");
  }

  final public TypedExpression VariableInscription() throws ParseException {Token t;
    t = jj_consume_token(IDENTIFIER);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case SEMICOLON:{
      jj_consume_token(SEMICOLON);
      break;
      }
    default:
      jj_la1[21] = jj_gen;
      ;
    }
    jj_consume_token(0);
{if ("" != null) return JavaHelper.makeSinglePartExpression(
      new PrimaryPart(PrimaryPart.NAME,t.image,t),null,decl);}
    throw new Error("Missing return statement in function");
  }

/********************************
 * THE JAVA GRAMMAR STARTS HERE *
 ********************************/

/*
 * Type, name and expression syntax follows.
 */
  final public 
Class<?> ClassType() throws ParseException {Token errToken;
  Class<?> clazz=null;
  String name;
  Object obj;
errToken=token;
    name = Name();
if (decl!=null) {
      try {
        obj=decl.interpreteName(name);
      } catch (LinkageError e) {
        logger.warn("Encountered " + e, e);
        {if (true) throw JavaHelper.makeParseException("Could not load class " + name
                                            + " due to "
                                            + e.toString(), errToken);}
      }
      if (!(obj instanceof Class)) {
        {if (true) throw JavaHelper.makeParseException("No such class: " + name + ".",errToken);}
      }
      {if ("" != null) return (Class<?>)obj;}
    } else {
        {if ("" != null) return Object.class;}
    }
    throw new Error("Missing return statement in function");
  }

  final public Class<?> NonArrayType() throws ParseException {Class<?> clazz=null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FLOAT:
    case INT:
    case LONG:
    case SHORT:{
      clazz = PrimitiveType();
      break;
      }
    case IDENTIFIER:{
      clazz = ClassType();
      break;
      }
    default:
      jj_la1[22] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return clazz;}
    throw new Error("Missing return statement in function");
  }

  final public Class<?> Type() throws ParseException {Class<?> clazz;
  String name;
    clazz = NonArrayType();
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LBRACKET:{
        ;
        break;
        }
      default:
        jj_la1[23] = jj_gen;
        break label_9;
      }
      jj_consume_token(LBRACKET);
      jj_consume_token(RBRACKET);
clazz=JavaHelper.increaseArrayLevel(clazz,token);
    }
{if ("" != null) return clazz;}
    throw new Error("Missing return statement in function");
  }

  final public Class<?> PrimitiveType() throws ParseException {Token t;
  Class<?> clazz;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case BOOLEAN:{
      t = jj_consume_token(BOOLEAN);
clazz=Boolean.TYPE;
      break;
      }
    case CHAR:{
      t = jj_consume_token(CHAR);
clazz=Character.TYPE;
      break;
      }
    case BYTE:{
      t = jj_consume_token(BYTE);
clazz=Byte.TYPE;
      break;
      }
    case SHORT:{
      t = jj_consume_token(SHORT);
clazz=Short.TYPE;
      break;
      }
    case INT:{
      t = jj_consume_token(INT);
clazz=Integer.TYPE;
      break;
      }
    case LONG:{
      t = jj_consume_token(LONG);
clazz=Long.TYPE;
      break;
      }
    case FLOAT:{
      t = jj_consume_token(FLOAT);
clazz=Float.TYPE;
      break;
      }
    case DOUBLE:{
      t = jj_consume_token(DOUBLE);
clazz=Double.TYPE;
      break;
      }
    default:
      jj_la1[24] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return clazz;}
    throw new Error("Missing return statement in function");
  }

  final public String Name() throws ParseException {Token t;
  StringBuffer s=new StringBuffer();
    t = jj_consume_token(IDENTIFIER);
s.append(t.image);
    label_10:
    while (true) {
      if (jj_2_3(2)) {
        ;
      } else {
        break label_10;
      }
      jj_consume_token(DOT);
      t = jj_consume_token(IDENTIFIER);
s.append("."); s.append(t.image);
    }
{if ("" != null) return s.toString();}
    throw new Error("Missing return statement in function");
  }

/*
 * Expression syntax follows.
 */
  final public 
TypedExpression Expression() throws ParseException {TypedExpression expr;
    if (jj_2_4(2147483647)) {
      expr = Assignment();
{if ("" != null) return expr;}
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case FALSE:
      case NEW:
      case NULL:
      case THIS:
      case TRUE:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case TAGIDENT:
      case LPAREN:
      case LBRACKET:
      case LT:
      case BANG:
      case TILDE:
      case PLUS:
      case MINUS:{
        expr = ConditionalOrExpression();
{if ("" != null) return expr;}
        break;
        }
      default:
        jj_la1[25] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public TypedExpression Assignment() throws ParseException {Token errToken;
  Vector<PrimaryPart> vector;
  TypedExpression left;
  TypedExpression right;
    if (jj_2_5(2147483647)) {
      vector = PrimaryExpression();
errToken=token;
      jj_consume_token(ASSIGN);
      right = Expression();
if (inAction) {
      {if ("" != null) return JavaHelper.makeExpression(vector,right,decl,errToken.next);}
    } else {
      {if ("" != null) return JavaHelper.makeEqualityAssertion(
        JavaHelper.makeExpression(vector,null,decl,errToken.next),
        right,errToken);}
    }
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case FALSE:
      case NEW:
      case NULL:
      case THIS:
      case TRUE:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case TAGIDENT:
      case LPAREN:
      case LBRACKET:
      case LT:
      case BANG:
      case TILDE:
      case PLUS:
      case MINUS:{
if (inAction) {
      {if (true) throw JavaHelper.makeParseException("Invalid left hand side of assignment.",
        token);}
    }
        left = ConditionalOrExpression();
errToken=token;
        jj_consume_token(ASSIGN);
        right = Expression();
{if ("" != null) return JavaHelper.makeEqualityAssertion(left,right,errToken);}
        break;
        }
      default:
        jj_la1[26] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public TypedExpression ConditionalOrExpression() throws ParseException {Token t;
  TypedExpression expr;
  TypedExpression right;
    expr = ConditionalAndExpression();
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SC_OR:{
        ;
        break;
        }
      default:
        jj_la1[27] = jj_gen;
        break label_11;
      }
t=token;
      jj_consume_token(SC_OR);
      right = ConditionalAndExpression();
JavaHelper.ensureConvertability(Boolean.TYPE,expr,t);
      JavaHelper.ensureConvertability(Boolean.TYPE,right,t.next);
      expr=JavaHelper.makeBinary(expr,right,BasicFunction.LOR,t);
    }
{if ("" != null) return expr;}
    throw new Error("Missing return statement in function");
  }

  final public TypedExpression ConditionalAndExpression() throws ParseException {Token t;
  TypedExpression expr;
  TypedExpression right;
    expr = InclusiveOrExpression();
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SC_AND:{
        ;
        break;
        }
      default:
        jj_la1[28] = jj_gen;
        break label_12;
      }
t=token;
      jj_consume_token(SC_AND);
      right = InclusiveOrExpression();
JavaHelper.ensureConvertability(Boolean.TYPE,expr,t);
      JavaHelper.ensureConvertability(Boolean.TYPE,right,t.next);
      expr=JavaHelper.makeBinary(expr,right,BasicFunction.LAND,t);
    }
{if ("" != null) return expr;}
    throw new Error("Missing return statement in function");
  }

  final public TypedExpression InclusiveOrExpression() throws ParseException {Token t;
  TypedExpression expr;
  TypedExpression right;
    expr = ExclusiveOrExpression();
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case BIT_OR:{
        ;
        break;
        }
      default:
        jj_la1[29] = jj_gen;
        break label_13;
      }
t=token;
      jj_consume_token(BIT_OR);
      right = ExclusiveOrExpression();
JavaHelper.ensureEnumerateability(expr,t);
      JavaHelper.ensureEnumerateability(right,t.next);
      JavaHelper.ensureBinaryMatch(expr,right,t);

      expr=JavaHelper.makeBinary(expr,right,BasicFunction.OR,t);
    }
{if ("" != null) return expr;}
    throw new Error("Missing return statement in function");
  }

  final public TypedExpression ExclusiveOrExpression() throws ParseException {Token t;
  TypedExpression expr;
  TypedExpression right;
    expr = AndExpression();
    label_14:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case XOR:{
        ;
        break;
        }
      default:
        jj_la1[30] = jj_gen;
        break label_14;
      }
t=token;
      jj_consume_token(XOR);
      right = AndExpression();
JavaHelper.ensureEnumerateability(expr,t);
      JavaHelper.ensureEnumerateability(right,t.next);
      JavaHelper.ensureBinaryMatch(expr,right,t);

      expr=JavaHelper.makeBinary(expr,right,BasicFunction.XOR,t);
    }
{if ("" != null) return expr;}
    throw new Error("Missing return statement in function");
  }

  final public TypedExpression AndExpression() throws ParseException {Token t;
  TypedExpression expr;
  TypedExpression right;
    expr = EqualityExpression();
    label_15:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case BIT_AND:{
        ;
        break;
        }
      default:
        jj_la1[31] = jj_gen;
        break label_15;
      }
t=token;
      jj_consume_token(BIT_AND);
      right = EqualityExpression();
JavaHelper.ensureEnumerateability(expr,t);
      JavaHelper.ensureEnumerateability(right,t.next);
      JavaHelper.ensureBinaryMatch(expr,right,t);

      expr=JavaHelper.makeBinary(expr,right,BasicFunction.AND,t);
    }
{if ("" != null) return expr;}
    throw new Error("Missing return statement in function");
  }

  final public TypedExpression EqualityExpression() throws ParseException {Token t;
  TypedExpression expr;
  TypedExpression right;
  Function fun;
    expr = InstanceOfExpression();
    label_16:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case EQ:
      case NE:{
        ;
        break;
        }
      default:
        jj_la1[32] = jj_gen;
        break label_16;
      }
t=token;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case EQ:{
        jj_consume_token(EQ);
fun=BasicFunction.EQUAL;
        break;
        }
      case NE:{
        jj_consume_token(NE);
fun=BasicFunction.NEQUAL;
        break;
        }
      default:
        jj_la1[33] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      right = InstanceOfExpression();
JavaHelper.ensureBinaryMatch(expr,right,t);
      expr=JavaHelper.makeBooleanBinary(expr,right,fun);
    }
{if ("" != null) return expr;}
    throw new Error("Missing return statement in function");
  }

  final public TypedExpression InstanceOfExpression() throws ParseException {Token t;
  TypedExpression expr;
  Class<?> clazz;
t=token;
    expr = RelationalExpression();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INSTANCEOF:{
      jj_consume_token(INSTANCEOF);
      clazz = Type();
JavaHelper.ensureConvertability(Object.class,expr,t);
      expr=new TypedExpression(Boolean.TYPE,
        new CallExpression(Boolean.TYPE,expr.getExpression(),
          new InstanceofFunction(clazz,false,false)));
      break;
      }
    default:
      jj_la1[34] = jj_gen;
      ;
    }
{if ("" != null) return expr;}
    throw new Error("Missing return statement in function");
  }

  final public TypedExpression RelationalExpression() throws ParseException {Token t;
  TypedExpression expr;
  TypedExpression right;
  Function fun;
    expr = ShiftExpression();
    label_17:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case GT:
      case LT:
      case LE:
      case GE:{
        ;
        break;
        }
      default:
        jj_la1[35] = jj_gen;
        break label_17;
      }
t=token;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LT:{
        jj_consume_token(LT);
fun=FSFunction.LESS;
        break;
        }
      case GT:{
        jj_consume_token(GT);
fun=FSFunction.GREATER;
        break;
        }
      case LE:{
        jj_consume_token(LE);
fun=FSFunction.LESSEQUAL;
        break;
        }
      case GE:{
        jj_consume_token(GE);
fun=FSFunction.GREATEREQUAL;
        break;
        }
      default:
        jj_la1[36] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      right = ShiftExpression();
if (expr.getType()==FeatureStructure.class || right.getType()==FeatureStructure.class) {
        JavaHelper.ensureConvertability(FeatureStructure.class,expr,t);
        JavaHelper.ensureConvertability(FeatureStructure.class,right,t.next);
      } else {
        JavaHelper.ensureConvertability(Double.TYPE,expr,t);
        JavaHelper.ensureConvertability(Double.TYPE,right,t.next);
      }
      expr=JavaHelper.makeBooleanBinary(expr,right,fun);
    }
{if ("" != null) return expr;}
    throw new Error("Missing return statement in function");
  }

  final public TypedExpression ShiftExpression() throws ParseException {Token t;
  TypedExpression expr;
  TypedExpression right;
  Function fun;
    expr = AdditiveExpression();
    label_18:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LSHIFT:
      case RSIGNEDSHIFT:
      case RUNSIGNEDSHIFT:{
        ;
        break;
        }
      default:
        jj_la1[37] = jj_gen;
        break label_18;
      }
t=token;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LSHIFT:{
        jj_consume_token(LSHIFT);
fun=BasicFunction.SHL;
        break;
        }
      case RSIGNEDSHIFT:{
        jj_consume_token(RSIGNEDSHIFT);
fun=BasicFunction.SHR;
        break;
        }
      case RUNSIGNEDSHIFT:{
        jj_consume_token(RUNSIGNEDSHIFT);
fun=BasicFunction.SSHR;
        break;
        }
      default:
        jj_la1[38] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      right = AdditiveExpression();
JavaHelper.ensureConvertability(Long.TYPE,expr,t);
      JavaHelper.ensureConvertability(Long.TYPE,right,t.next);

      expr=JavaHelper.makeTypedBinary(expr,right,fun,
        JavaHelper.unaryIntegralPromotion(expr.getType(),t));
    }
{if ("" != null) return expr;}
    throw new Error("Missing return statement in function");
  }

  final public TypedExpression AdditiveExpression() throws ParseException {Token t;
  TypedExpression expr;
  TypedExpression right;
    expr = MultiplicativeExpression();
    label_19:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PLUS:
      case MINUS:{
        ;
        break;
        }
      default:
        jj_la1[39] = jj_gen;
        break label_19;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PLUS:{
t=token;
        jj_consume_token(PLUS);
        right = MultiplicativeExpression();
if (expr.getType()==String.class || right.getType()==String.class) {
        expr=JavaHelper.makeTypedBinary(expr,right,
          BasicFunction.PLUS,String.class);
      } else {
        if (expr.getType()==FeatureStructure.class || right.getType()==FeatureStructure.class) {
          JavaHelper.ensureConvertability(FeatureStructure.class,expr,t);
          JavaHelper.ensureConvertability(FeatureStructure.class,right,t.next);
          expr=JavaHelper.makeTypedBinary(expr,right,FSFunction.PLUS,FeatureStructure.class);
        } else {
          // Check for numeric or untyped.
          // Untyped expression may result in FSs, but
          // this is ok for type checking.
          JavaHelper.ensureConvertability(Double.TYPE,expr,t);
          JavaHelper.ensureConvertability(Double.TYPE,right,t.next);
          expr=JavaHelper.makeBinary(expr,right,FSFunction.PLUS,t);
        }
      }
        break;
        }
      case MINUS:{
t=token;
        jj_consume_token(MINUS);
        right = MultiplicativeExpression();
JavaHelper.ensureConvertability(Double.TYPE,expr,t);
      JavaHelper.ensureConvertability(Double.TYPE,right,t.next);
      expr=JavaHelper.makeBinary(expr,right,BasicFunction.MINUS,t);
        break;
        }
      default:
        jj_la1[40] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
{if ("" != null) return expr;}
    throw new Error("Missing return statement in function");
  }

  final public TypedExpression MultiplicativeExpression() throws ParseException {Token t;
  TypedExpression expr;
  TypedExpression right;
  Function fun;
    expr = UnaryExpression();
    label_20:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case STAR:
      case SLASH:
      case REM:{
        ;
        break;
        }
      default:
        jj_la1[41] = jj_gen;
        break label_20;
      }
t=token;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case STAR:{
        jj_consume_token(STAR);
fun=BasicFunction.TIMES;
        break;
        }
      case SLASH:{
        jj_consume_token(SLASH);
fun=BasicFunction.DIVIDE;
        break;
        }
      case REM:{
        jj_consume_token(REM);
fun=BasicFunction.MOD;
        break;
        }
      default:
        jj_la1[42] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      right = UnaryExpression();
JavaHelper.ensureConvertability(Double.TYPE,expr,t);
      JavaHelper.ensureConvertability(Double.TYPE,right,t.next);
      expr=JavaHelper.makeBinary(expr,right,fun,t);
    }
{if ("" != null) return expr;}
    throw new Error("Missing return statement in function");
  }

  final public TypedExpression UnaryExpression() throws ParseException {Token t;
  TypedExpression expr;
  Function fun;
  Class<?> type;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case BANG:{
      t = jj_consume_token(BANG);
      expr = UnaryExpression();
JavaHelper.ensureConvertability(Boolean.TYPE,expr,t);

    {if ("" != null) return new TypedExpression(Boolean.TYPE,
      new CallExpression(Boolean.TYPE,expr.getExpression(),
        BasicUnaryFunction.LNOT));}
      break;
      }
    case TILDE:{
      t = jj_consume_token(TILDE);
      expr = UnaryExpression();
type=JavaHelper.unaryIntegralPromotion(expr.getType(),t);
    {if ("" != null) return new TypedExpression(type,
      new CallExpression(type,expr.getExpression(),BasicUnaryFunction.NOT));}
      break;
      }
    case PLUS:
    case MINUS:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PLUS:{
        t = jj_consume_token(PLUS);
fun=BasicUnaryFunction.POS;
        break;
        }
      case MINUS:{
        t = jj_consume_token(MINUS);
fun=BasicUnaryFunction.NEG;
        break;
        }
      default:
        jj_la1[43] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      expr = UnaryExpression();
type=JavaHelper.unaryNumericPromotion(expr.getType(),t);
    {if ("" != null) return new TypedExpression(type,
      new CallExpression(type,expr.getExpression(),fun));}
      break;
      }
    case FALSE:
    case NEW:
    case NULL:
    case THIS:
    case TRUE:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
    case TAGIDENT:
    case LPAREN:
    case LBRACKET:
    case LT:{
      expr = SimpleUnaryExpression();
{if ("" != null) return expr;}
      break;
      }
    default:
      jj_la1[44] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public TypedExpression SimpleUnaryExpression() throws ParseException {Vector<PrimaryPart> vector;
  TypedExpression expr;
    if (jj_2_6(2147483647)) {
      expr = CastExpression();
{if ("" != null) return expr;}
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case FALSE:
      case NEW:
      case NULL:
      case THIS:
      case TRUE:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case TAGIDENT:
      case LPAREN:
      case LBRACKET:
      case LT:{
        vector = PrimaryExpression();
{if ("" != null) return JavaHelper.makeExpression(vector,null,decl,null);}
        break;
        }
      default:
        jj_la1[45] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

// This production is to determine lookahead only.
// The LOOKAHEAD specifications below are not used,
// but they are there just to indicate that we know about this.
  final public void CastLookahead() throws ParseException {
    if (jj_2_7(2)) {
      jj_consume_token(LPAREN);
      PrimitiveType();
    } else if (jj_2_8(2147483647)) {
      jj_consume_token(LPAREN);
      Name();
      jj_consume_token(LBRACKET);
      jj_consume_token(RBRACKET);
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LPAREN:{
        jj_consume_token(LPAREN);
        Name();
        jj_consume_token(RPAREN);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case LPAREN:{
          jj_consume_token(LPAREN);
          break;
          }
        case IDENTIFIER:{
          jj_consume_token(IDENTIFIER);
          break;
          }
        case THIS:{
          jj_consume_token(THIS);
          break;
          }
        case SUPER:{
          jj_consume_token(SUPER);
          break;
          }
        case NEW:{
          jj_consume_token(NEW);
          break;
          }
        case FALSE:
        case NULL:
        case TRUE:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:{
          Literal();
          break;
          }
        default:
          jj_la1[46] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      default:
        jj_la1[47] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public TypedExpression CastExpression() throws ParseException {Token errToken;
  Class<?> clazz;
  TypedExpression expr;
    if (jj_2_9(2147483647)) {
      jj_consume_token(LPAREN);
      clazz = PrimitiveType();
      jj_consume_token(RPAREN);
errToken=token;
      expr = UnaryExpression();
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LPAREN:{
        jj_consume_token(LPAREN);
        clazz = Type();
        jj_consume_token(RPAREN);
errToken=token;
        expr = SimpleUnaryExpression();
        break;
        }
      default:
        jj_la1[48] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
{if ("" != null) return JavaHelper.makeExplicitCastExpression(clazz,expr,errToken);}
    throw new Error("Missing return statement in function");
  }

  final public Vector<PrimaryPart> PrimaryExpression() throws ParseException {Token t;
  PrimaryPart part;
  Vector<PrimaryPart> parts=new Vector<PrimaryPart>();
  Token errToken;
errToken=token;
    part = PrimaryPrefix();
parts.addElement(part);
    label_21:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LPAREN:
      case LBRACKET:
      case DOT:
      case AT:{
        ;
        break;
        }
      default:
        jj_la1[49] = jj_gen;
        break label_21;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LPAREN:
      case LBRACKET:
      case DOT:{
        part = PrimarySuffix();
parts.addElement(part);
        break;
        }
      case AT:{
        jj_consume_token(AT);
        t = jj_consume_token(IDENTIFIER);
TypedExpression oldExpr=JavaHelper.makeExpression(parts,null,decl,null);
      JavaHelper.ensureConvertability(FeatureStructure.class,oldExpr,errToken);
      TypedExpression expr=new TypedExpression(Types.UNTYPED,
        new CallExpression(Types.UNTYPED,oldExpr.getExpression(),
          new de.renew.formalism.fs.FSAtFunction(t.image)));
      // Start a completely new vector. The previous vector
      // had to be parsed into an expression and could
      // not be kept.
      parts=new Vector<PrimaryPart>();
      parts.addElement(new PrimaryPart(PrimaryPart.EXPR,expr,errToken));
        break;
        }
      default:
        jj_la1[50] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
{if ("" != null) return parts;}
    throw new Error("Missing return statement in function");
  }

  final public PrimaryPart PrimaryPrefix() throws ParseException {Token t;
  TypedExpression expr;
  Expression untypedExpr;
  Vector<TypedExpression> vector;
  Token errToken;
  Class<?> clazz;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case FALSE:
    case NULL:
    case TRUE:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:{
errToken=token;
      expr = Literal();
{if ("" != null) return new PrimaryPart(PrimaryPart.EXPR,expr,errToken);}
      break;
      }
    default:
      jj_la1[51] = jj_gen;
      if (jj_2_10(2147483647)) {
errToken=token;
        clazz = ClassType();
        jj_consume_token(DOT);
        jj_consume_token(CLASS);
{if ("" != null) return new PrimaryPart(PrimaryPart.EXPR,
      new TypedExpression(Class.class,
        new ConstantExpression(Class.class,clazz)),errToken);}
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case IDENTIFIER:{
errToken=token;
          t = jj_consume_token(IDENTIFIER);
{if ("" != null) return new PrimaryPart(PrimaryPart.NAME,t.image,errToken);}
          break;
          }
        case THIS:{
errToken=token;
          jj_consume_token(THIS);
{if ("" != null) return new PrimaryPart(PrimaryPart.EXPR,
      new TypedExpression(
        de.renew.net.NetInstance.class,
          new VariableExpression(de.renew.net.NetInstance.class,
            new LocalVariable("this"))),
      errToken);}
          break;
          }
        case LPAREN:{
errToken=token;
          jj_consume_token(LPAREN);
          vector = ArgumentList();
          jj_consume_token(RPAREN);
if (vector.size()==1) {
      {if ("" != null) return new PrimaryPart(PrimaryPart.EXPR,
        (TypedExpression)vector.elementAt(0),errToken);}
    } else {
      {if ("" != null) return new PrimaryPart(PrimaryPart.EXPR,
        new TypedExpression(Tuple.class,
          JavaHelper.makeGuardedTupleExpression(vector)),
        errToken);}
    }
          break;
          }
        case TAGIDENT:
        case LBRACKET:
        case LT:{
errToken=token;
          untypedExpr = FSExpression();
{if ("" != null) return new PrimaryPart(PrimaryPart.EXPR,
      new TypedExpression(FeatureStructure.class,untypedExpr),errToken);}
          break;
          }
        case NEW:{
errToken=token;
          expr = AllocationExpression();
{if ("" != null) return new PrimaryPart(PrimaryPart.EXPR,expr,errToken);}
          break;
          }
        default:
          jj_la1[52] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public PrimaryPart PrimarySuffix() throws ParseException {Token t;
  PrimaryPart result=null;
  TypedExpression expr;
  Vector<TypedExpression> vector;
  Token errToken;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LBRACKET:{
errToken=token;
      jj_consume_token(LBRACKET);
      expr = Expression();
      jj_consume_token(RBRACKET);
{if ("" != null) return new PrimaryPart(PrimaryPart.ARRAY,expr,errToken);}
      break;
      }
    case DOT:{
errToken=token;
      jj_consume_token(DOT);
      t = jj_consume_token(IDENTIFIER);
{if ("" != null) return new PrimaryPart(PrimaryPart.NAME,t.image,errToken);}
      break;
      }
    case LPAREN:{
errToken=token;
      jj_consume_token(LPAREN);
      vector = ArgumentList();
      jj_consume_token(RPAREN);
{if ("" != null) return new PrimaryPart(PrimaryPart.CALL,vector,errToken);}
      break;
      }
    default:
      jj_la1[53] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public TypedExpression Literal() throws ParseException {Token t;
  Object obj;
  String s;
  Class<?> type;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INTEGER_LITERAL:{
      t = jj_consume_token(INTEGER_LITERAL);
s=t.image.toLowerCase();
      if (LiteralParser.denotesLong(s)) {
        obj=new Value(new Long(LiteralParser.parseLong(s)));
        type=Long.TYPE;
      } else {
        obj=new Value(new Integer(LiteralParser.parseInt(s)));
        type=Integer.TYPE;
      }
      break;
      }
    case FLOATING_POINT_LITERAL:{
      t = jj_consume_token(FLOATING_POINT_LITERAL);
s=t.image.toLowerCase();
      if (LiteralParser.denotesFloat(s)) {
        obj=new Value(LiteralParser.parseFloat(s));
        type=Float.TYPE;
      } else {
        obj=new Value(LiteralParser.parseDouble(s));
        type=Double.TYPE;
      }
      break;
      }
    case CHARACTER_LITERAL:{
      t = jj_consume_token(CHARACTER_LITERAL);
obj=new Value(new Character(LiteralParser.parseChar(t.image)));
      type=Character.TYPE;
      break;
      }
    case STRING_LITERAL:{
      t = jj_consume_token(STRING_LITERAL);
obj=LiteralParser.parseString(t.image);
      type=String.class;
      break;
      }
    case TRUE:{
      jj_consume_token(TRUE);
obj=new Value(Boolean.TRUE);
      type=Boolean.TYPE;
      break;
      }
    case FALSE:{
      jj_consume_token(FALSE);
obj=new Value(Boolean.FALSE);
      type=Boolean.TYPE;
      break;
      }
    case NULL:{
      jj_consume_token(NULL);
obj=null;
      type=null;
      break;
      }
    default:
      jj_la1[54] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return new TypedExpression(type,
      new ConstantExpression(type,obj));}
    throw new Error("Missing return statement in function");
  }

  final public Vector<TypedExpression> ArgumentList() throws ParseException {Vector<TypedExpression> vector=new Vector<TypedExpression>();
  TypedExpression expr;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case FALSE:
    case NEW:
    case NULL:
    case THIS:
    case TRUE:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
    case TAGIDENT:
    case LPAREN:
    case LBRACKET:
    case LT:
    case BANG:
    case TILDE:
    case PLUS:
    case MINUS:{
      expr = Expression();
vector.addElement(expr);
      label_22:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          ;
          break;
          }
        default:
          jj_la1[55] = jj_gen;
          break label_22;
        }
        jj_consume_token(COMMA);
        expr = Expression();
vector.addElement(expr);
      }
      break;
      }
    default:
      jj_la1[56] = jj_gen;
      ;
    }
{if ("" != null) return vector;}
    throw new Error("Missing return statement in function");
  }

  final public TypedExpression AllocationExpression() throws ParseException {Token errToken;
  TypedExpression expr;
  Vector<TypedExpression> vector;
  String name;
  Class<?> clazz;
    jj_consume_token(NEW);
    if (jj_2_11(2147483647)) {
      clazz = PrimitiveType();
      expr = ArrayDimensions(clazz);
{if ("" != null) return expr;}
    } else if (jj_2_12(2147483647)) {
      clazz = NonArrayType();
      expr = ArrayDimensions(clazz);
{if ("" != null) return expr;}
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FLOAT:
      case INT:
      case LONG:
      case SHORT:
      case IDENTIFIER:{
errToken=token;
        clazz = NonArrayType();
        jj_consume_token(LPAREN);
        vector = ArgumentList();
        jj_consume_token(RPAREN);
{if ("" != null) return JavaHelper.makeConstructorExpression(clazz,vector,errToken);}
        break;
        }
      default:
        jj_la1[57] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

/*
 * The second LOOKAHEAD specification below is to parse to PrimarySuffix
 * if there is an expression between "[" and "]".
 */
  final public TypedExpression ArrayDimensions(Class<?> clazz) throws ParseException {Token t;
  Vector<TypedExpression> vector=new Vector<TypedExpression>();
  TypedExpression expr;
    label_23:
    while (true) {
      jj_consume_token(LBRACKET);
t=token;
      expr = Expression();
      jj_consume_token(RBRACKET);
// Make sure the result can be converted to an int.
      JavaHelper.ensureConvertability(Integer.TYPE,expr,t);
      // Store another expression in the vector.
      vector.addElement(expr);
      clazz=JavaHelper.increaseArrayLevel(clazz,token);
      if (jj_2_13(2)) {
        ;
      } else {
        break label_23;
      }
    }
    label_24:
    while (true) {
      if (jj_2_14(2)) {
        ;
      } else {
        break label_24;
      }
      jj_consume_token(LBRACKET);
      jj_consume_token(RBRACKET);
clazz=JavaHelper.increaseArrayLevel(clazz,token);
    }
Object[] result=new Object[vector.size()];
    vector.copyInto(result);
    {if ("" != null) return new TypedExpression(clazz,
      new CallExpression(clazz,
        JavaHelper.makeTupleExpression(vector),
        new DynamicConstructorFunction(clazz)));}
    throw new Error("Missing return statement in function");
  }

//*****************************************************************
//*****************************************************************
//*****************************************************************
//*****************************************************************
  final public 
FSUnifyExpression TransitionRule() throws ParseException {FSUnifyExpression expr=null;
    expr = FSExpression();
    jj_consume_token(0);
{if ("" != null) return expr;}
    throw new Error("Missing return statement in function");
  }

  final public FSUnifyExpression FSExpression() throws ParseException {Token errToken;
  Vector<Path> paths=new Vector<Path>();
  Vector<Object> exprs=new Vector<Object>();
//  UpdatableMap ECtoExpr=new HashedMap(), FStoExpr=new HashedMap();
  EquivRelation er = new EquivRelation();
  Node ec;
  FeatureStructure fs;
errToken=token;
    ec = parseFS(new HashedMap(),er,Path.EPSILON,paths,exprs);
try {
        er.extensionalize();
        //ec.retype();
    } catch (Exception uff) {
        {if (true) throw JavaHelper.makeParseException("Not extensionalizable!",
          errToken);}
    }
    fs = new FeatureStructure(er.rebuild(ec),false);
    {if ("" != null) return new FSUnifyExpression(fs, paths, exprs);}
    throw new Error("Missing return statement in function");
  }

  final public Concept parseConcept() throws ParseException {String conceptName=null;
  Token namespaceToken=null, errToken=null;
  Concept concept=null;
errToken=token;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IDENTIFIER:{
      if (jj_2_15(2)) {
        namespaceToken = jj_consume_token(IDENTIFIER);
        jj_consume_token(127);
      } else {
        ;
      }
      conceptName = Name();
      break;
      }
    case THIS:{
      jj_consume_token(THIS);
conceptName="this";
      break;
      }
    default:
      jj_la1[58] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
if (namespaceToken==null) {
           if (decl!=null) {
               Object interpretation=decl.interpreteName(conceptName);
               // logger.debug("Interpretation of "+conceptName+": "+interpretation+".");
               String iName=null;
               if (interpretation instanceof Concept) {
                   iName=((Concept)interpretation).getFullName();
               } else if (interpretation instanceof Class) {
                   iName=((Class<?>)interpretation).getName();
               }
               if (iName!=null) {
                        // logger.debug("Interpreting "+conceptName+" as "+iName+".");
                   conceptName=iName;
               }
           }
       } else {
           conceptName=namespaceToken.image+"::"+conceptName;
       }
       try {
           concept=TypeSystem.instance().conceptForName(conceptName);
       } catch (NoSuchElementException ex) {
           if (decl==null) {
               // create dummy concept on the fly:
               concept=new ConceptImpl(conceptName,false);
           } else {
               {if (true) throw JavaHelper.makeParseException("Concept "+conceptName
                                                   +" does not exist.",errToken);}
           }
       }
{if ("" != null) return concept;}
    throw new Error("Missing return statement in function");
  }

  final public JavaClassType parseBasicType() throws ParseException {Token errToken;
  JavaClassType type=null;
  Class<?> primitive=null;
  TypedExpression lowerExpr=null, upperExpr=null;
  Object lower=BasicType.NEGINF, upper=BasicType.POSINF;
errToken=token;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FLOAT:
    case INT:
    case LONG:
    case SHORT:{
      primitive = PrimitiveType();
type=new BasicType(primitive);
      break;
      }
    case LBRACE:{
      jj_consume_token(LBRACE);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case FALSE:
      case NULL:
      case TRUE:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:{
        lowerExpr = Literal();
        break;
        }
      case STAR:{
        jj_consume_token(STAR);
        break;
        }
      default:
        jj_la1[59] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(DOTDOT);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case FALSE:
      case NULL:
      case TRUE:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:{
        upperExpr = Literal();
        break;
        }
      case STAR:{
        jj_consume_token(STAR);
        break;
        }
      default:
        jj_la1[60] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(RBRACE);
try {
         if (lowerExpr==null)
           lower=BasicType.NEGINF;
         else
           lower=lowerExpr.getExpression().startEvaluation(null,null,null);
         if (upperExpr==null)
           upper=BasicType.POSINF;
         else
           upper=upperExpr.getExpression().startEvaluation(null,null,null);
     } catch (Impossible imp) {
           logger.error(imp.getMessage(), imp);
     }
       try {
         type = new BasicType(lower,upper);
       } catch (TypeException tee) {
           {if (true) throw JavaHelper.makeParseException
                      ("Different or no BasicTypes in range type {"
                       +BasicType.objToString(lower)
                       +".."+BasicType.objToString(upper)+"}."
                       ,errToken);}
       }
      break;
      }
    default:
      jj_la1[61] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return type;}
    throw new Error("Missing return statement in function");
  }

  final public Type parseType() throws ParseException {Token errToken;
  ParsedType ptype=ParsedType.PARSED_TOP;
  Token instantiate=null, listType=null;
errToken=token;
    if (jj_2_16(2147483647)) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case BANG:{
        instantiate = jj_consume_token(BANG);
        break;
        }
      default:
        jj_la1[62] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case STAR:{
        listType = jj_consume_token(STAR);
        break;
        }
      case PLUS:{
        listType = jj_consume_token(PLUS);
        break;
        }
      default:
        jj_la1[63] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } else if (jj_2_17(2147483647)) {
      instantiate = jj_consume_token(BANG);
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FLOAT:
      case INT:
      case LONG:
      case SHORT:
      case THIS:
      case ANY:
      case IDENTIFIER:
      case LBRACE:
      case BANG:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case BANG:{
          instantiate = jj_consume_token(BANG);
          break;
          }
        default:
          jj_la1[64] = jj_gen;
          ;
        }
        ptype = preParseType();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case PLUS:
        case STAR:{
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case STAR:{
            listType = jj_consume_token(STAR);
            break;
            }
          case PLUS:{
            listType = jj_consume_token(PLUS);
            break;
            }
          default:
            jj_la1[65] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
          }
        default:
          jj_la1[66] = jj_gen;
          ;
        }
        break;
        }
      default:
        jj_la1[67] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
try {
       Type type=ptype.asType();
       if (instantiate!=null)
         type=type.getInstanceType();
       if (listType!=null) {
         if (listType.image.equals("*"))
           type=ListType.getList(type);
         else if (listType.image.equals("+"))
           type=ListType.getNEList(type);
       }
       {if ("" != null) return type;}
     } catch (UnificationFailure uff) {
         // should not happen
         {if (true) throw JavaHelper.makeParseException
               ("Type "+ptype+" is not consistent.",
                errToken);}

     }
    throw new Error("Missing return statement in function");
  }

  final public ParsedType preParseType() throws ParseException {Token errToken;
  Type type=null;
  ParsedType result=null;
  Concept concept;
  ConceptSet concepts=null;
  boolean restricted=true;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FLOAT:
    case INT:
    case LONG:
    case SHORT:
    case LBRACE:{
      // either a Primitive/BasicType...
         result = parseBasicType();
      break;
      }
    case THIS:
    case ANY:
    case IDENTIFIER:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case THIS:
      case IDENTIFIER:{
        concept = parseConcept();
concepts=new ConceptSet(concept);
        break;
        }
      case ANY:{
        jj_consume_token(ANY);
restricted=false; concepts=new ConceptSet();
        break;
        }
      default:
        jj_la1[68] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      label_25:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          ;
          break;
          }
        default:
          jj_la1[69] = jj_gen;
          break label_25;
        }
        jj_consume_token(COMMA);
errToken=token;
        concept = parseConcept();
try {
            concepts.joinConcept(concept);
        } catch (UnificationFailure uff) {
            {if (true) throw JavaHelper.makeParseException("Concept "+concept.getName()
                 +" is not compatible with concept(s) "+concepts+".",errToken);}
        }

        errToken=token;
      }
result=new ParsedConjunctiveType(concepts,restricted);
      break;
      }
    default:
      jj_la1[70] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return result;}
    throw new Error("Missing return statement in function");
  }

  final public Node parseUntaggedFS(Type ectype, Name tag, UpdatableMap tags,
                     EquivRelation tie,
                     Path path, Vector<Path> paths, Vector<Object> exprs) throws ParseException {Node ec = null;
  Token t;
  Type type=null;
  Node subec, headec, tailec;
  Node listec, prevec = null;
  boolean hasTag = false;
  String feature;
  Name featureName;
  Path newPath;
  Token errToken=null;
  Type apptype;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LBRACKET:{
        jj_consume_token(LBRACKET);
        if (jj_2_18(2147483647)) {
errToken=token;
          type = parseType();
        } else {
          ;
        }
if (type!=null) {
        try {
          ectype=ectype.unify(type);
       } catch (UnificationFailure uff) {
          {if (true) throw JavaHelper.makeParseException("Type "+type
               +" is incompatible with Type "
               +ectype+".", errToken);}
       }
   }
   ec = ectype.newNode();
        label_26:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case IDENTIFIER:{
            ;
            break;
            }
          default:
            jj_la1[71] = jj_gen;
            break label_26;
          }
errToken=token;
          t = jj_consume_token(IDENTIFIER);
          jj_consume_token(COLON);
if (decl==null && Type.TOP.equals(ectype)) {
          ectype=Type.ANY;
          ec=ectype.newNode();
      }
      feature=t.image;
      featureName=new Name(feature);
      if (ec.hasFeature(featureName))
        {if (true) throw JavaHelper.makeParseException(
          "Science Fiction - Double Feature "+feature+".",errToken);}
      if (!ectype.isApprop(featureName))
        {if (true) throw JavaHelper.makeParseException(
          "Feature "+feature+" not allowed in Type "+ectype+".",errToken);}
      newPath=path.append(new Name(feature));
      errToken=token;
      apptype=ectype.appropType(featureName);
          subec = parseSubFS(apptype,tags,tie,newPath,paths,exprs);
ec.setFeature(featureName,subec);
        }
        jj_consume_token(RBRACKET);
        break;
        }
      case LT:{
errToken=token;
        jj_consume_token(LT);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case DOUBLE:
        case FLOAT:
        case INT:
        case LONG:
        case SHORT:
        case THIS:
        case ANY:
        case IDENTIFIER:
        case LBRACE:
        case BANG:
        case PLUS:
        case STAR:{
errToken=token;
          type = parseType();
          break;
          }
        default:
          jj_la1[72] = jj_gen;
          ;
        }
if (type==null) {
        type=Type.TOP;
    }
    try {
       ectype=ectype.unify(ListType.getList(type));
      // may throw UnificationFailure
      type=((ListType)ectype).getBaseType();
      // may throw ClassCastException
    } catch (Exception anye) {
        {if (true) throw JavaHelper.makeParseException
            ("Type "+ectype+" is not the correct list type.",errToken);}
    }
        label_27:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case TAGIDENT:
          case LPAREN:
          case LBRACKET:
          case LT:{
            ;
            break;
            }
          default:
            jj_la1[73] = jj_gen;
            break label_27;
          }
listec = ListType.getNEList(type).newNode();
      if (prevec == null) {
         // first time: remember first list node as result
         ec = listec;
      }
      errToken = token;
          headec = parseSubFS(type,tags,tie,path.append(ListType.HEAD),
                                paths,exprs);
listec.setFeature(ListType.HEAD, headec);
     if (prevec != null) {
        prevec.setFeature(ListType.TAIL,listec);
     }
     prevec = listec;
     path=path.append(ListType.TAIL);
        }
tailec = null;
      errToken=token;
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case BIT_OR:{
          jj_consume_token(BIT_OR);
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case TAGIDENT:
          case LPAREN:
          case LBRACKET:
          case LT:{
            tailec = parseSubFS(ListType.getList(type),tags,tie,
                                         path,paths,exprs);
            break;
            }
          default:
            jj_la1[74] = jj_gen;
            ;
          }
if (tailec==null) {
            tailec=ListType.getList(type).newNode();
          }
          listec = tailec;
          jj_consume_token(GT);
          break;
          }
        case GT:{
          jj_consume_token(GT);
errToken = token;
           listec = ListType.getEList(type).newNode();
          break;
          }
        default:
          jj_la1[75] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
if (prevec == null) {
            ec = listec;
          } else {
            prevec.setFeature(ListType.TAIL, listec);
         }
        break;
        }
      default:
        jj_la1[76] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
if (tag!=null) {
        if (tags.includesKey(tag)) {
          tie.unify(tie.getUnificator((Node)tags.at(tag)),ec);
        } else {
          tags.putAt(tag,ec);
        }
    }
    {if ("" != null) return ec;}
    } catch (UnificationFailure uff) {
{if (true) throw JavaHelper.makeParseException("Co-referenced substructures of the Feature Structure are not compatible.",token);}
    }
    throw new Error("Missing return statement in function");
  }

  final public Node parseFS(UpdatableMap tags, EquivRelation tie,
  Path path, Vector<Path> paths, Vector<Object> exprs) throws ParseException {Node ec=null;
  Token t, errToken;
  Name tag;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LBRACKET:
    case LT:{
      ec = parseUntaggedFS(Type.TOP,null,tags,tie,path,paths,exprs);
      break;
      }
    case TAGIDENT:{
      t = jj_consume_token(TAGIDENT);
tag = new Name(t.image.substring(1));
   errToken=t;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LPAREN:
      case LBRACKET:
      case LT:{
        ec = parseUntaggedSubFS(Type.TOP,tag,tags,tie,path,paths,exprs);
        break;
        }
      default:
        jj_la1[77] = jj_gen;
if (ec==null) {
      ec=Type.TOP.newNode();
    }
    if (tags.includesKey(tag)) {
      try {
         tie.unify(ec,(Node)tags.at(tag));
      } catch (UnificationFailure uff) {
          {if (true) throw JavaHelper.makeParseException("Tag "+tag+" did not unify.",errToken);}
      }
    } else {
      tags.putAt(tag,ec);
    }
      }
      break;
      }
    default:
      jj_la1[78] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return ec;}
    throw new Error("Missing return statement in function");
  }

  final public Node parseUntaggedSubFS(Type ectype, Name tag, UpdatableMap tags,
                        EquivRelation tie,
                        Path path, Vector<Path> paths, Vector<Object> exprs) throws ParseException {Node ec;
  TypedExpression expr=null;
  Token errToken=null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LBRACKET:
    case LT:{
      ec = parseUntaggedFS(ectype,tag,tags,tie,path,paths,exprs);
{if ("" != null) return ec;}
      break;
      }
    case LPAREN:{
      jj_consume_token(LPAREN);
errToken=token;
      expr = Expression();
      jj_consume_token(RPAREN);
if (expr.getExpression() instanceof ConstantExpression) {
        // logger.debug("Found ConstantExpression!");
      Object javaObject=
        ((ConstantExpression)expr.getExpression()).getConstant();
      JavaType jotype=JavaObject.getJavaType(javaObject);
      // logger.debug("Constant object is "+jotype.getJavaObject());
      if (!ectype.canUnify(jotype)) {
         {if (true) throw JavaHelper.makeParseException("Constant "+javaObject+" is not of type "+ectype+".",errToken);}
      }
      ectype=jotype;
    } else {
      if (decl==null) {
        StringBuffer javaExpr=new StringBuffer();
        Token currentToken=errToken.next;
        while (currentToken!=token) {
           javaExpr.append(currentToken.image);
           currentToken=currentToken.next;
           if (currentToken!=token) {
             Token specialToken=currentToken.specialToken;
             while (specialToken!=null) {
               javaExpr.append(specialToken.image);
               specialToken=specialToken.specialToken;
             }
           }
        }
        ectype=new ConjunctiveType(new ConceptImpl(javaExpr.toString(),false));
      } else {
      Class<?> type=expr.getType();
      if (type!=Types.UNTYPED) {
        if (Types.allowsWideningConversion(de.uni_hamburg.fs.FeatureStructure.class,
                                           type)) {
           // logger.debug("Found FS subexpression.");
        } else {
            try {
                ectype=ectype.unify(TypeSystem.instance().getType(type));
            } catch (UnificationFailure uff) {
                {if (true) throw JavaHelper.makeParseException("Expression is not type compatible with "+ectype+".",errToken);}
            }
        }
      }
      paths.addElement(path);
      exprs.addElement(expr.getExpression());
      }
    }
    ec = ectype.newNode();
    if (tag != null) {
      if (tags.includesKey(tag))
          ec = (Node)tags.at(tag);
      else {
          tags.putAt(tag,ec);
      }
    }
    {if ("" != null) return ec;}
      break;
      }
    default:
      jj_la1[79] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Node parseSubFS(Type ectype, UpdatableMap tags, EquivRelation tie,
  Path path, Vector<Path> paths, Vector<Object> exprs) throws ParseException {Node ec = null;
  Token t;
  Name tag;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LPAREN:
    case LBRACKET:
    case LT:{
      ec = parseUntaggedSubFS(ectype,null,tags,tie,path,paths,exprs);
      break;
      }
    case TAGIDENT:{
      t = jj_consume_token(TAGIDENT);
tag = new Name(t.image.substring(1));
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LPAREN:
      case LBRACKET:
      case LT:{
        ec = parseUntaggedSubFS(ectype,tag,tags,tie,path,paths,exprs);
        break;
        }
      default:
        jj_la1[80] = jj_gen;
if (ec == null) {
        if (tags.includesKey(tag))
          ec = (Node)tags.at(tag);
        else {
          ec = ectype.newNode();
          tags.putAt(tag,ec);
        }
    }
      }
      break;
      }
    default:
      jj_la1[81] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return ec;}
    throw new Error("Missing return statement in function");
  }

/** Method for parsing concept "approp" definition strings.
 * Returns a Map from features (Names) to the Type they allow.
 */
  final public OrderedTable parseAppropDef() throws ParseException {Token errToken, lower, upper;
  String feature=null;
  ParsedType type;
  OrderedTable approps=new OrderedTable();
    label_28:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IDENTIFIER:{
        ;
        break;
        }
      default:
        jj_la1[82] = jj_gen;
        break label_28;
      }
errToken=token; lower=null; upper=null; type=ParsedType.PARSED_TOP;
      feature = Name();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LBRACKET:{
        jj_consume_token(LBRACKET);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case LOWER_RANGE_LITERAL:{
          lower = jj_consume_token(LOWER_RANGE_LITERAL);
          break;
          }
        default:
          jj_la1[83] = jj_gen;
          ;
        }
        upper = jj_consume_token(STAR);
        jj_consume_token(RBRACKET);
        break;
        }
      default:
        jj_la1[84] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COLON:{
        jj_consume_token(COLON);
        type = preParseType();
        break;
        }
      default:
        jj_la1[85] = jj_gen;
        ;
      }
if (approps.includesKey(feature)) {
        {if (true) throw JavaHelper.makeParseException("Science Fiction - Double Feature: \u005c""+feature+"\u005c".",
                 errToken);}
       }
       if (upper != null) {
           boolean atLeastOne = lower != null && lower.image.equals("1..");
           type = new ParsedListType(atLeastOne,type);
       }
       approps.putAt(new Name(feature),type);
    }
{if ("" != null) return approps;}
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_2_13(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  private boolean jj_2_14(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  private boolean jj_2_15(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  private boolean jj_2_16(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  private boolean jj_2_17(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  private boolean jj_2_18(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  private boolean jj_3R_78()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_95()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_130()
 {
    if (jj_3R_143()) return true;
    return false;
  }

  private boolean jj_3R_94()
 {
    if (jj_scan_token(NULL)) return true;
    return false;
  }

  private boolean jj_3R_140()
 {
    if (jj_scan_token(GE)) return true;
    return false;
  }

  private boolean jj_3R_139()
 {
    if (jj_scan_token(LE)) return true;
    return false;
  }

  private boolean jj_3R_138()
 {
    if (jj_scan_token(GT)) return true;
    return false;
  }

  private boolean jj_3R_137()
 {
    if (jj_scan_token(LT)) return true;
    return false;
  }

  private boolean jj_3R_93()
 {
    if (jj_scan_token(FALSE)) return true;
    return false;
  }

  private boolean jj_3R_129()
 {
    if (jj_3R_142()) return true;
    return false;
  }

  private boolean jj_3R_125()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_137()) {
    jj_scanpos = xsp;
    if (jj_3R_138()) {
    jj_scanpos = xsp;
    if (jj_3R_139()) {
    jj_scanpos = xsp;
    if (jj_3R_140()) return true;
    }
    }
    }
    if (jj_3R_124()) return true;
    return false;
  }

  private boolean jj_3R_92()
 {
    if (jj_scan_token(TRUE)) return true;
    return false;
  }

  private boolean jj_3R_117()
 {
    if (jj_3R_124()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_125()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_122()
 {
    if (jj_scan_token(LT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_129()) jj_scanpos = xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_130()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_131()) {
    jj_scanpos = xsp;
    if (jj_3R_132()) return true;
    }
    return false;
  }

  private boolean jj_3R_91()
 {
    if (jj_scan_token(STRING_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_90()
 {
    if (jj_scan_token(CHARACTER_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_118()
 {
    if (jj_scan_token(INSTANCEOF)) return true;
    if (jj_3R_126()) return true;
    return false;
  }

  private boolean jj_3R_110()
 {
    if (jj_3R_117()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_118()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_128()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_143()) return true;
    return false;
  }

  private boolean jj_3R_89()
 {
    if (jj_scan_token(FLOATING_POINT_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_37()
 {
    if (jj_3R_55()) return true;
    return false;
  }

  private boolean jj_3R_54()
 {
    if (jj_3R_69()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(74)) {
    jj_scanpos = xsp;
    if (jj_scan_token(83)) {
    jj_scanpos = xsp;
    if (jj_scan_token(85)) {
    jj_scanpos = xsp;
    if (jj_scan_token(86)) {
    jj_scanpos = xsp;
    if (jj_scan_token(106)) {
    jj_scanpos = xsp;
    if (jj_scan_token(104)) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_18()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_36()) {
    jj_scanpos = xsp;
    if (jj_scan_token(92)) {
    jj_scanpos = xsp;
    if (jj_3R_37()) {
    jj_scanpos = xsp;
    if (jj_scan_token(63)) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_36()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(92)) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_54()) {
    jj_scanpos = xsp;
    if (jj_scan_token(104)) {
    jj_scanpos = xsp;
    if (jj_scan_token(106)) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_120()
 {
    if (jj_scan_token(NE)) return true;
    return false;
  }

  private boolean jj_3R_119()
 {
    if (jj_scan_token(EQ)) return true;
    return false;
  }

  private boolean jj_3R_88()
 {
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_76()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_88()) {
    jj_scanpos = xsp;
    if (jj_3R_89()) {
    jj_scanpos = xsp;
    if (jj_3R_90()) {
    jj_scanpos = xsp;
    if (jj_3R_91()) {
    jj_scanpos = xsp;
    if (jj_3R_92()) {
    jj_scanpos = xsp;
    if (jj_3R_93()) {
    jj_scanpos = xsp;
    if (jj_3R_94()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_111()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_119()) {
    jj_scanpos = xsp;
    if (jj_3R_120()) return true;
    }
    if (jj_3R_110()) return true;
    return false;
  }

  private boolean jj_3R_103()
 {
    if (jj_3R_110()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_111()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_127()
 {
    if (jj_3R_142()) return true;
    return false;
  }

  private boolean jj_3R_121()
 {
    if (jj_scan_token(LBRACKET)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_127()) jj_scanpos = xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_128()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_112()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_121()) {
    jj_scanpos = xsp;
    if (jj_3R_122()) return true;
    }
    return false;
  }

  private boolean jj_3R_102()
 {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_78()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_101()
 {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_104()
 {
    if (jj_scan_token(BIT_AND)) return true;
    if (jj_3R_103()) return true;
    return false;
  }

  private boolean jj_3R_86()
 {
    if (jj_3R_103()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_104()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_81()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_100()) {
    jj_scanpos = xsp;
    if (jj_3R_101()) {
    jj_scanpos = xsp;
    if (jj_3R_102()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_100()
 {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_29()) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_87()
 {
    if (jj_scan_token(XOR)) return true;
    if (jj_3R_86()) return true;
    return false;
  }

  private boolean jj_3R_65()
 {
    if (jj_3R_80()) return true;
    return false;
  }

  private boolean jj_3R_176()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_69()) return true;
    return false;
  }

  private boolean jj_3R_74()
 {
    if (jj_3R_86()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_87()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_175()
 {
    if (jj_scan_token(ANY)) return true;
    return false;
  }

  private boolean jj_3R_174()
 {
    if (jj_3R_69()) return true;
    return false;
  }

  private boolean jj_3R_64()
 {
    if (jj_3R_79()) return true;
    return false;
  }

  private boolean jj_3R_170()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_174()) {
    jj_scanpos = xsp;
    if (jj_3R_175()) return true;
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_176()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_169()
 {
    if (jj_3R_55()) return true;
    return false;
  }

  private boolean jj_3R_158()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_169()) {
    jj_scanpos = xsp;
    if (jj_3R_170()) return true;
    }
    return false;
  }

  private boolean jj_3R_75()
 {
    if (jj_scan_token(BIT_OR)) return true;
    if (jj_3R_74()) return true;
    return false;
  }

  private boolean jj_3R_63()
 {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_78()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_57()
 {
    if (jj_3R_74()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_75()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_62()
 {
    if (jj_scan_token(THIS)) return true;
    return false;
  }

  private boolean jj_3R_35()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3R_58()
 {
    if (jj_scan_token(SC_AND)) return true;
    if (jj_3R_57()) return true;
    return false;
  }

  private boolean jj_3_10()
 {
    if (jj_3R_34()) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(CLASS)) return true;
    return false;
  }

  private boolean jj_3R_61()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3_17()
 {
    if (jj_scan_token(BANG)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_35()) {
    jj_scanpos = xsp;
    if (jj_scan_token(83)) {
    jj_scanpos = xsp;
    if (jj_scan_token(90)) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_40()
 {
    if (jj_3R_57()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_58()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_16()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(92)) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(106)) {
    jj_scanpos = xsp;
    if (jj_scan_token(104)) return true;
    }
    return false;
  }

  private boolean jj_3R_159()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(106)) {
    jj_scanpos = xsp;
    if (jj_scan_token(104)) return true;
    }
    return false;
  }

  private boolean jj_3R_60()
 {
    if (jj_3R_77()) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(CLASS)) return true;
    return false;
  }

  private boolean jj_3R_151()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(92)) jj_scanpos = xsp;
    if (jj_3R_158()) return true;
    xsp = jj_scanpos;
    if (jj_3R_159()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_150()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(92)) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(106)) {
    jj_scanpos = xsp;
    if (jj_scan_token(104)) return true;
    }
    return false;
  }

  private boolean jj_3R_142()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_150()) {
    jj_scanpos = xsp;
    if (jj_scan_token(92)) {
    jj_scanpos = xsp;
    if (jj_3R_151()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_59()
 {
    if (jj_3R_76()) return true;
    return false;
  }

  private boolean jj_3R_42()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_59()) {
    jj_scanpos = xsp;
    if (jj_3R_60()) {
    jj_scanpos = xsp;
    if (jj_3R_61()) {
    jj_scanpos = xsp;
    if (jj_3R_62()) {
    jj_scanpos = xsp;
    if (jj_3R_63()) {
    jj_scanpos = xsp;
    if (jj_3R_64()) {
    jj_scanpos = xsp;
    if (jj_3R_65()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_41()
 {
    if (jj_scan_token(SC_OR)) return true;
    if (jj_3R_40()) return true;
    return false;
  }

  private boolean jj_3R_30()
 {
    if (jj_3R_40()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_41()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_68()
 {
    if (jj_3R_76()) return true;
    return false;
  }

  private boolean jj_3_2()
 {
    if (jj_3R_29()) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3R_73()
 {
    if (jj_3R_30()) return true;
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_29()) return true;
    return false;
  }

  private boolean jj_3_5()
 {
    if (jj_3R_31()) return true;
    if (jj_scan_token(ASSIGN)) return true;
    return false;
  }

  private boolean jj_3R_67()
 {
    if (jj_scan_token(AT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3_1()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_scan_token(NEW)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_66()
 {
    if (jj_3R_81()) return true;
    return false;
  }

  private boolean jj_3R_43()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_66()) {
    jj_scanpos = xsp;
    if (jj_3R_67()) return true;
    }
    return false;
  }

  private boolean jj_3R_85()
 {
    if (jj_3R_76()) return true;
    return false;
  }

  private boolean jj_3R_84()
 {
    if (jj_3R_76()) return true;
    return false;
  }

  private boolean jj_3R_31()
 {
    if (jj_3R_42()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_43()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_71()
 {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_84()) {
    jj_scanpos = xsp;
    if (jj_scan_token(106)) return true;
    }
    if (jj_scan_token(DOTDOT)) return true;
    xsp = jj_scanpos;
    if (jj_3R_85()) {
    jj_scanpos = xsp;
    if (jj_scan_token(106)) return true;
    }
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_72()
 {
    if (jj_3R_31()) return true;
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_29()) return true;
    return false;
  }

  private boolean jj_3R_56()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_72()) {
    jj_scanpos = xsp;
    if (jj_3R_73()) return true;
    }
    return false;
  }

  private boolean jj_3R_70()
 {
    if (jj_3R_33()) return true;
    return false;
  }

  private boolean jj_3_4()
 {
    if (jj_3R_30()) return true;
    if (jj_scan_token(ASSIGN)) return true;
    return false;
  }

  private boolean jj_3_9()
 {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_33()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_55()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_70()) {
    jj_scanpos = xsp;
    if (jj_3R_71()) return true;
    }
    return false;
  }

  private boolean jj_3R_161()
 {
    return false;
  }

  private boolean jj_3R_39()
 {
    if (jj_3R_30()) return true;
    return false;
  }

  private boolean jj_3R_181()
 {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_126()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_173()) return true;
    return false;
  }

  private boolean jj_3R_160()
 {
    if (jj_3R_123()) return true;
    return false;
  }

  private boolean jj_3R_29()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_38()) {
    jj_scanpos = xsp;
    if (jj_3R_39()) return true;
    }
    return false;
  }

  private boolean jj_3R_38()
 {
    if (jj_3R_56()) return true;
    return false;
  }

  private boolean jj_3R_153()
 {
    if (jj_scan_token(TAGIDENT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_160()) {
    jj_scanpos = xsp;
    if (jj_3R_161()) return true;
    }
    return false;
  }

  private boolean jj_3R_180()
 {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_33()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_154()) return true;
    return false;
  }

  private boolean jj_3R_152()
 {
    if (jj_3R_123()) return true;
    return false;
  }

  private boolean jj_3R_143()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_152()) {
    jj_scanpos = xsp;
    if (jj_3R_153()) return true;
    }
    return false;
  }

  private boolean jj_3R_179()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_180()) {
    jj_scanpos = xsp;
    if (jj_3R_181()) return true;
    }
    return false;
  }

  private boolean jj_3_8()
 {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_34()) return true;
    if (jj_scan_token(LBRACKET)) return true;
    return false;
  }

  private boolean jj_3_3()
 {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_45()
 {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_34()) return true;
    if (jj_scan_token(RPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(78)) {
    jj_scanpos = xsp;
    if (jj_scan_token(74)) {
    jj_scanpos = xsp;
    if (jj_scan_token(53)) {
    jj_scanpos = xsp;
    if (jj_scan_token(50)) {
    jj_scanpos = xsp;
    if (jj_scan_token(41)) {
    jj_scanpos = xsp;
    if (jj_3R_68()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_34()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_3()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_44()
 {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_34()) return true;
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3_7()
 {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_33()) return true;
    return false;
  }

  private boolean jj_3R_32()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_7()) {
    jj_scanpos = xsp;
    if (jj_3R_44()) {
    jj_scanpos = xsp;
    if (jj_3R_45()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_6()
 {
    if (jj_3R_32()) return true;
    return false;
  }

  private boolean jj_3R_53()
 {
    if (jj_scan_token(DOUBLE)) return true;
    return false;
  }

  private boolean jj_3R_178()
 {
    if (jj_3R_31()) return true;
    return false;
  }

  private boolean jj_3R_83()
 {
    if (jj_scan_token(THIS)) return true;
    return false;
  }

  private boolean jj_3R_52()
 {
    if (jj_scan_token(FLOAT)) return true;
    return false;
  }

  private boolean jj_3_15()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(127)) return true;
    return false;
  }

  private boolean jj_3R_82()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_15()) jj_scanpos = xsp;
    if (jj_3R_34()) return true;
    return false;
  }

  private boolean jj_3R_51()
 {
    if (jj_scan_token(LONG)) return true;
    return false;
  }

  private boolean jj_3R_69()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_82()) {
    jj_scanpos = xsp;
    if (jj_3R_83()) return true;
    }
    return false;
  }

  private boolean jj_3R_177()
 {
    if (jj_3R_179()) return true;
    return false;
  }

  private boolean jj_3R_173()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_177()) {
    jj_scanpos = xsp;
    if (jj_3R_178()) return true;
    }
    return false;
  }

  private boolean jj_3R_50()
 {
    if (jj_scan_token(INT)) return true;
    return false;
  }

  private boolean jj_3R_49()
 {
    if (jj_scan_token(SHORT)) return true;
    return false;
  }

  private boolean jj_3R_48()
 {
    if (jj_scan_token(BYTE)) return true;
    return false;
  }

  private boolean jj_3R_165()
 {
    if (jj_3R_173()) return true;
    return false;
  }

  private boolean jj_3R_47()
 {
    if (jj_scan_token(CHAR)) return true;
    return false;
  }

  private boolean jj_3R_46()
 {
    if (jj_scan_token(BOOLEAN)) return true;
    return false;
  }

  private boolean jj_3R_172()
 {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  private boolean jj_3R_171()
 {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  private boolean jj_3R_33()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_46()) {
    jj_scanpos = xsp;
    if (jj_3R_47()) {
    jj_scanpos = xsp;
    if (jj_3R_48()) {
    jj_scanpos = xsp;
    if (jj_3R_49()) {
    jj_scanpos = xsp;
    if (jj_3R_50()) {
    jj_scanpos = xsp;
    if (jj_3R_51()) {
    jj_scanpos = xsp;
    if (jj_3R_52()) {
    jj_scanpos = xsp;
    if (jj_3R_53()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_164()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_171()) {
    jj_scanpos = xsp;
    if (jj_3R_172()) return true;
    }
    if (jj_3R_154()) return true;
    return false;
  }

  private boolean jj_3R_79()
 {
    if (jj_3R_96()) return true;
    return false;
  }

  private boolean jj_3R_163()
 {
    if (jj_scan_token(TILDE)) return true;
    if (jj_3R_154()) return true;
    return false;
  }

  private boolean jj_3R_141()
 {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_134()
 {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_29()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_126()
 {
    if (jj_3R_109()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_141()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_123()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_133()) {
    jj_scanpos = xsp;
    if (jj_3R_134()) return true;
    }
    return false;
  }

  private boolean jj_3R_133()
 {
    if (jj_3R_112()) return true;
    return false;
  }

  private boolean jj_3R_162()
 {
    if (jj_scan_token(BANG)) return true;
    if (jj_3R_154()) return true;
    return false;
  }

  private boolean jj_3R_154()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_162()) {
    jj_scanpos = xsp;
    if (jj_3R_163()) {
    jj_scanpos = xsp;
    if (jj_3R_164()) {
    jj_scanpos = xsp;
    if (jj_3R_165()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_116()
 {
    if (jj_3R_77()) return true;
    return false;
  }

  private boolean jj_3R_115()
 {
    if (jj_3R_33()) return true;
    return false;
  }

  private boolean jj_3R_109()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_115()) {
    jj_scanpos = xsp;
    if (jj_3R_116()) return true;
    }
    return false;
  }

  private boolean jj_3R_168()
 {
    if (jj_scan_token(REM)) return true;
    return false;
  }

  private boolean jj_3R_167()
 {
    if (jj_scan_token(SLASH)) return true;
    return false;
  }

  private boolean jj_3R_166()
 {
    if (jj_scan_token(STAR)) return true;
    return false;
  }

  private boolean jj_3R_155()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_166()) {
    jj_scanpos = xsp;
    if (jj_3R_167()) {
    jj_scanpos = xsp;
    if (jj_3R_168()) return true;
    }
    }
    if (jj_3R_154()) return true;
    return false;
  }

  private boolean jj_3R_145()
 {
    if (jj_3R_154()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_155()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_114()
 {
    return false;
  }

  private boolean jj_3R_113()
 {
    if (jj_3R_123()) return true;
    return false;
  }

  private boolean jj_3_14()
 {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_106()
 {
    if (jj_3R_112()) return true;
    return false;
  }

  private boolean jj_3R_107()
 {
    if (jj_scan_token(TAGIDENT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_113()) {
    jj_scanpos = xsp;
    if (jj_3R_114()) return true;
    }
    return false;
  }

  private boolean jj_3R_77()
 {
    if (jj_3R_34()) return true;
    return false;
  }

  private boolean jj_3R_96()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_106()) {
    jj_scanpos = xsp;
    if (jj_3R_107()) return true;
    }
    return false;
  }

  private boolean jj_3_13()
 {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_29()) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_157()
 {
    if (jj_scan_token(MINUS)) return true;
    if (jj_3R_145()) return true;
    return false;
  }

  private boolean jj_3R_108()
 {
    Token xsp;
    if (jj_3_13()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_13()) { jj_scanpos = xsp; break; }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_14()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_12()
 {
    if (jj_3R_34()) return true;
    if (jj_scan_token(LBRACKET)) return true;
    return false;
  }

  private boolean jj_3_11()
 {
    if (jj_3R_33()) return true;
    return false;
  }

  private boolean jj_3R_99()
 {
    if (jj_3R_109()) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_78()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_156()
 {
    if (jj_scan_token(PLUS)) return true;
    if (jj_3R_145()) return true;
    return false;
  }

  private boolean jj_3R_146()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_156()) {
    jj_scanpos = xsp;
    if (jj_3R_157()) return true;
    }
    return false;
  }

  private boolean jj_3R_98()
 {
    if (jj_3R_109()) return true;
    if (jj_3R_108()) return true;
    return false;
  }

  private boolean jj_3R_135()
 {
    if (jj_3R_145()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_146()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_97()
 {
    if (jj_3R_33()) return true;
    if (jj_3R_108()) return true;
    return false;
  }

  private boolean jj_3R_132()
 {
    if (jj_scan_token(GT)) return true;
    return false;
  }

  private boolean jj_3R_144()
 {
    if (jj_3R_143()) return true;
    return false;
  }

  private boolean jj_3R_80()
 {
    if (jj_scan_token(NEW)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_97()) {
    jj_scanpos = xsp;
    if (jj_3R_98()) {
    jj_scanpos = xsp;
    if (jj_3R_99()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_131()
 {
    if (jj_scan_token(BIT_OR)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_144()) jj_scanpos = xsp;
    if (jj_scan_token(GT)) return true;
    return false;
  }

  private boolean jj_3R_149()
 {
    if (jj_scan_token(RUNSIGNEDSHIFT)) return true;
    return false;
  }

  private boolean jj_3R_148()
 {
    if (jj_scan_token(RSIGNEDSHIFT)) return true;
    return false;
  }

  private boolean jj_3R_147()
 {
    if (jj_scan_token(LSHIFT)) return true;
    return false;
  }

  private boolean jj_3R_105()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_29()) return true;
    return false;
  }

  private boolean jj_3R_136()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_147()) {
    jj_scanpos = xsp;
    if (jj_3R_148()) {
    jj_scanpos = xsp;
    if (jj_3R_149()) return true;
    }
    }
    if (jj_3R_135()) return true;
    return false;
  }

  private boolean jj_3R_95()
 {
    if (jj_3R_29()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_105()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_124()
 {
    if (jj_3R_135()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_136()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  /** Generated Token Manager. */
  public XFSNetParserTokenManager token_source;
  JavaCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[86];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
      jj_la1_init_3();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x0,0x0,0x10412800,0x0,0x0,0x0,0x0,0x2000000,0x0,0x82000400,0x0,0x82000400,0x0,0x0,0x0,0x400,0x2000000,0x0,0x0,0x2000000,0x0,0x10412800,0x0,0x10412800,0x2000000,0x2000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2000000,0x2000000,0x2000000,0x0,0x0,0x0,0x0,0x2000000,0x0,0x0,0x2000000,0x0,0x2000000,0x10412800,0x0,0x2000000,0x2000000,0x10412800,0x0,0x0,0x0,0x0,0x0,0x10412800,0x0,0x0,0x10412800,0x0,0x10412800,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x800,0x40000000,0x4,0x10050,0x0,0x0,0x0,0x0,0x2200600,0x0,0x2200680,0x0,0x2200680,0x200,0x0,0x200,0x0,0x2200600,0x200,0x0,0x2200600,0x0,0x10050,0x0,0x10050,0x2200600,0x2200600,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2200600,0x2200600,0x2240600,0x0,0x0,0x0,0x0,0x2000400,0x200200,0x0,0x2000400,0x0,0x2200600,0x10050,0x200000,0x2000400,0x2000400,0x10050,0x0,0x0,0x0,0x0,0x0,0x80210050,0x80200000,0x0,0x80210050,0x0,0x80210050,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x0,0x400,0x400000,0x200000,0x40000,0x100000,0x38044f44,0x100000,0xb8044f44,0x80000000,0x38044f44,0x400,0x4000,0x400,0x0,0x38044f44,0x400,0x100000,0x38044f44,0x100000,0x400,0x40000,0x0,0x38044f44,0x38044f44,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xc000000,0xc000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x38044f44,0x8044f44,0x4744,0x4000,0x4000,0x2444000,0x2444000,0x344,0x8044c00,0x444000,0x344,0x200000,0x38044f44,0x400,0x400,0x344,0x344,0x10000,0x10000000,0x0,0x10000000,0x0,0x0,0x10010400,0x400,0x200000,0x10400,0x400,0x10010400,0x8044800,0x8044800,0x4000000,0x8040000,0x8044000,0x8040800,0x8044000,0x8044000,0x8044800,0x400,0x2,0x40000,0x80000000,};
   }
   private static void jj_la1_init_3() {
      jj_la1_3 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x300,0x0,0x300,0x0,0x300,0x0,0x0,0x0,0x0,0x300,0x0,0x0,0x300,0x0,0x0,0x0,0x0,0x300,0x300,0x10,0x20,0x2000,0x4000,0x1000,0x9,0x9,0x0,0x6,0x6,0x70000,0x70000,0x300,0x300,0x8c00,0x8c00,0x300,0x300,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x300,0x0,0x0,0x400,0x400,0x0,0x0,0x500,0x0,0x500,0x500,0x0,0x0,0x0,0x0,0x0,0x500,0x0,0x0,0x2000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[18];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public XFSNetParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public XFSNetParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new XFSNetParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 86; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 86; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public XFSNetParser(java.io.Reader stream) {
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new XFSNetParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 86; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 86; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public XFSNetParser(XFSNetParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 86; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(XFSNetParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 86; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[128];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 86; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 128; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 18; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}

/* Generated By:JavaCC: Do not edit this line. StubParser.java */
package de.renew.call;

import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.Set;
import java.util.Vector;

//TODO: Please switch on or off this flag to suppress all "unused" warnings in this code. 
//Default case is to suppress unused warnings, because the generator produces lots of unused code.
// when working on this class, turn the suppression off.
@SuppressWarnings("unused")
public class StubParser implements StubParserConstants {
  String className;
  String netName;

  Set<String> variables;
  Set<String> assignedVariables;
  Hashtable<String, String> variableTypes;
  Set<String> getternames;
  Set<String> setternames;

  StringBuffer out = new StringBuffer();
  String pckg = "";

  void out (String output) {
    out.append(output);
    out.append("\u005cn");
  }

  public String getPackage() {
        return pckg;
  }

  public String getOutput() {
        return out.toString();
  }

  ParseException makeParseException(String msg) {
    return new ParseException("Error in line "+token.beginLine+", column "+
      token.beginColumn+":\u005cn"+msg);
  }

  void addGetterName(String name) throws ParseException  {
    if(getternames==null)    {
      getternames=new HashSet<String>();
    }

    if(getternames.contains(name))    {      throw makeParseException("Getter declared twice: " +name);
    }

    getternames.add(name);  }
  void addSetterName(String name) throws ParseException
  {
    if(setternames==null)
    {
      setternames=new HashSet<String>();
    }

    if(setternames.contains(name))
    {
      throw makeParseException("Setter declared twice: " +name);
    }

    setternames.add(name);
  }


  void variableInit() {
    variables=new HashSet<String>();
    assignedVariables=new HashSet<String>();
    variableTypes=new Hashtable<String, String>();
  }

  void declareVariable(String type, String variable)
    throws ParseException
  {
    if (variables.contains(variable)) {
      if (variableTypes.containsKey(variable)) {
        throw makeParseException("Variable declared twice: "+variable);
      } else {
        throw makeParseException("Variable declared after use: "+variable);
      }
    }
    variables.add(variable);
    if (type!=null) {
      variableTypes.put(variable,type);
    }
  }

  String getInternalName(String variable)
    throws ParseException
  {
    if (!variables.contains(variable)) {
      if (variable.equals("this")) {
        // The special variable 'this' does not need to be declared,
        // it is always redirected to the private field '_instance'
        // to make sure we refer to the net instance.
        return "_instance";
      }
      throw makeParseException("No such variable: "+variable);
    }
    return "vv"+variable;
  }

  String getParameterName(String variable)
    throws ParseException
  {
    return "pp"+variable;
  }

  boolean isPrimitive(String type) {
    type=type.intern();
    return type=="boolean" ||
      type=="char" ||
      type=="byte" ||
      type=="short" ||
      type=="int" ||
      type=="long" ||
      type=="float" ||
      type=="double";
  }

  String getObjectType(String type) {
    type=type.intern();
    if (type=="boolean") {
      return "java.lang.Boolean";
    } else if (type=="char") {
      return "java.lang.Character";
    } else if (type=="byte") {
      return "java.lang.Byte";
    } else if (type=="short") {
      return "java.lang.Short";
    } else if (type=="int") {
      return "java.lang.Integer";
    } else if (type=="long") {
      return "java.lang.Long";
    } else if (type=="float") {
      return "java.lang.Float";
    } else if (type=="double") {
      return "java.lang.Double";
    } else {
      return "java.lang.Void";
    }
  }

  String getTypeString(String variable) {
    String type=(String)variableTypes.get(variable);
    if (isPrimitive(type)) {
      return getObjectType(type)+".TYPE";
    } else {
      return type+".class";
    }
  }

/***********************************
 * THE STUBBER GRAMMAR STARTS HERE *
 ***********************************/
  final public void StubFile() throws ParseException {
  Token t, t2, s;
  String name;
  String implementsList;
  boolean hasConstructor=false;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PACKAGE:
      PackageClause();
      break;
    default:
      jj_la1[0] = jj_gen;
      ;
    }
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IMPORT:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_1;
      }
      ImportClause();
    }
    out("import java.util.concurrent.Callable;");
    out("import java.util.concurrent.ExecutionException;");
    out("import java.util.concurrent.Future;");
    out("import java.util.Set;");
    out("import java.util.Collection;");
        out("");
    out("import de.renew.engine.simulator.SimulationThreadPool;");
    out("import de.renew.net.NetInstance;");
    out("import de.renew.net.Place;");
    out("import de.renew.net.PlaceInstance;");
    out("import de.renew.engine.searchqueue.SearchQueue;");
    s = jj_consume_token(CLASS);
    t = jj_consume_token(IDENTIFIER);
    className=t.image;
    if(s.specialToken!=null){
    out(s.specialToken.image);
    }
    out("public class "+t.image);
    jj_consume_token(FOR);
    if (jj_2_1(2)) {
      t = jj_consume_token(IDENTIFIER);
      t2 = jj_consume_token(IDENTIFIER);
      if (!t.image.equals("net")) {
        {if (true) throw makeParseException("Expected 'for net <netname>' or 'for netinstance', encountered 'for " + t.image + " " + t2.image + "'");}
      }
      out("  extends de.renew.net.NetInstanceImpl");
      netName = t2.image;
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        t = jj_consume_token(IDENTIFIER);
      if (!t.image.equals("netinstance")) {
        {if (true) throw makeParseException("Expected 'for net <netname>' or 'for netinstance', encountered 'for " + t.image + "'");}
      }
      netName = null;
        break;
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IMPLEMENTS:
      jj_consume_token(IMPLEMENTS);
      name = Name();
      implementsList=name;
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[3] = jj_gen;
          break label_2;
        }
        jj_consume_token(COMMA);
        name = Name();
        implementsList=implementsList+", "+name;
      }
      out("  implements "+implementsList);
      break;
    default:
      jj_la1[4] = jj_gen;
      ;
    }
    jj_consume_token(LBRACE);
    out("{");
    out("");
    out("  private static final org.apache.log4j.Logger logger = org.apache.log4j.Logger");
    out("                                                        .getLogger("+className+".class);");
    if (netName==null) {
      out("  private final NetInstance _instance;");
    }
    else {
      out("  private final NetInstance _instance = this;");
    }
    out("");
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case BREAK:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FLOAT:
      case INT:
      case LONG:
      case SHORT:
      case VOID:
      case IDENTIFIER:
      case 118:
      case 119:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_3;
      }
      if (jj_2_2(2147483647)) {
        ConstructorDeclaration();
      hasConstructor=true;
      } else if (jj_2_3(2)) {
        PlaceAccessDeclaration();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BOOLEAN:
        case BREAK:
        case BYTE:
        case CHAR:
        case DOUBLE:
        case FLOAT:
        case INT:
        case LONG:
        case SHORT:
        case VOID:
        case IDENTIFIER:
          MethodDeclaration();
          break;
        default:
          jj_la1[6] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    jj_consume_token(RBRACE);
    jj_consume_token(0);
    if (!hasConstructor) {
      if (netName == null) {
        // Output a default constructor for a stub wrapping an existing instance.
        out("  public "+className+"(NetInstance instance)");
        out("  {");
        out("    _instance = instance;");
        out("  }");
      }
      else {
        // Output a default constructor.
        // No synchronisation at all. Might also want an optional
        // "new" synchronisation without parameters.
        out("  public "+className+"()");
        out("  {");
        out("    super();");
        out("    Future<Object> future = SimulationThreadPool.getCurrent()");
        out("                                 .submitAndWait(new Callable<Object>() {");
        out("      public Object call() throws RuntimeException {");
        out("        try {");
        out("          de.renew.net.Net net = de.renew.net.Net.forName(\u005c""+netName+"\u005c");");
        out("          net.setEarlyTokens(true);");
        out("          initNet(net, true);");
        out("          createConfirmation(de.renew.application.SimulatorPlugin.getCurrent().getCurrentEnvironment().getSimulator().currentStepIdentifier());");
        out("        } catch (de.renew.net.NetNotFoundException e) {");
        out("          throw new RuntimeException(e.toString(), e);");
        out("        } catch (de.renew.unify.Impossible e) {");
        out("          throw new RuntimeException(e.toString(), e);");
        out("        }");
        out("        return null;");
        out("      }");
        out("    });");
        out("    try {");
        out("        future.get();");
        out("    } catch (InterruptedException e) {");
        out("        logger.error(\u005c"Timeout while waiting for simulation thread to finish\u005c", e);");
        out("    } catch (ExecutionException e) {");
        out("        logger.error(\u005c"Simulation thread threw an exception\u005c", e);");
        out("    }");
        out("  }");
      }
    }
    out("}");
  }

  final public void PackageClause() throws ParseException {
    jj_consume_token(PACKAGE);
    pckg = Name();
    jj_consume_token(SEMICOLON);
        out("package "+pckg+";");
  }

  final public void ImportClause() throws ParseException {
  String name;
  boolean star=false;
    jj_consume_token(IMPORT);
    name = Name();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOT:
      jj_consume_token(DOT);
      jj_consume_token(STAR);
                                   star=true;
      break;
    default:
      jj_la1[7] = jj_gen;
      ;
    }
    jj_consume_token(SEMICOLON);
    if (star) {
      out("import "+name+".*;");
    } else {
      out("import "+name+";");
    }
  }

  final public void PlaceAccessDeclaration() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 118:
      PlaceGetterDeclaration();
      break;
    case 119:
      PlaceSetterDeclaration();
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void PlaceGetterDeclaration() throws ParseException {
  Token t;
  Token s;
  String name;
    s = jj_consume_token(118);
    t = jj_consume_token(STRING_LITERAL);
    jj_consume_token(SEMICOLON);
       name=t.image.replaceAll("\u005c\u005cs","");
    name=name.replaceAll("\u005c\u005cW","");

    addGetterName(name);

    if(s.specialToken != null) {
      out(s.specialToken.image);
      }
    out("public Set<Object> get" + name + "()");
    out("{");
    out("      Set<Object> result = null;");
    out("      Collection<Place> places = _instance.getNet().places();");
    out("      Place place = null;");
    out("      for (Place p : places) {");
    out("          if (p.getName().equals(" + t.image + ")) {");
    out("              place = p;");
    out("              break;");
    out("          }");
    out("      }");
    out("      PlaceInstance placeInstance = null;");
    out("      if (place != null) {");
    out("          placeInstance = _instance.getInstance(place);");
    out("      }");
    out("      if (placeInstance != null) {");
    out("          result = placeInstance.getDistinctTokens();");
    out("      }");
    out("      return result;");
    out("}");
  }

  final public void PlaceSetterDeclaration() throws ParseException {
  Token t;
  Token s;
  String name;
    s = jj_consume_token(119);
    t = jj_consume_token(STRING_LITERAL);
    jj_consume_token(SEMICOLON);
    name=t.image.replaceAll("\u005c\u005cs","");
    name=name.replaceAll("\u005c\u005cW","");

    addSetterName(name);

    if(s.specialToken != null) {
      out(s.specialToken.image);
      }
    out("public void set" + name + "(Object o)");
    out("{");
    out("      Collection<Place> places = _instance.getNet().places();");
    out("      Place place = null;");
    out("      for (Place p : places) {");
    out("          if (p.getName().equals(" + t.image + ")) {");
    out("              place = p;");
    out("              break;");
    out("          }");
    out("      }");
    out("      if (place != null) {");
    out("          PlaceInstance placeInstance = _instance.getInstance(place);");
    out("          placeInstance.insertToken(o,SearchQueue.getTime());");
    out("      }");
    out("}");
  }

  final public void MethodDeclaration() throws ParseException {
  String type;
  String tmpType;
  boolean isBreak;
  Token t;
  Token s;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FLOAT:
    case INT:
    case LONG:
    case SHORT:
    case IDENTIFIER:
      type = Type();
      isBreak=false;
      break;
    case VOID:
      s = jj_consume_token(VOID);
      if(s.specialToken != null) {
      out(s.specialToken.image);
      }
      type="void";
      isBreak=false;
      break;
    case BREAK:
      s = jj_consume_token(BREAK);
      jj_consume_token(VOID);
      if(s.specialToken != null) {
      out(s.specialToken.image);
      }
      type="void";
      isBreak=true;
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    t = jj_consume_token(IDENTIFIER);
    variableInit();
    Params("public "+type+" "+t.image,null,null);
    assignedVariables.add("this");
    if (!type.equals("void")) {
      declareVariable(type,"return");
      tmpType=type;
      if(isPrimitive(type)){
        tmpType=getObjectType(type);
      }
      out("      Future<"+tmpType+"> future = SimulationThreadPool.getCurrent()");
      out("                                   .submitAndWait(new Callable<"+tmpType+">() {");
      out("        public "+tmpType+" call() throws RuntimeException {");
      out("          Object "+getInternalName("return")+";");
    } else if (isBreak) {
          out("      SimulationThreadPool.getCurrent().execute(new Runnable() {");
          out("        public void run() {");
    } else {
      out("      SimulationThreadPool.getCurrent().executeAndWait(new Runnable() {");
          out("        public void run() {");
    }
    MethodBody("            ");
    if (!type.equals("void")) {
      if (!assignedVariables.contains("return")) {
        {if (true) throw makeParseException("Pseudo-variable return unassigned "+
          "at end of method.");}
      }
      if (isPrimitive(type)) {
              out("            return ((de.renew.util.Value)"+
          getInternalName("return")+")."+type+"Value();");
      } else {
              out("            return ("+type+")"+getInternalName("return")+";");
      }
    }
    out("        }");
    out("      });");
    if (!type.equals("void")) {
      out("      try {");
      out("          return future.get();");
      out("      } catch (InterruptedException e) {");
      out("          logger.error(\u005c"Timeout while waiting for simulation thread to finish\u005c", e);");
      out("      } catch (ExecutionException e) {");
      out("          logger.error(\u005c"Simulation thread threw an exception\u005c", e);");
      out("      }");
          out("");
      out("      // We should never return nothing but some error occured befor.");
      if(type=="boolean") {
        out("      return false;");
      } else if (type=="char"){
        out("      return \u005c"\u005c\u005cu0000\u005c";");
      }else if (type=="byte" ||
                        type=="short" ||
                        type=="int" ||
                        type=="long" ||
                        type=="float" ||
                        type=="double"){
        out("      return 0;");
      }
      else {
                out("      return null;");
          }
    }
    out("  }");
  }

  final public void ConstructorDeclaration() throws ParseException {
  Token t;
    t = jj_consume_token(IDENTIFIER);
    if (!t.image.equals(className)) {
      {if (true) throw makeParseException(
        "Constructor name and class name do not match.");}
    }
    variableInit();
    Params("public "+className,
        null,
        "    super();\u005cn");
    if (netName == null) {
      // constructor for a stub wrapping an existing net instance
      // there must be a parameter "instance" so we can initialize our _instance field
      if (!variables.contains("instance")) {
        {if (true) throw makeParseException(
          "Custom constructors for netinstance stubs must have an 'instance' parameter "+
          "taking the NetInstance to be wrapped by the stub.");}
      }
      out("    _instance = " + getInternalName("instance") + ";");
    }
    else {
      // constructor for a stub being a net instance itself
      out("    Future<Object> future = SimulationThreadPool.getCurrent()");
      out("                                 .submitAndWait(new Callable<Object>() {");
      out("      public Object call() throws RuntimeException {");
      out("        try {");
      out("          de.renew.net.Net net = de.renew.net.Net.forName(\u005c""+netName+"\u005c");");
      out("          net.setEarlyTokens(true);");
      out("          initNet(net, true);");
      out("          createConfirmation(de.renew.application.SimulatorPlugin.getCurrent().getCurrentEnvironment().getSimulator().currentStepIdentifier());");
      out("        } catch (de.renew.net.NetNotFoundException e) {");
      out("          throw new RuntimeException(e.toString(), e);");
      out("        } catch (de.renew.unify.Impossible e) {");
      out("          throw new RuntimeException(e.toString(), e);");
      out("        }");
      out("        return null;");
      out("      }");
      out("    });");
      out("    try {");
      out("        future.get();");
      out("    } catch (InterruptedException e) {");
      out("        logger.error(\u005c"Timeout while waiting for simulation thread to finish\u005c", e);");
      out("    } catch (ExecutionException e) {");
      out("        logger.error(\u005c"Simulation thread threw an exception\u005c", e);");
      out("    }");
    }
    assignedVariables.add("this");
    MethodBody("    ");
    out("  }");
  }

  final public void MethodBody(String indent) throws ParseException {
    out(indent+"de.renew.unify.Tuple inTuple;");
    out(indent+"de.renew.unify.Tuple outTuple;");
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FLOAT:
      case INT:
      case LONG:
      case RETURN:
      case SHORT:
      case THIS:
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[10] = jj_gen;
        break label_4;
      }
      if (jj_2_4(2147483647)) {
        DownlinkSpecification(indent);
      } else if (jj_2_5(2147483647)) {
        VariableAssignment(indent);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case DOUBLE:
        case FLOAT:
        case INT:
        case LONG:
        case SHORT:
        case IDENTIFIER:
          VariableDeclaration(indent);
          break;
        default:
          jj_la1[11] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    jj_consume_token(RBRACE);
  }

  final public void VariableAssignment(String indent) throws ParseException {
  String type;
  String type2;
  String decl;
  Token s;
  String expr;
  Token t;
    type = Type();
    s = jj_consume_token(IDENTIFIER);
    jj_consume_token(ASSIGN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      expr = Name();
      break;
    case STRING_LITERAL:
      t = jj_consume_token(STRING_LITERAL);
       expr = t.image;
      break;
    case INTEGER_LITERAL:
      t = jj_consume_token(INTEGER_LITERAL);
       expr = t.image;
      break;
    case CHARACTER_LITERAL:
      t = jj_consume_token(CHARACTER_LITERAL);
       expr = t.image;
      break;
    case FLOATING_POINT_LITERAL:
      t = jj_consume_token(FLOATING_POINT_LITERAL);
       expr = t.image;
      break;
    case 120:
      jj_consume_token(120);
      type2 = Type();
      jj_consume_token(LPAREN);
          decl="";
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        t = jj_consume_token(IDENTIFIER);
          decl=t.image;
        label_5:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[12] = jj_gen;
            break label_5;
          }
          jj_consume_token(COMMA);
          t = jj_consume_token(IDENTIFIER);
              decl+=("," + t.image);
        }
        break;
      default:
        jj_la1[13] = jj_gen;
        ;
      }
      jj_consume_token(RPAREN);
           expr = "new " + type2 + "(" + decl + ")";
      break;
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(SEMICOLON);
    declareVariable(type,s.image);
    assignedVariables.add(s.image);
    out(indent + type +" " + getInternalName(s.image) + "=" + expr + ";");
  }

  final public void VariableDeclaration(String indent) throws ParseException {
  String type;
  Token t;
  Token s;
    type = Type();
    t = jj_consume_token(IDENTIFIER);
    declareVariable(type,t.image);
    out(indent+"Object "+getInternalName(t.image)+";");
    jj_consume_token(SEMICOLON);
  }

  final public void Params(String start, String throwsClause, String firstCmd) throws ParseException {
  String decl;
  StringBuffer result;
    jj_consume_token(LPAREN);
    result=new StringBuffer("  ");
    result.append(start);
    result.append("(");
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FLOAT:
    case INT:
    case LONG:
    case SHORT:
    case IDENTIFIER:
      decl = Param();
      result.append(decl);
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[15] = jj_gen;
          break label_6;
        }
        jj_consume_token(COMMA);
        decl = Param();
        result.append(", ");
        result.append(decl);
      }
      break;
    default:
      jj_la1[16] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
    result.append(")");
    out(result.toString());
    if (throwsClause!=null) {
      out(throwsClause);
    }
    jj_consume_token(LBRACE);
    out("  {");
    if (firstCmd!=null) {
      out(firstCmd);
    }
    // Copy all parameters into the internal variables.
    // On the fly, convert primitives to values.
    Iterator<String> iterator=variables.iterator();
    while (iterator.hasNext()) {
      String variable=(String)iterator.next();
      String type=(String)variableTypes.get(variable);
      if (isPrimitive(type)) {
        out("      final Object "+getInternalName(variable)+"="+
          "new de.renew.util.Value(new "+getObjectType(type)+
          "("+getParameterName(variable)+"));");
      } else {
        out("      final Object "+getInternalName(variable)+"="+
          getParameterName(variable)+";");
      }
    }
  }

  final public String Param() throws ParseException {
  String type;
  Token t;
    type = Type();
    t = jj_consume_token(IDENTIFIER);
    declareVariable(type,t.image);
    assignedVariables.add(t.image);
    {if (true) return "final "+type+" "+getParameterName(t.image);}
    throw new Error("Missing return statement in function");
  }

  final public void DownlinkSpecification(String indent) throws ParseException {
  String netVar;
  String channel;
  String argVar;
  Vector<String> channelVariables=new Vector<String>();
  Hashtable<String, String> components;
    netVar = Variable(indent);
    if (!assignedVariables.contains(netVar)) {
      {if (true) throw makeParseException("Variable is unassigned: "+netVar);}
    }
    jj_consume_token(COLON);
    channel = ChannelName();
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case RETURN:
    case THIS:
    case IDENTIFIER:
      argVar = Variable(indent);
      channelVariables.addElement(argVar);
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[17] = jj_gen;
          break label_7;
        }
        jj_consume_token(COMMA);
        argVar = Variable(indent);
       channelVariables.addElement(argVar);
      }
      break;
    default:
      jj_la1[18] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
    jj_consume_token(SEMICOLON);
    out(indent+"inTuple=new de.renew.unify.Tuple("+channelVariables.size()+");");

    components=new Hashtable<String, String>();

    for (int i=0;i<channelVariables.size();i++) {
      String var=channelVariables.elementAt(i);
      if (assignedVariables.contains(var)) {
        out(indent+"try {");
        out(indent+"  de.renew.unify.Unify.unify(inTuple.getComponent("+i+"),"+
          getInternalName(var)+",null);");
        out(indent+"} catch (de.renew.unify.Impossible e) {");
        out(indent+"  throw new RuntimeException("+
          "\u005c"Unification failed unexpectedly.\u005c", e);");
        out(indent+"}");
      } else if (components.containsKey(var)) {
        out(indent+"try {");
        out(indent+"  de.renew.unify.Unify.unify(inTuple.getComponent("+i+"),");
        out(indent+"    inTuple.getComponent("+components.get(var)+"),null);");
        out(indent+"} catch (de.renew.unify.Impossible e) {");
        out(indent+"  throw new RuntimeException("+
          "\u005c"Unification failed unexpectedly.\u005c", e);");
        out(indent+"}");
      } else {
        // In the case of typed variables, make an
        // appropriate type check.
        if (variableTypes.containsKey(var)) {
          out(indent+"try {");
          out(indent+"  de.renew.expression.CallExpression."+
            "expressionConstraint(new de.renew.unify.Variable(),");
          out(indent+"    new de.renew.formalism.function.CastFunction("+
            getTypeString(var)+"),");
          out(indent+"    new de.renew.unify.Variable("+
            "inTuple.getComponent("+i+"),null),null);");
          out(indent+"} catch (de.renew.unify.Impossible e) {");
          out(indent+"  throw new RuntimeException("+
            "\u005c"Unification failed unexpectedly.\u005c", e);");
          out(indent+"}");
        }
        // Remember that this variable is a component of
        // the current vector.
        components.put(var,""+i);
      }
    }

    out(indent+"outTuple=de.renew.call.SynchronisationRequest.synchronize(");
    out(indent+"_instance,\u005c""+channel+"\u005c",inTuple);");
    out("//**only to avoid unused warnings. !BAD! style**");
    out(indent+"outTuple.hashCode();");

    for (int i=0;i<channelVariables.size();i++) {
      String var=channelVariables.elementAt(i);
      if (!assignedVariables.contains(var)) {
        out(indent+getInternalName(var)+"=outTuple.getComponent("+i+");");
        assignedVariables.add(var);
      }
    }
  }

  final public String ChannelName() throws ParseException {
  Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      t = jj_consume_token(IDENTIFIER);
    {if (true) return t.image;}
      break;
    case NEW:
      jj_consume_token(NEW);
    {if (true) return "new";}
      break;
    default:
      jj_la1[19] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String Variable(String indent) throws ParseException {
  Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      t = jj_consume_token(IDENTIFIER);
    if (!variables.contains(t.image)) {
      // Might also want
      //   throw makeParseException("No such variable: "+t.image);
      // if all variables must be declared.
      declareVariable(null,t.image);
      out(indent+"Object "+getInternalName(t.image)+";");
    }
    {if (true) return t.image;}
      break;
    case RETURN:
      jj_consume_token(RETURN);
    if (!variables.contains("return")) {
      {if (true) throw makeParseException("No return in constructor or void method.");}
    }
    {if (true) return "return";}
      break;
    case THIS:
      jj_consume_token(THIS);
    {if (true) return "this";}
      break;
    default:
      jj_la1[20] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String Type() throws ParseException {
  String type;
    type = NonArrayType();
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACKET:
        ;
        break;
      default:
        jj_la1[21] = jj_gen;
        break label_8;
      }
      jj_consume_token(LBRACKET);
      jj_consume_token(RBRACKET);
      type=type+"[]";
    }
    {if (true) return type;}
    throw new Error("Missing return statement in function");
  }

  final public String NonArrayType() throws ParseException {
  String type;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FLOAT:
    case INT:
    case LONG:
    case SHORT:
      type = PrimitiveType();
      break;
    case IDENTIFIER:
      type = Name();
      break;
    default:
      jj_la1[22] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return type;}
    throw new Error("Missing return statement in function");
  }

  final public String PrimitiveType() throws ParseException {
  Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
      t = jj_consume_token(BOOLEAN);
      break;
    case CHAR:
      t = jj_consume_token(CHAR);
      break;
    case BYTE:
      t = jj_consume_token(BYTE);
      break;
    case SHORT:
      t = jj_consume_token(SHORT);
      break;
    case INT:
      t = jj_consume_token(INT);
      break;
    case LONG:
      t = jj_consume_token(LONG);
      break;
    case FLOAT:
      t = jj_consume_token(FLOAT);
      break;
    case DOUBLE:
      t = jj_consume_token(DOUBLE);
      break;
    default:
      jj_la1[23] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  if(t.specialToken != null){
  out(t.specialToken.image);}
  {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

  final public String Name() throws ParseException {
  Token t;
  StringBuffer s=new StringBuffer();
    t = jj_consume_token(IDENTIFIER);
                   s.append(t.image);
    label_9:
    while (true) {
      if (jj_2_6(2)) {
        ;
      } else {
        break label_9;
      }
      jj_consume_token(DOT);
      t = jj_consume_token(IDENTIFIER);
      s.append("."); s.append(t.image);
    }
    {if (true) return s.toString();}
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_3R_12() {
    if (jj_3R_18()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_19()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_13() {
    if (jj_3R_20()) return true;
    return false;
  }

  private boolean jj_3R_14() {
    if (jj_3R_21()) return true;
    return false;
  }

  private boolean jj_3R_10() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_13()) {
    jj_scanpos = xsp;
    if (jj_3R_14()) return true;
    }
    return false;
  }

  private boolean jj_3R_21() {
    if (jj_scan_token(119)) return true;
    if (jj_scan_token(STRING_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_17() {
    if (jj_scan_token(THIS)) return true;
    return false;
  }

  private boolean jj_3R_16() {
    if (jj_scan_token(RETURN)) return true;
    return false;
  }

  private boolean jj_3R_24() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(11)) {
    jj_scanpos = xsp;
    if (jj_scan_token(16)) {
    jj_scanpos = xsp;
    if (jj_scan_token(13)) {
    jj_scanpos = xsp;
    if (jj_scan_token(47)) {
    jj_scanpos = xsp;
    if (jj_scan_token(36)) {
    jj_scanpos = xsp;
    if (jj_scan_token(38)) {
    jj_scanpos = xsp;
    if (jj_scan_token(28)) {
    jj_scanpos = xsp;
    if (jj_scan_token(22)) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_5() {
    if (jj_3R_12()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(ASSIGN)) return true;
    return false;
  }

  private boolean jj_3R_23() {
    if (jj_3R_25()) return true;
    return false;
  }

  private boolean jj_3_4() {
    if (jj_3R_11()) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3R_11() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_15()) {
    jj_scanpos = xsp;
    if (jj_3R_16()) {
    jj_scanpos = xsp;
    if (jj_3R_17()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_15() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_22() {
    if (jj_3R_24()) return true;
    return false;
  }

  private boolean jj_3_6() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_18() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_22()) {
    jj_scanpos = xsp;
    if (jj_3R_23()) return true;
    }
    return false;
  }

  private boolean jj_3_2() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_25() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_6()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_3() {
    if (jj_3R_10()) return true;
    return false;
  }

  private boolean jj_3R_20() {
    if (jj_scan_token(118)) return true;
    if (jj_scan_token(STRING_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_19() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public StubParserTokenManager token_source;
  JavaCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[24];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
      jj_la1_init_3();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x0,0x0,0x0,0x0,0x10413800,0x10413800,0x0,0x0,0x10413800,0x10412800,0x10412800,0x0,0x0,0x0,0x0,0x10412800,0x0,0x0,0x0,0x0,0x0,0x10412800,0x10412800,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x400,0x4,0x0,0x0,0x2,0x4008050,0x4008050,0x0,0x0,0x4008050,0x10c050,0x8050,0x0,0x0,0x20000000,0x0,0x8050,0x0,0x104000,0x100,0x104000,0x0,0x8050,0x8050,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x20,0x8000,0x0,0x20,0x20,0x10000,0x0,0x20,0x20,0x20,0x8000,0x20,0x3a,0x8000,0x20,0x8000,0x20,0x20,0x20,0x1000,0x20,0x0,};
   }
   private static void jj_la1_init_3() {
      jj_la1_3 = new int[] {0x0,0x0,0x0,0x0,0x0,0xc00000,0x0,0x0,0xc00000,0x0,0x0,0x0,0x0,0x0,0x1000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[6];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public StubParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public StubParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new StubParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 24; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 24; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public StubParser(java.io.Reader stream) {
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new StubParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 24; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 24; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public StubParser(StubParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 24; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(StubParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 24; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        exists = true;
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.add(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[121];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 24; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 121; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 6; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
